FIX THIS!!!

Når går bussen  fra sentrum til ugla lørdag 02.00.


SMS:

from prinsen to krokstien. (prinsen kino eller prinsenkrysset? Reklameinntekter?)

nth natt til søndag. (HELT BLANK?!)

Index: tuc/facts.pl
===================================================================
--- tuc/facts.pl        (revision 646)
+++ tuc/facts.pl        (working copy)
@@ -16,7 +16,7 @@
 %  Facts are deliberately kept separate from semantics

 % UNIT: /tuc/
-:-module(facts, [ difact/1, fact/1, have/4, isa/2, neighbourhood/1, precedent_firstname/1, unproperstation1/1 ] ).
+:-module(facts, [ difact/1, fact/1, have/4, isa/2, neighbourhood/1, precedent_firstname/1 ] ).  %% , unproperstation1/1    %% Check out how this works, and add it again later! Unknown stations could be neibhorhoods at least.

 %% RS-131225, UNIT: / and utility/
 :- ensure_loaded( user:'../declare' ).       %% RS-111212 :-op( 710,xfx, isa ).
@@ -79,13 +79,13 @@
     user:difact(UID,F).

 % OLD ?
-:- use_module( '../db/auxtables', [ unproperstation/1  ] ).  %% RS-140928 Auto-generated by makeauxtables!
+%:- use_module( '../db/auxtables', [ unproperstation/1  ] ).  %% RS-140928 Auto-generated by makeauxtables!
+%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+%unproperstation1( X ) :-
+%%    fail.
+%    unproperstation(X), %% no bus passes %%  maybe empty
+%    \+ neighbourhood(X).
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-unproperstation1( X ) :-
-%    fail.
-    unproperstation(X), %% no bus passes %%  maybe empty
-    \+ neighbourhood(X).
-%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 jonas isa firstname.
@@ -536,8 +536,8 @@
          value(busflag,true), %% \+ dater
     station(X),                %%  Semantically, not actual
     \+ xforeign(X),             %%   ( adjust database error)
-    \+ unwanted_place(X),       %%   ( adjust database error)
-    \+ unproperstation1(X).     %%   ( stations with no passings)  %% RS-131230 See lex.pl unproperstation1/1
+    \+ unwanted_place(X). %,       %%   ( adjust database error)
+%    \+ unproperstation1(X).     %%   ( stations with no passings)  %% RS-131230 See lex.pl unproperstation1/1
                                  %% maybe empty

 %%  \+ tramstation(X).         %% NO ILA is both
@@ -665,7 +665,7 @@
 neibor(X):-
      (isat(_,X);
       nostation(X) ;
-      unproperstation1(X) ; %% recognised as neighbourhood (feature)       %% From tuc/lex.pl
+%      unproperstation1(X) ; %% recognised as neighbourhood (feature)       %% From tuc/lex.pl
       %% maybe empty

       placestat(X,_) ;
Index: tuc/lex.pl
===================================================================
--- tuc/lex.pl  (revision 646)
+++ tuc/lex.pl  (working copy)
@@ -126,7 +126,7 @@
 %%% RS-111205, UNIT: tuc
 :- use_module( dict_n, [ kw/1 ] ). %% TA-100902 %%%%%%%%%  All the words appearing as [ ] constants in grammar %% RS-131225
 :- use_module( evaluate, [ instant/2 ] ). %% RS-111204    isa/2 from facts.pl
-:- use_module( facts, [ fact/1, isa/2,  neighbourhood/1, unproperstation1/1  ] ).  %% RS-111204    isa/2 from facts.pl
+:- use_module( facts, [ fact/1, isa/2,  neighbourhood/1  ] ).  %% RS-111204    isa/2 from facts.pl, , unproperstation1/1
 :- use_module( names, [  compname/3,  generic_place/1,  samename/2,  streetsyn/1, synname/2,  unwanted_name/1  ] ).

 %%
@@ -501,7 +501,7 @@
 irrelevant_name(X):-     %% DONT spellcheck towards these names !
     bus(X);

-   unproperstation1(X); %% DONT spellcheck to spurious names !
+%   unproperstation1(X); %% DONT spellcheck to spurious names !
 %%  maybe empty

     unwanted_name(X);
@@ -1621,7 +1621,7 @@


 remove_streetsurp:- % Remove streetname (single) if also station/neighbourhood etc.
-     for( (txt(M,w(A,name(_a1,_,street)),N),txt(M,w(A,name(A2,_,K)),N), K \== street, \+unproperstation1(A2)),
+     for( (txt(M,w(A,name(_a1,_,street)),N),txt(M,w(A,name(A2,_,K)),N), K \== street ), % \+unproperstation1(A2)  ),
            retract(txt(M,w(A,name(_a1,_,street)),N))).

 %% suspended  :   error marking becomes meaningless (too early)



Check out make_total_google!

makeanswer(true,FlatCode,ProgIn,AnswerOut       ) :-
    makeinitanswer(true,FlatCode,ProgIn,InitAnswer),
    pragma_aux(ans,ProgIn,InitAnswer,AnswerOut),
    !,
    make_total_google(AnswerOut, _TOTAL). %% busanshp.pl

LOG
===
RS-120803
Moved db/regbusall to general regbus in buslog.pl

This call failed because prinsenkrysset is not a hpl(X)! (Add a general "neighborhood as station" predicat?
	connections(A,B,free(19),nyborg,prinsenkrysset,friday,40,[to,from],C,D)

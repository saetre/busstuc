/* -*- Mode:Prolog; coding:utf-8; -*- */
% Grammar files transformed to dcg_e.pl or dcg_n.pl 
%%from writeheading in tuc/metacomp.pl
%% datetime(2014,10,20,10,49,39)

%% FILE dcg_e.pl
%% Automatically created by tuc/metacomp.pl, based on dict and tuc/gram_...

:-module( dcg_e, [sentence/6,anorder/7,as0/5,atom/6,atomlist/6,be_modal/6,begin/5,bus_number/6,clock_number/6,colon0/5,descend00/9,each/5,either0/5,end/5,from/5,in0/5,kl0/5,latest/5,nameq3/7,nounp/7,nounp1/8,npy/8,nr0/5,ones/5,or1/5,others/5,pointNO/5,prep0/6,qtrailer/5,road_number/6,statemenreal/6,statics/6,streetno/5,superlative/7,that_verb/11,that0/5,that0/6,this1/7,trans_verbs/10,very/5,year0/6] ).

:- ensure_loaded( user:'../declare.pl' ). %% RS-111213 General (semantic) Operators, ...
:- use_module( '../utility/utility', [ testmember/2 ] ).  %% test/1, RS-140914

%:- ensure_loaded( dcg_e:'dagrun_e' ). %%, [ cc/5, w6 ] ). %% RS-140209 What is DAG?
:- use_module( 'dagrun_e', [cc/5,check_stop/5,end_of_line/5,lock/5,look_ahead/6,not_look_ahead/6,pushstack/7,skip_rest/5,unlock/4,virtual/6,w/6] ). %% RS-111213 What is DAG? 
:- use_module( 'dict_e', [noun/1,preposition/1,pronoun/2]). %% RS-111213 What is DAG? 
:- prolog_flag(discontiguous_warnings,_,off).

:- use_module( '../utility/datecalc', [ addtotime/3, this_year/1, todaysdate/1 ] ).  %% RS-131228, add_days/3, datetime/6, days_between/3, easterdate/2, subfromtime/3, timenow/1, today/1, 
:- use_module( '../db/timedat', [ named_date/2 ] ). %% dedicated_date/1, RS-131228
:- use_module( fernando, [ adjnamecomp_template/3, adjnoun_template/4, adjname_template/4, adjust_year/3,
         adj_template/5, adv_compl/6, align/5, align_measure/5, align_noun_name/5, atom_templ/2, bealign/5,
         compare/5,      compatvar/2, compoundtest/4, constrain/2, constrainit/2, dayname/1, dtv_template/6,
         has_template/3, it_template/1, iv_template/4, latin/4, monthnumber/2, negate/3, noun_adverb/4, noun_compl/4, pluralis/2, preadjs_template/4,
         rv_template/7, setvartype/2, tv_template/5, type/2, vartypeid/2, verb_compl/6, verbtype/2 ] ). %% RS-140921 value_world/1, vartype/3, which_thing/2, whodunnit/2
:- use_module( semantic, [ a_compl/4, gradv_templ/2, measureclass/1, particle/3, post_adjective/1, pvi_templ/2, stanprep/2, subclass0/2, tv_templ/3, v_compl/4 ] ). %% RS-131227
:- use_module( '../main', [ traceprint/2 ] ). %%RS-140209 
:- use_module( lex, [ no_unprotected_verb/0 ] ). %% txt/3, unprotected_verb/0, maxl/1, RS-140209

wx(adj2(_19985,_19987),[wx,_20057],_20029,_20033) --> 
    w(adj2(_19987,_19985),_20057,_20029,_20033).

sentence([_19983],[sentence,{},!,_20113,_20171],_20055,_20059) --> 
    {user:value(textflag,true)},
    !,
    sentence1(_19983,_20113,_20055,_20147),
    terminator(_20171,_20147,_20059).

sentence([new:::_19991],[sentence,{},_20115,_20173,!,_20231],_20067,_20071) --> 
    {user:value(queryflag,false)},
    declaration(_19991,_20115,_20067,_20149),
    terminatore(_20173,_20149,_20203),
    !,
    accept(_20231,_20203,_20071).

sentence([_19983],[sentence,{},_20109,_20167,!,_20225],_20061,_20065) --> 
    {user:value(queryflag,true)},
    implicitq(_19983,_20109,_20061,_20143),
    terminatores0(_20167,_20143,_20197),
    !,
    accept(_20225,_20197,_20065).

sentence(_19981,[sentence,_20079,{},_20151,_20199],_20051,_20055) --> 
    onesentence(_20003,_20079,_20051,_20113),
    {_20003\==error},
    check_stop(_20151,_20113,_20181),
    moresentences(_20003,_19981,_20199,_20181,_20055).

moresentences(_19981,_19983,[moresentences,_20071,_20129],_20037,_20041) --> 
    onesentence(_19995,_20071,_20037,_20105),
    evenmore(_19981,_19995,_19983,_20129,_20105,_20041).

evenmore(_19981,[],[_19981],[evenmore,[]],_20029,_20029) --> 
    [].

evenmore(_19981,error,[_19981,error],[evenmore,!,_20089],_20039,_20043) --> 
    !,
    skip_rest(_20089,_20039,_20043).

evenmore(_19981,_19983,[_19981|_19989],[evenmore,_20075],_20035,_20039) --> 
    moresentences(_19983,_19989,_20075,_20035,_20039).

onesentence([],[onesentence,_20053,!,_20111],_20025,_20029) --> 
    endofline(_20053,_20025,_20083),
    !,
    accept(_20111,_20083,_20029).

onesentence(_19981,[onesentence,_20063,_20121,!,_20179],_20035,_20039) --> 
    conf_statement(_19981,_20063,_20035,_20097),
    terminatore0(_20121,_20097,_20151),
    !,
    accept(_20179,_20151,_20039).

onesentence(_19981,[onesentence,_20063,_20121,!,_20179],_20035,_20039) --> 
    sentence1(_19981,_20063,_20035,_20097),
    terminatore(_20121,_20097,_20151),
    !,
    accept(_20179,_20151,_20039).

onesentence(error,[onesentence,_20041],_20013,_20017) --> 
    skip_rest(_20041,_20013,_20017).

conf_statement(confirm:::_19987,[conf_statement,_20051],_20023,_20027) --> 
    confirm(_19987,_20051,_20023,_20027).

confirm(true,[confirm,lit(yes)],_20017,_20021) --> 
    cc(yes,_20017,_20021).

confirm(false,[confirm,lit(no)],_20017,_20021) --> 
    cc(no,_20017,_20021).

endofline([endofline,_20045,_20093,!,_20151],_20023,_20027) --> 
    terminator(_20045,_20023,_20075),
    endofline(_20093,_20075,_20123),
    !,
    accept(_20151,_20123,_20027).

endofline([endofline,_20027],_20005,_20009) --> 
    end_of_line(_20027,_20005,_20009).

terminatore0([terminatore0,_20039,!,_20097],_20017,_20021) --> 
    terminatore(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

terminatore0([terminatore0,[]],_20005,_20005) --> 
    [].

terminatores0([terminatores0,_20039,!,_20097],_20017,_20021) --> 
    terminator(_20039,_20017,_20069),
    !,
    terminatores0(_20097,_20069,_20021).

terminatores0([terminatores0,_20045,_20093,!,_20151],_20023,_20027) --> 
    check_stop(_20045,_20023,_20075),
    endofline(_20093,_20075,_20123),
    !,
    accept(_20151,_20123,_20027).

terminatore([terminatore,lit(and),!,_20075],_20021,_20025) --> 
    cc(and,_20021,_20063),
    !,
    accept(_20075,_20063,_20025).

terminatore([terminatore,lit(or),!,_20075],_20021,_20025) --> 
    cc(or,_20021,_20063),
    !,
    accept(_20075,_20063,_20025).

terminatore([terminatore,_20027],_20005,_20009) --> 
    terminator1(_20027,_20005,_20009).

terminator1([terminator1,_20039,!,_20097],_20017,_20021) --> 
    terminator(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

terminator1([terminator1,_20039,!,_20097],_20017,_20021) --> 
    end_of_line(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

sentence1(_19981,[sentence1,_20045],_20017,_20021) --> 
    command(_19981,_20045,_20017,_20021).

sentence1(item:::_19987,[sentence1,_20085,_20193,!,_20251],_20057,_20061) --> 
    noun(_20009,sin,u,n,it:_20025,_19987,_20085,_20057,_20139),
    terminator1(_20193,_20139,_20223),
    !,
    accept(_20251,_20223,_20061).

sentence1(item:::_19987,[sentence1,_20069,_20127,!,_20185],_20041,_20045) --> 
    item(_19987,_20069,_20041,_20103),
    terminator1(_20127,_20103,_20157),
    !,
    accept(_20185,_20157,_20045).

sentence1(new:::_19987,[sentence1,_20057,_20105],_20029,_20033) --> 
    greetings0(_20057,_20029,_20087),
    statement(_19987,_20105,_20087,_20033).

sentence1(_19981,[sentence1,_20061,_20109,_20167],_20033,_20037) --> 
    greetings0(_20061,_20033,_20091),
    question(_19981,_20109,_20091,_20143),
    optional(qtrailer,_20167,_20143,_20037).

item(_19981,[item,_20051],_20023,_20027) --> 
    name_phrase(_19985,_19987,true,_19981,_20051,_20023,_20027).

command(doit:::quit(_19991),[command,_20061,_20119],_20033,_20037) --> 
    quit(_19991,_20061,_20033,_20095),
    toyou0(_20119,_20095,_20037).

command(doit:::reply(_19991),[command,_20067,!,_20135],_20039,_20043) --> 
    personal(_19991,_20067,_20039,_20101),
    !,
    accept(_20135,_20101,_20043).

command(doit:::exists(_20001:_20003)::_19993,[command,{},_20279,_20337,_20395,{},_20497,_20603,_20681,{},_20873],_20237,_20241) --> 
    {type(event,_20003)},
    dont(_20071,_20279,_20237,_20313),
    not_look_ahead(w(verb(be,_20085,_20087)),_20337,_20313,_20371),
    lexv(_20091,_20093,pres,fin,_20395,_20371,_20441),
    {\+testmember(_20093,[be,be1,thank,do1,cost])},
    pushstack(first,w(name(tuc,n,savant)),nil,_20441,_20523),name_phrase(_20153,_20155,_20157,_20159,_20497,_20523,_20561),
    worldcom(_20001,_20157,_20167,_20603,_20561,_20645),
    pushstack(first,lexv(_20177,_20093,pres,fin),nil,_20645,_20779),verb_phrase1(_20155,_20001,id,_20167,_20681,_20779,_20817),
    {negate(_20071,_20159,_19993)},
    addressat0(_20873,_20817,_20241).

command(doit:::replyq('Hello'),[command,_20051],_20023,_20027) --> 
    greetings(_20051,_20023,_20027).

addressat0([addressat0,_20051,!,_20119],_20029,_20033) --> 
    w(name(tuc,n,_20001),_20051,_20029,_20085),
    !,
    accept(_20119,_20085,_20033).

addressat0([addressat0,_20051,!,_20119],_20029,_20033) --> 
    w(name(busstuc,n,_20001),_20051,_20029,_20085),
    !,
    accept(_20119,_20085,_20033).

addressat0([addressat0,_20051,!,_20119],_20029,_20033) --> 
    w(name(bustuc,n,_20001),_20051,_20029,_20085),
    !,
    accept(_20119,_20085,_20033).

addressat0([addressat0,_20051,!,_20119],_20029,_20033) --> 
    w(name(hal,n,_20001),_20051,_20029,_20085),
    !,
    accept(_20119,_20085,_20033).

addressat0([addressat0,[]],_20005,_20005) --> 
    [].

declaration(_19985 isa self,[declaration,_20069,_20117,!,_20175],_20041,_20045) --> 
    i(_20069,_20041,_20099),
    be(_20117,_20099,_20147),
    !,
    newatomid(_19985,_20175,_20147,_20045).

declaration(_19981,[declaration,_20083,_20141,_20189,!,_20247],_20055,_20059) --> 
    newatom(_20017,_20083,_20055,_20117),
    be(_20141,_20117,_20171),
    a(_20189,_20171,_20219),
    !,
    noun(_20009,sin,u,n,_20017,_19981,_20247,_20219,_20059).

statement(_19981,[statement,_20047],_20019,_20023) --> 
    statemen(real,_19981,_20047,_20019,_20023).

statemen(_19981,_19983,[statemen,{},_20101],_20047,_20051) --> 
    {user:value(queryflag,false)},
    ifstatement(_19981,_19983,_20101,_20047,_20051).

statemen(_19981,_19983,[statemen,_20073,_20141],_20039,_20043) --> 
    statemen1(_19981,_19995,_20073,_20039,_20111),
    statemens0(_19981,_19995,_19983,_20141,_20111,_20043).

statemens0(_19981,_19983,_19983 and _19991,[statemens0,_20089,!,_20147],_20049,_20053) --> 
    and1(_20089,_20049,_20119),
    !,
    statemen(_19981,_19991,_20147,_20119,_20053).

statemens0(_19981,_19983,_19983,[statemens0,[]],_20025,_20025) --> 
    [].

statemenreal(_19981,[statemenreal,_20047],_20019,_20023) --> 
    statemen1(real,_19981,_20047,_20019,_20023).

statemen1(_19981,_19983,[statemen1,_20073],_20039,_20043) --> 
    statem(_19987,event/_19981/_19987,_19983,_20073,_20039,_20043).

ifstatement(_19981,forall(_19999)::event/_19981/_19999 and _20005=>_19995,[ifstatement,_20121,_20169,_20247,_20295],_20087,_20091) --> 
    if1(_20121,_20087,_20151),
    statems(_19999,true,_20005,_20169,_20151,_20211),
    then1(_20247,_20211,_20277),
    statemes(_19999,true,_19995,_20295,_20277,_20091).

statemen1(_19981,_19983,[statemen1,_20073],_20039,_20043) --> 
    statem(_19987,event/_19981/_19987,_19983,_20073,_20039,_20043).

statemes(_19981,_19983,exists(_19981:_20007)::_19983 and _19997,[statemes,{},{},{},_20195],_20107,_20111) --> 
    {user:value(queryflag,false)},
    {type(event,_20007)},
    {type(event,_20007)},
    ifstatement(_19981,_19997,_20195,_20107,_20111).

statemes(_19981,_19983,_19985,[statemes,_20073],_20033,_20037) --> 
    statems(_19981,_19983,_19985,_20073,_20033,_20037).

statems(_19981,_19983,_19985,[statems,_20089,_20167],_20049,_20053) --> 
    statem(_19981,_19983,_19999,_20089,_20049,_20131),
    statems0(_19981,_19983,_19999,_19985,_20167,_20131,_20053).

statems0(_19981,_19983,_19985,_19985,[statems0,[]],_20031,_20031) --> 
    [].

statem(_19981,_19983,_19985,[statem,_20133,_20181,{},_20263],_20093,_20097) --> 
    thereit(_20133,_20093,_20163),
    pvimodal(_20017,_20027,_20181,_20163,_20219),
    {constrainit(_20035,_20027)},
    pushstack(first,w(verb(_20017,pres,fin)),nil,_20219,_20283),
    verb_phrase1(_20035,_19981,id,_19983:_19985,_20263,_20283,_20097).

statem(_19981,_19983,_19985,[statem,_20153,_20201,{},!,_20283],_20113,_20117) --> 
    thereit(_20153,_20113,_20183),
    w(verb(_20027,_20041,fin),_20201,_20183,_20235),
    {testmember(_20027,[rain,snow])},
    !,
    pushstack(first,([something],lexv(iv,_20027,pres,fin)),nil,_20235,_20371),
    state(_19981,_19983,_19985,_20283,_20371,_20117).

statem(_19981,_19983,_19985,[statem,{},_20193,{},_20255,!,_20353,_20401],_20133,_20137) --> 
    {user:value(textflag,true)},
    infinitive(_20193,_20133,_20223),
    {constrainit(_20037,agent)},
    verb_phrase1(_20037,_19981,id,_20043,_20255,_20223,_20301),
    !,
    be(_20353,_20301,_20383),
    pushstack(free,(infinitive,verb_phrase1(_20037,_19981,id,_20043)),nil,_20383,_20565),
    be_complements(_20037,_19981,_19983:_19985,_20401,_20565,_20137).

statem(_19981,_19983,_19985,[statem,{},_20199,_20247,_20295,lit(that),!,_20385],_20139,_20143) --> 
    {user:value(textflag,true)},
    thereit(_20199,_20139,_20229),
    be(_20247,_20229,_20277),
    w(verb(say,past,part),_20295,_20277,_20329),
    cc(that,_20329,_20373),
    !,
    pushstack(first,([someone],w(verb(say,pres,fin)),[that]),nil,_20373,_20405),
    state(_19981,_19983,_19985,_20385,_20405,_20143).

statem(_19981,_19983,_19985,[statem,{},_20149,_20197,{},_20259],_20089,_20093) --> 
    {user:value(textflag,true)},
    thereit(_20149,_20089,_20179),
    be(_20197,_20179,_20227),
    {constrainit(_20013,agent)},
    be_complements(_20013,_19981,_19983:_19985,_20259,_20227,_20093).

statem(_19981,_19983,_19985,[statem,_20123,_20171,_20219,_20297,_20355],_20083,_20087) --> 
    it(_20123,_20083,_20153),
    be(_20171,_20153,_20201),
    noun_phrase(_20019,_20021,_20023,_20219,_20201,_20261),
    rel(_20019,_20297,_20261,_20331),
    pushstack(free,noun_phrase(_20019,_20021,_20023),nil,_20331,_20447),
    state(_19981,_19983,_19985,_20355,_20447,_20087).

statem(_19981,_19983,_19985,[statem,_20123,_20171,_20219,_20307,_20355],_20083,_20087) --> 
    it(_20123,_20083,_20153),
    be(_20171,_20153,_20201),
    verb_modifier1(_20019,_20021,_20023,_20025,_20219,_20201,_20265),
    that(_20307,_20265,_20337),
    pushstack(free,verb_modifier1(_20019,_20021,_20023,_20025),nil,_20337,_20447),
    state(_19981,_19983,_19985,_20355,_20447,_20087).

statem(_19981,_19983,_19985,[statem,_20073],_20033,_20037) --> 
    state(_19981,_19983,_19985,_20073,_20033,_20037).

statem(_19981,_19983,_19985,[statem,{},_20147,_20235],_20087,_20091) --> 
    {user:value(textflag,true)},
    adverbial3(_20007,_20009,_20011,_20013,_20147,_20087,_20193),
    pushstack(free,adverbial3(_20007,_20009,_20011,_20013),nil,_20193,_20327),
    state(_19981,_19983,_19985,_20235,_20327,_20091).

statem(_19981,_19983,_19985,[statem,_20117,{},_20209],_20077,_20081) --> 
    adverb(_20007,_20009,pre,_20117,_20077,_20159),
    {_20009\==(mode)},
    pushstack(free,adverb(_20007,_20009,_20011),nil,_20159,_20301),
    state(_19981,_19983,_19985,_20209,_20301,_20081).

statem(_19981,_19983,_19985,[statem,_20105,_20193],_20065,_20069) --> 
    adverbial0(_20001,_20003,_20005,_20007,_20105,_20065,_20151),
    pushstack(free,adverbial1(_20001,_20003,_20005,_20007),nil,_20151,_20285),
    state(_19981,_19983,_19985,_20193,_20285,_20069).

statem(_19981,_19983,_19985,[statem,_20161,_20209,_20257,{},_20329,!,_20397,_20445],_20121,_20125) --> 
    thereit(_20161,_20121,_20191),
    be(_20209,_20191,_20239),
    negation0(_20047,_20257,_20239,_20291),
    {constrainit(_20055,thing)},
    w(adj2(_20041,_20043),_20329,_20291,_20363),
    !,
    accept(_20397,_20363,_20427),
    pushstack(first,w(adj2(_20041,_20043)),nil,_20427,_20465),
    be_complements(_20055,_19981,_19983:_19985,_20445,_20465,_20125).

descend00(_19981,_19983,event/_19981/_19983:_19987,_19987,[descend00,[]],_20049,_20049) --> 
    [].

worldcom(_19981,_19983,event/real/_19981:_19983,[worldcom,[]],_20043,_20043) --> 
    [].

state(_19981,_19983,_19985,[state,_20097,{}],_20057,_20061) --> 
    stm(_19981,_19999,_19983:_20001,_20097,_20057,_20061),
    {negate(_19999,_20001,_19985)}.

state(_19981,_19983,_19985,[state,lit(thats),!,_20155,_20203],_20083,_20087) --> 
    cc(thats,_20083,_20143),
    !,
    accept(_20155,_20143,_20185),
    pushstack(first,([that],w(verb(be,pres,fin))),nil,_20185,_20223),
    state(_19981,_19983,_19985,_20203,_20223,_20087).

state(_19981,_19983,_19985,[state,_20113,_20161,_20219,_20267,{}],_20073,_20077) --> 
    it(_20113,_20073,_20143),
    be_truefalse(_20017,_20161,_20143,_20195),
    that(_20219,_20195,_20249),
    state(_19981,_19983,_20019,_20267,_20249,_20077),
    {negate(_20017,_20019,_19985)}.

state(_19981,_19983,_19985,[state,_20107,_20155,_20233,{}],_20067,_20071) --> 
    that(_20107,_20067,_20137),
    state(_19981,_19983,_20013,_20155,_20137,_20197),
    be_truefalse(_20011,_20233,_20197,_20071),
    {negate(_20011,_20013,_19985)}.

stm(_19981,_19983,_19985,[stm,lit(what),!,_20113],_20041,_20045) --> 
    cc(what,_20041,_20101),
    !,
    reject(_20113,_20101,_20045).

stm(_19981,_19983,_19985,[stm,lit(who),!,_20113],_20041,_20045) --> 
    cc(who,_20041,_20101),
    !,
    reject(_20113,_20101,_20045).

stm(_19981,_19983,_19989:_19991,[stm,_20101,_20179],_20061,_20065) --> 
    noun_phrase(_20001,_20013,_19991,_20101,_20061,_20143),
    verb_phrase(_20001,_19981,_19983,_19989:_20013,_20179,_20143,_20065).

stm(_19981,_19983,_19989:_19991,[stm,_20119,_20167,_20225],_20079,_20083) --> 
    thereit(_20119,_20079,_20149),
    be(_19983,_20167,_20149,_20201),
    pushstack(free,w(verb(exist,_20019,fin)),nil,_20201,_20245),
    stm(_19981,id,_19989:_19991,_20225,_20245,_20083).

stm(_19981,_19983,_19989:_19991,[stm,_20123,_20171,_20259],_20083,_20087) --> 
    thereit(_20123,_20083,_20153),
    lexv(iv,_20015,_20027,fin,_20171,_20153,_20217),
    pushstack(free,lexv(iv,_20015,_20017,fin),nil,_20217,_20347),
    stm(_19981,_19983,_19989:_19991,_20259,_20347,_20087).

stn(_19981,exists(_19997:_19999)::_19989,[stn,_20129,{},{}],_20095,_20099) --> 
    stm(_19997,_20019,event/_19981/_19997:_20021,_20129,_20095,_20099),
    {type(event,_19999)},
    {negate(_20019,_20021,_19989)}.

st0(_19981,[st0,_20047],_20019,_20023) --> 
    stn(real,_19981,_20047,_20019,_20023).

question(_19981,[question,_20045],_20017,_20021) --> 
    whenq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    whichq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    whoq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    whereq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    wherefromq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    whatq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    howadjq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    howmuchq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    whyq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    howq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    ppq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    whoseq(_19981,_20045,_20017,_20021).

question(_19981,[question,_20045],_20017,_20021) --> 
    question1(_19981,_20045,_20017,_20021).

question1(test:::_19987,[question1,_20057,_20115],_20029,_20033) --> 
    question0(_19987,_20057,_20029,_20091),
    addressat0(_20115,_20091,_20033).

question0(_19981,[question0,_20045],_20017,_20021) --> 
    hasq(_19981,_20045,_20017,_20021).

question0(_19981,[question0,_20045],_20017,_20021) --> 
    isq(_19981,_20045,_20017,_20021).

question0(_19981,[question0,_20045],_20017,_20021) --> 
    ynq(_19981,_20045,_20017,_20021).

implicitq(_19981,[implicitq,_20053,!,_20111],_20025,_20029) --> 
    reject_implicitq(_20053,_20025,_20083),
    !,
    reject(_20111,_20083,_20029).

reject_implicitq([reject_implicitq,lit(bye)],_20009,_20013) --> 
    cc(bye,_20009,_20013).

reject_implicitq([reject_implicitq,lit(i)],_20009,_20013) --> 
    cc(i,_20009,_20013).

reject_implicitq([reject_implicitq,lit(if)],_20009,_20013) --> 
    cc(if,_20009,_20013).

reject_implicitq([reject_implicitq,lit(that)],_20009,_20013) --> 
    cc(that,_20009,_20013).

implicitq(_19981,[implicitq,_20053,!,_20111],_20025,_20029) --> 
    this(_20053,_20025,_20083),
    !,
    reject(_20111,_20083,_20029).

implicitq(_19981,[implicitq,_20053,!,_20111],_20025,_20029) --> 
    it(_20053,_20025,_20083),
    !,
    reject(_20111,_20083,_20029).

implicitq(_19981,[implicitq,_20063,_20121,!,_20179],_20035,_20039) --> 
    prep1(_20003,_20063,_20035,_20097),
    which2(_20121,_20097,_20151),
    !,
    reject(_20179,_20151,_20039).

implicitq(_19981,[implicitq,lit(where),!,_20089],_20029,_20033) --> 
    cc(where,_20029,_20077),
    !,
    reject(_20089,_20077,_20033).

implicitq(modifier(_19997):::_19991 and _19993,[implicitq,lit(now),{},{},{},_20335,_20393,{},_20465,_20543,{},!,_20683],_20237,_20241) --> 
    cc(now,_20237,_20285),
    {\+user:value(teleflag,true)},
    {\+user:value(textflag,true)},
    {lex:no_unprotected_verb},
    not_look_ahead(w(adj2(_20129,_20131)),_20335,_20285,_20369),
    not_look_ahead(w(noun(_20143,_20145,_20147,_20149)),_20393,_20369,_20427),
    {setvartype(_20157,vehicle)},
    worldcom(_19997,_19993,_20167,_20465,_20427,_20507),
    pushstack(free,[now],nil,_20507,_20569),verb_modifiers(go,_20157,_19997,_19991:true,_20167,_20543,_20569,_20611),
    {traceprint(4,iq10)},
    !,
    accept(_20683,_20611,_20241).

implicitq(modifier(_19997):::_19991 and _19993,[implicitq,_20193,_20251,!,_20319,_20367,_20445,!,_20571],_20165,_20169) --> 
    flnp(_20043,_20193,_20165,_20227),
    w(prep(_20051),_20251,_20227,_20285),
    !,
    accept(_20319,_20285,_20349),
    worldcom(_19997,_19993,_20059,_20367,_20349,_20409),
    pushstack(first,w(prep(_20051)),nil,_20409,_20471),verb_modifiers(go,_20089:vehicle,_19997,_19991:_20089 isa vehicle and adj/nil/_20043/_20089/_19997,_20059,_20445,_20471,_20513),
    !,
    accept(_20571,_20513,_20169).

implicitq(_19981,[implicitq,_20131,{},!,_20213],_20103,_20107) --> 
    w(adj2(_20007,nil),_20131,_20103,_20165),
    {\+testmember(_20007,[direct,first,second,nearest,last,next,third,early,last,late,previous,central])},
    !,
    reject(_20213,_20165,_20107).

implicitq(modifier(_19997):::_19991 and _19993,[implicitq,_20131,{},_20223,_20301,!,_20409],_20103,_20107) --> 
    namep(_20031,_20033,_20035,_20131,_20103,_20173),
    {constrain(_20033,vehicle)},
    worldcom(_19997,_19993,_20053,_20223,_20173,_20265),
    verb_modifiers(go,_20033,_19997,_19991:_20035,_20053,_20301,_20265,_20351),
    !,
    accept(_20409,_20351,_20107).

implicitq(new:::_19987,[implicitq,{},_20289,{},_20367,{},{},_20473,_20531,_20589,!,_20657,_20705,_20811,!,_20869],_20247,_20251) --> 
    {\+user:value(dialog,1)},
    not_look_ahead(w(prep(_20103)),_20289,_20247,_20323),
    {lex:no_unprotected_verb},
    np0(_20117,_20119,_19987,_20367,_20323,_20409),
    {\+vartypeid(_20117,time)},
    {\+vartypeid(_20117,clock)},
    constrainvehdep(_20117,_20473,_20409,_20507),
    not_look_ahead([which],_20531,_20507,_20565),
    not_look_ahead([that],_20589,_20565,_20623),
    !,
    accept(_20657,_20623,_20687),
    pushstack(first,w(verb(go,pres,fin)),nil,_20687,_20731),verb_phrase1(_20117,_20193,id,event/real/_20193:_20119,_20705,_20731,_20769),
    endofline(_20811,_20769,_20841),
    !,
    accept(_20869,_20841,_20251).

implicitq(modifier(_19997):::_19991 and _19993,[implicitq,_20153,_20261,_20319,_20377,_20455,!,_20563],_20125,_20129) --> 
    np_kernel(0,_20039,_20041,_20041,true,_20047,_20153,_20125,_20207),
    constrainvehdep(_20039,_20261,_20207,_20295),
    not_look_ahead(w(verb(_20063,_20065,fin)),_20319,_20295,_20353),
    worldcom(_19997,_19993,_20075,_20377,_20353,_20419),
    verb_modifiers(go,_20039,_19997,_19991:_20047,_20075,_20455,_20419,_20505),
    !,
    accept(_20563,_20505,_20129).

implicitq(modifier(_19997):::_19991 and _19993,[implicitq,_20123,{},_20185,_20263,!,_20371],_20095,_20099) --> 
    not_look_ahead_np(_20123,_20095,_20153),
    {setvartype(_20035,vehicle)},
    worldcom(_19997,_19993,_20045,_20185,_20153,_20227),
    verb_modifiers(go,_20035,_19997,_19991:true,_20045,_20263,_20227,_20313),
    !,
    accept(_20371,_20313,_20099).

implicitq(modifier(_19997):::_19991 and _19993,[implicitq,_20123,{},_20185,_20263,!,_20371],_20095,_20099) --> 
    look_ahead_np(_20123,_20095,_20153),
    {setvartype(_20035,vehicle)},
    worldcom(_19997,_19993,_20045,_20185,_20153,_20227),
    verb_modifiers(go,_20035,_19997,_19991:true,_20045,_20263,_20227,_20313),
    !,
    accept(_20371,_20313,_20099).

constrainvehdep(_19981,[constrainvehdep,{},!,_20087],_20035,_20039) --> 
    {vartypeid(_19981,thing)},
    !,
    reject(_20087,_20035,_20039).

constrainvehdep(_19981,[constrainvehdep,{},!,_20087],_20035,_20039) --> 
    {constrain(_19981,vehicle)},
    !,
    accept(_20087,_20035,_20039).

constrainvehdep(_19981,[constrainvehdep,{},!,_20087],_20035,_20039) --> 
    {constrain(_19981,departure)},
    !,
    accept(_20087,_20035,_20039).

constrainvehdep(_19981,[constrainvehdep,{},!,_20087],_20035,_20039) --> 
    {constrain(_19981,time)},
    !,
    accept(_20087,_20035,_20039).

hasq(_19981,[hasq,_20069,_20117],_20041,_20045) --> 
    has(_20069,_20041,_20099),
    lock(last,_20099,_20151),
    pushstack(last,w(verb(have,pres,fin)),nil,_20151,_20163),
    statement(_19981,_20117,_20163,_20141),
    unlock(_20141,_20045).

isq(_19981,[isq,_20057,_20105],_20029,_20033) --> 
    be(_20057,_20029,_20087),
    lock(last,_20087,_20211),
    pushstack(last,be,nil,_20211,_20223),
    statement(_19981,_20105,_20223,_20201),
    unlock(_20201,_20033).

ynq(_19981,[ynq,_20061,_20109,_20167],_20033,_20037) --> 
    do(_20061,_20033,_20091),
    negation0(_20001,_20109,_20091,_20143),
    statement(_19981,_20167,_20143,_20037).

ynq(_19981,[ynq,_20097,{},_20199],_20069,_20073) --> 
    lexv(iv,_20005,_20007,_20009,_20097,_20069,_20143),
    {testmember(_20005,[go])},
    lock(last,_20143,_20301),
    pushstack(last,lexv(iv,_20005,_20007,_20009),nil,_20301,_20313),
    statement(_19981,_20199,_20313,_20291),
    unlock(_20291,_20073).

ppq(_19985:::_19987,[ppq,_20119,_20177,_20265,!,_20323],_20091,_20095) --> 
    prep(_20041,_20119,_20091,_20153),
    whx_phrase(_20033,_19985,_20035,_20037,_20177,_20153,_20223),
    be(_20265,_20223,_20295),
    !,
    lock(last,_20295,_20575),
    pushstack(last,(be,prep(_20041),np1_accept(_20033,_20035,_20037)),nil,_20575,_20587),
    st0(_19987,_20323,_20587,_20565),
    unlock(_20565,_20095).

ppq(_19985:::_19987,[ppq,_20183,_20241,_20329,!,_20427,_20709,!,_20989],_20155,_20159) --> 
    prep(_20033,_20183,_20155,_20217),
    whx_phrase(_20037,_19985,_20041,_20043,_20241,_20217,_20287),
    lexv(iv,_20049,_20051,_20053,_20329,_20287,_20375),
    !,
    lock(exact,_20375,_20617),pushstack(exact,(prep(_20033),noun_phrase1(_20037,_20041,_20043)),nil,_20617,_20629),adverbial1(_20033,_20037,_20081,_20083,_20427,_20629,_20607),unlock(_20607,_20609),
    lock(last,_20609,_20917),pushstack(last,(lexv(iv,_20049,_20051,_20053),adverbial1(_20033,_20037,_20081,_20083)),nil,_20917,_20929),st0(_19987,_20709,_20929,_20907),unlock(_20907,_20909),
    !,
    accept(_20989,_20909,_20159).

ppq(_19985:::_19987,[ppq,_20161,_20219,_20307,!,_20375,_20423,!,_20725],_20133,_20137) --> 
    prep(_20039,_20161,_20133,_20195),
    whx_phrase(_20041,_19985,_20057,_20059,_20219,_20195,_20265),
    do(id,_20307,_20265,_20341),
    !,
    accept(_20375,_20341,_20405),
    lock(exact,_20405,_20623),pushstack(exact,(prep(_20039),noun_phrase1(_20041,_20057,_20059)),nil,_20623,_20635),adverbial1(_20039,_20041,_20043,_20045,_20423,_20635,_20613),unlock(_20613,_20615),
    !,
    lock(last,_20615,_20843),
    pushstack(last,adverbial1(_20039,_20041,_20043,_20045),nil,_20843,_20855),
    st0(_19987,_20725,_20855,_20833),
    unlock(_20833,_20137).

whichq(_19985:::_19987,[whichq,_20111,!,_20209,_20287,{}],_20083,_20087) --> 
    whx_phrase(_20027,_19985,_20023,_19987,_20111,_20083,_20157),
    !,
    worldcom(_20037,_20021,_20041,_20209,_20157,_20251),
    qverb_phrase(_20027,_20037,_20019,_20041,_20287,_20251,_20087),
    {negate(_20019,_20021,_20023)}.

whx_phrase(_19981,_19983,_19985,_19987,[whx_phrase,_20103,_20171,_20219],_20057,_20061) --> 
    whichf(_19981,_19983,_20103,_20057,_20141),
    of(_20171,_20141,_20201),
    npa(_19981,_19985,_19987,_20219,_20201,_20061).

whx_phrase(_19981,_19983,_19985,_19987,[whx_phrase,_20107,_20175],_20061,_20065) --> 
    whichf(_19981,_19983,_20107,_20061,_20145),
    pushstack(first,the(_19981),nil,_20145,_20267),
    np1(_19981,_19985,_19987,_20175,_20267,_20065).

whichf(_19981,which(_19981),[whichf,_20057],_20023,_20027) --> 
    which2(_20057,_20023,_20027).

whatq(_19985:::_19987,[whatq,lit(what),_20173,!,_20315,_20393,{}],_20123,_20127) --> 
    cc(what,_20123,_20171),
    lock(exact,_20171,_20213),pushstack(exact,([which],w(noun(thing,sin,u,n))),nil,_20213,_20225),whx_phrase(_20063,_19985,_20029,_19987,_20173,_20225,_20203),unlock(_20203,_20205),
    !,
    worldcom(_20077,_20027,_20081,_20315,_20205,_20357),
    qverb_phrase(_20063,_20077,_20025,_20081,_20393,_20357,_20127),
    {negate(_20025,_20027,_20029)}.

whatq(which(_19993):::_19991 ako _19993,[whatq,{},_20139,_20197,_20245,_20303,!],_20097,_20101) --> 
    {\+user:value(dialog,1)},
    whatbe(1,_20139,_20097,_20173),
    a0(_20197,_20173,_20227),
    w(noun(_19991,sin,u,n),_20245,_20227,_20279),
    endofline(_20303,_20279,_20101),
    !.

whatq(which(_20001:thing):::_20001 isa thing and _19993,[whatq,_20179,_20237,_20315,!,_20373],_20151,_20155) --> 
    whatbe(1,_20179,_20151,_20213),
    noun_phrase(_20069,_20071,_19993,_20237,_20213,_20279),
    endofline(_20315,_20279,_20345),
    !,
    lock(exact,_20345,_20561),
    pushstack(exact,(noun_phrase(_20069,_20071,_19993),w(verb(be,pres,fin)),npgap(_20001:thing)),nil,_20561,_20573),
    stm(_20077,id,event/real/_20077:_19993,_20373,_20573,_20551),
    unlock(_20551,_20155).

whatq(_19985:::_19987,[whatq,_20147,_20205,_20383,_20461,{}],_20119,_20123) --> 
    whatbe(1,_20147,_20119,_20181),
    pushstack(first,(which2,w(noun(thing,sin,u,n))),nil,_20181,_20303),whx_phrase(_20057,_19985,_20023,_19987,_20205,_20303,_20341),
    worldcom(_20067,_20021,_20071,_20383,_20341,_20425),
    pushstack(free,be,nil,_20425,_20561),qverb_phrase(_20057,_20067,_20019,_20071,_20461,_20561,_20123),
    {negate(_20019,_20021,_20023)}.

whatq(_19981,[whatq,_20129,_20187,_20235,!,_20303],_20101,_20105) --> 
    whatbe(1,_20129,_20101,_20163),
    the(_20187,_20163,_20217),
    w(noun(_20045,_20047,_20049,n),_20235,_20217,_20269),
    !,
    pushstack(first,(which2,w(noun(_20045,sin,u,n)),lexv(iv,be1,pres,fin)),nil,_20269,_20465),
    whichq(_19981,_20303,_20465,_20105).

whatq(_19981,[whatq,_20087,_20135,!,_20203],_20059,_20063) --> 
    what(_20087,_20059,_20117),
    w(noun(time,_20019,_20021,n),_20135,_20117,_20169),
    !,
    pushstack(first,[when],nil,_20169,_20223),
    whenq(_19981,_20203,_20223,_20063).

whatq(_19981,[whatq,_20093,_20141,_20199],_20065,_20069) --> 
    what(_20093,_20065,_20123),
    do(id,_20141,_20123,_20175),
    pushstack(first,(which2,w(noun(thing,sin,u,n)),do),nil,_20175,_20365),
    whichq(_19981,_20199,_20365,_20069).

whatq(which(_19991):::_19987,[whatq,_20075,_20133,_20211],_20047,_20051) --> 
    whatbe(1,_20075,_20047,_20109),
    noun_phrase1(_19991,true,_19987,_20133,_20109,_20175),
    now0(_20211,_20175,_20051).

whenq(_19981,[whenq,_20125,_20173,_20221,_20279],_20097,_20101) --> 
    when(_20125,_20097,_20155),
    becomesarrives(_20173,_20155,_20203),
    not_look_ahead([it],_20221,_20203,_20255),
    pushstack(first,(prep(in),which2,w(noun(time,sin,u,n)),w(verb(go,pres,fin))),nil,_20255,_20441),
    ppq(_19981,_20279,_20441,_20101).

becomesarrives([becomesarrives,_20071,{}],_20049,_20053) --> 
    w(verb(_19991,_20019,fin),_20071,_20049,_20053),
    {testmember(_19991,[be,come,arrive,go])}.

whenq(_19981,[whenq,_20147,_20195,_20253,!,_20341,_20389],_20119,_20123) --> 
    when(_20147,_20119,_20177),
    w(verb(be,_20057,fin),_20195,_20177,_20229),
    noun_phrase1(_20063,true,_20067,_20253,_20229,_20295),
    !,
    accept(_20341,_20295,_20371),
    pushstack(first,([when],[do],noun_phrase1(_20063,true,_20067),w(verb(go,pres,fin))),nil,_20371,_20477),
    whenq(_19981,_20389,_20477,_20123).

whenq(which(_19991):::_19987,[whenq,_20213,_20261,_20319,!,_20407,_20695],_20185,_20189) --> 
    when(_20213,_20185,_20243),
    w(verb(go,_20065,fin),_20261,_20243,_20295),
    noun_phrase1(_20071,_20073,_20075,_20319,_20295,_20361),
    !,
    lock(exact,_20361,_20603),pushstack(exact,(prep(in),the(_19991),w(noun(time,sin,u,n))),nil,_20603,_20615),adverbial1(_20049,_19991,_20053,_20055,_20407,_20615,_20593),unlock(_20593,_20595),
    pushstack(free,([do],np1(_20071,_20073,_20075),w(verb(go,pres,fin)),adverbial1(_20049,_19991,_20053,_20055)),nil,_20595,_20871),
    question0(_19987,_20695,_20871,_20189).

whenq(which(_19991):::_19987,[whenq,_20133,_20181,_20443],_20105,_20109) --> 
    when(_20133,_20105,_20163),
    pushstack(first,(prep(in),the(_19991),w(noun(time,sin,u,n))),nil,_20163,_20363),adverbial1(_20055,_19991,_20017,_20019,_20181,_20363,_20401),
    lock(last,_20401,_20545),
    pushstack(last,adverbial1(in,_19991,_20017,_20019),nil,_20545,_20557),
    question0(_19987,_20443,_20557,_20535),
    unlock(_20535,_20109).

whenq(_19981,[whenq,_20135,_20183,_20241,_20289,!,_20347],_20107,_20111) --> 
    what(_20135,_20107,_20165),
    w(noun(time,_20059,_20061,n),_20183,_20165,_20217),
    be(_20241,_20217,_20271),
    it(_20289,_20271,_20319),
    !,
    pushstack(first,([what],be,[the],w(noun(time,sin,u,n))),nil,_20319,_20441),
    whatq(_19981,_20347,_20441,_20111).

whereq(_19985:::_19991 and _19993,[whereq,_20201,_20249,_20297,_20375,!,_20443,_20623],_20173,_20177) --> 
    where(_20201,_20173,_20231),
    behave(_20249,_20231,_20279),
    np1_accept(_20061,_20063,_20065,_20297,_20279,_20339),
    w(verb(_20073,past,part),_20375,_20339,_20409),
    !,
    pushstack(free,(which2,w(noun(place,sin,u,n))),nil,_20409,_20543),whx_phrase(_20057,_19985,true,_19991,_20443,_20543,_20581),
    pushstack(free,(np1(_20061,_20063,_20065),w(verb(_20073,pres,fin)),prep1(to),npgap(_20057)),nil,_20581,_20865),
    statement(_19993,_20623,_20865,_20177).

behave([behave,_20045,!],_20023,_20027) --> 
    w(verb(be,_19993,fin),_20045,_20023,_20027),
    !.

behave([behave,_20045,!],_20023,_20027) --> 
    w(verb(have,_19993,fin),_20045,_20023,_20027),
    !.

whereq(_19981,[whereq,_20111,_20159,_20207],_20083,_20087) --> 
    where(_20111,_20083,_20141),
    be(_20159,_20141,_20189),
    pushstack(first,(prep(in),which2,w(noun(place,_20047,u,n)),w(verb(be1,pres,fin))),nil,_20189,_20379),
    ppq(_19981,_20207,_20379,_20087).

whereq(which(_19991):::_19987,[whereq,_20163,_20211,_20259,!,_20479,_20639],_20135,_20139) --> 
    where(_20163,_20135,_20193),
    do(_20211,_20193,_20241),
    lock(exact,_20241,_20377),pushstack(exact,(the(_19991),w(noun(place,_20055,_20057,n))),nil,_20377,_20389),adverbial1(nil,_19991,_20067,_20069,_20259,_20389,_20367),unlock(_20367,_20369),
    !,
    pushstack(free,([do],adverbial1(in,_19991,_20067,_20069)),nil,_20369,_20589),question0(_19987,_20479,_20589,_20615),
    optional(w(prep(_20033)),_20639,_20615,_20139).

wherefromq(which(_19991):::_19987,[wherefromq,_20139,_20187,!,_20475],_20111,_20115) --> 
    wherefrom(_20139,_20111,_20169),
    lock(exact,_20169,_20373),pushstack(exact,(prep(from),the(_19991),w(noun(place,_20053,_20055,n))),nil,_20373,_20385),adverbial1(_20019,_19991,_20023,_20025,_20187,_20385,_20363),unlock(_20363,_20365),
    !,
    pushstack(free,adverbial1(_20019,_19991,_20023,_20025),nil,_20365,_20579),
    question0(_19987,_20475,_20579,_20115).

whoq(_19981,[whoq,_20081,_20139],_20053,_20057) --> 
    relpron(agent,_20081,_20053,_20115),
    pushstack(first,(which2,w(noun(agent,_20009,u,n))),nil,_20115,_20233),
    whichq(_19981,_20139,_20233,_20057).

whoseq(_19981,[whoseq,_20115,_20163,_20271],_20087,_20091) --> 
    whose(_20115,_20087,_20145),
    noun(_20027,_20029,u,n,_20035,_20037,_20163,_20145,_20217),
    pushstack(first,(who,has,art,noun(_20045,_20029,u,n,_20035,_20037),that),nil,_20217,_20651),
    whoq(_19981,_20271,_20651,_20091).

whyq(explain:::_19987,[whyq,lit(why),_20135,_20183,_20261],_20085,_20089) --> 
    cc(why,_20085,_20133),
    be(_20135,_20133,_20165),
    np0(_20037,_20039,_20041,_20183,_20165,_20225),
    pushstack(first,(noun_phrase(_20037,_20039,_20041),w(verb(be,pres,fin))),nil,_20225,_20363),
    statement(_19987,_20261,_20363,_20089).

howq(explain:::_19987,[howq,_20079,_20127,!,_20185],_20051,_20055) --> 
    how(_20079,_20051,_20109),
    infinitive(_20127,_20109,_20157),
    !,
    pushstack(first,[i],nil,_20157,_20205),
    statement(_19987,_20185,_20205,_20055).

howq(explain:::_19987,[howq,_20087,_20135,!,_20193],_20059,_20063) --> 
    how(_20087,_20059,_20117),
    be(_20135,_20117,_20165),
    !,
    lock(last,_20165,_20227),
    pushstack(last,w(verb(exist,pres,fin)),nil,_20227,_20239),
    statement(_19987,_20193,_20239,_20217),
    unlock(_20217,_20063).

howq(explain:::_19987,[howq,_20073,_20121,_20169,_20227],_20045,_20049) --> 
    how(_20073,_20045,_20103),
    do(_20121,_20103,_20151),
    negation0(_20013,_20169,_20151,_20203),
    statement(_19987,_20227,_20203,_20049).

howadjq(_19981,[howadjq,lit(how),_20163,_20221,_20269,!,_20327],_20113,_20117) --> 
    cc(how,_20113,_20161),
    howadj(length,_20163,_20161,_20197),
    be(_20221,_20197,_20251),
    thereit(_20269,_20251,_20299),
    !,
    pushstack(free,([what],w(verb(be,_20075,_20077)),[the],w(noun(length,sin,u,n))),nil,_20299,_20347),
    whatq(_19981,_20327,_20347,_20117).

howadjq(which(_19991):::_19987,[howadjq,_20173,_20221,{},!,_20303,_20555],_20145,_20149) --> 
    how(_20173,_20145,_20203),
    howadj(_20041,_20221,_20203,_20255),
    {testmember(_20041,[frequency,speed])},
    !,
    pushstack(free,(prep(with),the(_19991),w(noun(_20041,_20087,_20089,n))),nil,_20255,_20475),adverbial1(_20095,_19991,_20035,_20037,_20303,_20475,_20513),
    pushstack(free,adverbial1(with,_19991,_20035,_20037),nil,_20513,_20643),
    question0(_19987,_20555,_20643,_20149).

howadjq(_19981,[howadjq,_20117,_20165,_20223,!,_20281],_20089,_20093) --> 
    how(_20117,_20089,_20147),
    howadj(_20039,_20165,_20147,_20199),
    be(_20223,_20199,_20253),
    !,
    pushstack(first,(which2,w(noun(_20039,_20053,_20055,n)),w(verb(evah,pres,fin))),nil,_20253,_20375),
    whichq(_19981,_20281,_20375,_20093).

howadjq(howmany(_19991):::_19987,[howadjq,_20083,_20131,_20179],_20055,_20059) --> 
    how(_20083,_20055,_20113),
    many(_20131,_20113,_20161),
    pushstack(free,which,nil,_20161,_20271),
    whichq(which(_19991):::_19987,_20179,_20271,_20059).

howmuchq(_19981,[howmuchq,_20075,_20123,_20171,_20219],_20047,_20051) --> 
    how(_20075,_20047,_20105),
    much(_20123,_20105,_20153),
    of(_20171,_20153,_20201),
    pushstack(first,(which2,of),nil,_20201,_20385),
    whichq(_19981,_20219,_20385,_20051).

howmuchq(_19981,[howmuchq,_20087,_20135,_20193],_20059,_20063) --> 
    how(_20087,_20059,_20117),
    howmuch(_20013,_20135,_20117,_20169),
    pushstack(first,(which2,w(noun(_20013,sin,u,n))),nil,_20169,_20287),
    whichq(_19981,_20193,_20287,_20063).

howadj(age,[howadj,_20051],_20023,_20027) --> 
    wx(adj2(nil,old),_20051,_20023,_20027).

howadj(delay,[howadj,_20061,_20149],_20033,_20037) --> 
    optional(much,_20061,_20033,_20125),
    wx(adj2(nil,delayed),_20149,_20125,_20037).

howadj(distance,[howadj,lit(long)],_20017,_20021) --> 
    cc(long,_20017,_20021).

howadj(duration,[howadj,lit(many),_20087],_20037,_20041) --> 
    cc(many,_20037,_20085),
    w(noun(minute,plu,_19999,n),_20087,_20085,_20041).

howadj(duration,[howadj,lit(long)],_20017,_20021) --> 
    cc(long,_20017,_20021).

howadj(duration,[howadj,lit(long),_20099,!,_20167],_20049,_20053) --> 
    cc(long,_20049,_20097),
    w(noun(time,_20013,u,n),_20099,_20097,_20133),
    !,
    accept(_20167,_20133,_20053).

howadj(duration,[howadj,_20073,_20121,!,_20189],_20045,_20049) --> 
    much(_20073,_20045,_20103),
    w(noun(time,_20009,u,n),_20121,_20103,_20155),
    !,
    accept(_20189,_20155,_20049).

howadj(frequency,[howadj,lit(often)],_20017,_20021) --> 
    cc(often,_20017,_20021).

howadj(frequency,[howadj,lit(many),_20105,_20163,!,_20221],_20055,_20059) --> 
    cc(many,_20055,_20103),
    w(noun(time_count,_20019,_20021,n),_20105,_20103,_20139),
    inperiod0(_20163,_20139,_20193),
    !,
    accept(_20221,_20193,_20059).

howadj(intelligence,[howadj,_20051],_20023,_20027) --> 
    wx(adj2(nil,intelligent),_20051,_20023,_20027).

howadj(intelligence,[howadj,_20051],_20023,_20027) --> 
    wx(adj2(nil,stupid),_20051,_20023,_20027).

howadj(intelligence,[howadj,_20061,_20109],_20033,_20037) --> 
    great(_20061,_20033,_20091),
    w(noun(intelligence,sin,_19999,n),_20109,_20091,_20037).

howadj(length,[howadj,lit(far)],_20017,_20021) --> 
    cc(far,_20017,_20021).

howadj(length,[howadj,_20049],_20021,_20025) --> 
    w(prep(near),_20049,_20021,_20025).

howadj(length,[howadj,_20051],_20023,_20027) --> 
    wx(adj2(nil,long),_20051,_20023,_20027).

howadj(length,[howadj,_20093,_20141,{}],_20065,_20069) --> 
    many(_20093,_20065,_20123),
    w(noun(_20001,_20029,u,n),_20141,_20123,_20069),
    {member(_20001,[mil,mile,kilometer,meter])}.

howadj(price,[howadj,_20051],_20023,_20027) --> 
    wx(adj2(nil,expensive),_20051,_20023,_20027).

howadj(size,[howadj,_20041],_20013,_20017) --> 
    great(_20041,_20013,_20017).

howadj(speed,[howadj,lit(fort)],_20017,_20021) --> 
    cc(fort,_20017,_20021).

howadj(speed,[howadj,_20051],_20023,_20027) --> 
    wx(adj2(nil,fast),_20051,_20023,_20027).

howadj(weight,[howadj,_20051],_20023,_20027) --> 
    wx(adj2(nil,heavy),_20051,_20023,_20027).

howmuch(duration,[howmuch,_20073,_20121,!,_20189],_20045,_20049) --> 
    much(_20073,_20045,_20103),
    w(noun(time,sin,u,n),_20121,_20103,_20155),
    !,
    accept(_20189,_20155,_20049).

howmuch(duration,[howmuch,_20083,_20141,!,_20209],_20055,_20059) --> 
    wx(adj2(nil,long),_20083,_20055,_20117),
    w(noun(time,sin,u,n),_20141,_20117,_20175),
    !,
    accept(_20209,_20175,_20059).

howmuch(duration,[howmuch,_20051],_20023,_20027) --> 
    wx(adj2(nil,long),_20051,_20023,_20027).

howmuch(distance,[howmuch,lit(far)],_20017,_20021) --> 
    cc(far,_20017,_20021).

howmuch(thing,[howmuch,_20041],_20013,_20017) --> 
    much(_20041,_20013,_20017).

inperiod0([inperiod0,_20067,_20125,_20173,!],_20045,_20049) --> 
    w(prep(in),_20067,_20045,_20101),
    a0(_20125,_20101,_20155),
    w(noun(hour,sin,_20015,_20017),_20173,_20155,_20049),
    !.

inperiod0([inperiod0,_20067,_20125,_20173,!],_20045,_20049) --> 
    w(prep(in),_20067,_20045,_20101),
    a0(_20125,_20101,_20155),
    w(noun(day,sin,_20015,_20017),_20173,_20155,_20049),
    !.

inperiod0([inperiod0,[]],_20005,_20005) --> 
    [].

verb_phrase(_19981,_19983,_19985,_19987,[verb_phrase,_20103,_20191],_20057,_20061) --> 
    verb_phrase1(_19981,_19983,_19985,_20001,_20103,_20057,_20149),
    verb_phrases0(_19981,_19983,_20001,_19987,_20191,_20149,_20061).

verb_phrases0(_19981,_19983,_19991:_19997,_19991:_19997 and _19999,[verb_phrases0,_20137,_20195,_20283],_20091,_20095) --> 
    andor(and,_20137,_20091,_20171),
    verb_phrase1(_19981,_19983,id,_20025,_20195,_20171,_20241),
    verb_phrases0(_19981,_19983,_20025,_19991:_19999,_20283,_20241,_20095).

verb_phrases0(_19981,_19983,_19985,_19985,[verb_phrases0,[]],_20031,_20031) --> 
    [].

verb_phrase1(_19981,_19983,id,_19987,[verb_phrase1,_20095,_20153],_20049,_20053) --> 
    negation0(_20005,_20095,_20049,_20129),
    clausal_phrase(_19981,_19983,_19987,_20153,_20129,_20053).

verb_phrase1(_19981,_19983,_19985,_19987,[verb_phrase1,_20165,_20223,{},!,_20335],_20119,_20123) --> 
    be(_19985,_20165,_20119,_20199),
    lexv(_20037,_20025,pres,part,_20223,_20199,_20269),
    {_20037==iv;_20037==tv},
    !,
    pushstack(first,w(verb(_20025,pres,fin)),nil,_20269,_20355),
    do_phrase(_19981,_19983,id,_19987,_20335,_20355,_20123).

verb_phrase1(_19981,_19983,_19985,_19987,[verb_phrase1,_20111,_20179,_20237],_20065,_20069) --> 
    amble(_19981,_19985,_20111,_20065,_20149),
    not_look_ahead([it],_20179,_20149,_20213),
    be_complements(_19981,_19983,_19987,_20237,_20213,_20069).

verb_phrase1(_19981,_19983,_19985,_19987,[verb_phrase1,_20105,_20173],_20059,_20063) --> 
    amble(_19981,_19985,_20105,_20059,_20143),
    pushstack(first,be1,nil,_20143,_20265),
    do_phrase(_19981,_19983,id,_19987,_20173,_20265,_20063).

verb_phrase1(_19981,_19983,_19985,_19987,[verb_phrase1,_20113,_20191,!,_20289],_20067,_20071) --> 
    do0(_19981,_19985,_20013,_20113,_20067,_20155),
    do_phrase(_19981,_19983,_20013,_19987,_20191,_20155,_20237),
    !,
    accept(_20289,_20237,_20071).

amble(_19987:_19989,_19983,[amble,lit(m),!,{},_20141],_20061,_20065) --> 
    cc(m,_20061,_20115),
    !,
    {type(self,_19989)},
    negation0(_19983,_20141,_20115,_20065).

amble(_19987:_19989,_19983,[amble,lit(am),!,{},_20141],_20061,_20065) --> 
    cc(am,_20061,_20115),
    !,
    {type(self,_19989)},
    negation0(_19983,_20141,_20115,_20065).

amble(_19981,_19983,[amble,_20057],_20023,_20027) --> 
    be(_19983,_20057,_20023,_20027).

do_phrase(_19981,_19983,id,_19987,[do_phrase,_20183,_20231,_20309,!,_20377,_20435],_20137,_20141) --> 
    use(_20183,_20137,_20213),
    noun_phrase1(_20039,_20041,_20043,_20231,_20213,_20273),
    prep1(for,_20309,_20273,_20343),
    !,
    w(verb(_20063,pres,part),_20377,_20343,_20411),
    pushstack(free,(w(verb(_20063,pres,fin)),prep(with),noun_phrase(_20039,_20041,_20043)),nil,_20411,_20615),
    verb_phrase(_19981,_19983,id,_19987,_20435,_20615,_20141).

do_phrase(_19981,_19983,id,_19987,[do_phrase,_20137,_20185,_20263,_20311],_20091,_20095) --> 
    use(_20137,_20091,_20167),
    noun_phrase(_20021,_20023,_20025,_20185,_20167,_20227),
    in_order_to(_20263,_20227,_20293),
    pushstack(free,(prep(with),noun_phrase(_20021,_20023,_20025)),nil,_20293,_20491),
    verb_phrase(_19981,_19983,id,_19987,_20311,_20491,_20095).

do_phrase(_19981,_19983,_19985,_19987,[do_phrase,_20107,_20205],_20061,_20065) --> 
    vp_kernel(_19997,_19981,_19983,_19985,_20003,_20107,_20061,_20157),
    verb_modifiers0(_19997,_19981,_19983,_20003,_19987,_20205,_20157,_20065).

vp_kernel(_19981,_19983,_19985,id,_19993:_19999 and _20001,[vp_kernel,_20179,_20267,_20345,{},_20437],_20127,_20131) --> 
    lexv(dtv,_19981,_20043,fin,_20179,_20127,_20225),
    noun_phrase1(_20049,_20035,_19999,_20267,_20225,_20309),
    noun_phrase1(_20057,_20035,_20001,_20345,_20309,_20387),
    {dtv_template(_19981,_19983,_20049,_20057,_19985,_20031)},
    event00(_19985,_20031,_19993,_20035,_20437,_20387,_20131).

vp_kernel(have,_19983,_19985,_19987,_19993:_19995,[vp_kernel,_20159,_20247,_20305,{},!,_20407],_20107,_20111) --> 
    lexv(tv,have,_20033,fin,_20159,_20107,_20205),
    negation0(_19987,_20247,_20205,_20281),
    np1(_20043,_20045,_19995,_20305,_20281,_20347),
    {has_template(_19983,_20043,_20045)},
    !,
    accept(_20407,_20347,_20111).

vp_kernel(_19981,_19983,_19985,_19987,_19993:_19995,[vp_kernel,_20179,_20267,_20325,_20383,_20471,{}],_20127,_20131) --> 
    lexv(tv,_19981,_20049,fin,_20179,_20127,_20225),
    reflexiv0(_19981,_20267,_20225,_20301),
    negation0(_19987,_20325,_20301,_20359),
    event00(_19985,_20041,_19993,_20069,_20383,_20359,_20429),
    noun_phrase2(_19983,_20037,_20069,_19995,_20471,_20429,_20131),
    {tv_template(_19981,_19983,_20037,_19985,_20041)}.

vp_kernel(_19981,_19983,_19985,_19987,_19993:_19995,[vp_kernel,_20145,_20253,_20311,_20369],_20093,_20097) --> 
    intrans_verb(_19981,_19983,_19985,_20019,_20035,fin,_20145,_20093,_20199),
    reflexiv0(_19981,_20253,_20199,_20287),
    negation0(_19987,_20311,_20287,_20345),
    event00(_19985,_20019,_19993,_19995,_20369,_20345,_20097).

vp_kernel(have,_19983,_19985,_19987,_19993:_19995,[vp_kernel,_20155,_20203,_20261,{},_20363],_20103,_20107) --> 
    has(_20155,_20103,_20185),
    negation0(_19987,_20203,_20185,_20237),
    noun_phrase2(_19983,_20039,_20041,_20025,_20261,_20237,_20307),
    {has_template(_19983,_20039,_20041)},
    event00(_19985,_20025,_19993,_19995,_20363,_20307,_20107).

vp_kernel(evah,_19983,_19985,_19987,_19993:_19995,[vp_kernel,_20165,_20253,_20311,{},_20413],_20113,_20117) --> 
    lexv(tv,evah,_20037,fin,_20165,_20113,_20211),
    negation0(_19987,_20253,_20211,_20287),
    noun_phrase2(_19983,_20049,_20051,_20025,_20311,_20287,_20357),
    {has_template(_20049,_19983,_20051)},
    event00(_19985,_20025,_19993,_19995,_20413,_20357,_20117).

vp_kernel(_19981,_19983,_19985,_19987,_19993:_19995,[vp_kernel,_20141,_20199,_20307,_20355],_20089,_20093) --> 
    negation0(_19987,_20141,_20089,_20175),
    intrans_verb(_19981,_19983,_19985,_20019,_20039,fin,_20199,_20175,_20253),
    there0(_20307,_20253,_20337),
    event00(_19985,_20019,_19993,_19995,_20355,_20337,_20093).

event00(_19981,_19983,_19985,exists(_19981:_20009)::_19983 and _19985,[event00,{}],_20063,_20063) --> 
    {type(event,_20009)}.

clausal_phrase(_19981,_19983,_19989:_19991,[clausal_phrase,{},_20249,{},_20381,_20459,!,_20517],_20189,_20193) --> 
    {user:value(textflag,true)},
    rep_vp(_20073,_20075,_19981,_19983,_20081,_20083,_20085,_20249,_20189,_20307),
    {testmember(_20073,[tell,ask,propose])},
    noun_phrase(_20049,_20051,_20053,_20381,_20307,_20423),
    infinitive(_20459,_20423,_20489),
    !,
    pushstack(free,(rep_vp(_20073,_20075,_19981,_19983,_20081,_20083,_20085),[that],noun_phrase(_20049,_20051,_20053)),nil,_20489,_20691),
    clausal_phrase(_19981,_19983,_19989:_19991,_20517,_20691,_20193).

clausal_phrase(_19981,_19983,_19989:_19991,[clausal_phrase,_20159,_20277,_20375,_20453,_20541],_20119,_20123) --> 
    rep_vp(_20025,_20027,_19981,_19983,_20033,_20035,_20019,_20159,_20119,_20217),
    rep_complements0(_20025,_19981,_19983,_20033:_20035,_19989:_20055,_20277,_20217,_20327),
    thatto0(_20025,_20027,_19981,_20375,_20327,_20417),
    event00(_20019,_20055,_20021,_19991,_20453,_20417,_20499),
    statemen1(_20019,_20021,_20541,_20499,_20123).

thatto0(_19981,that,_19985,[thatto0,_20081,[]],_20041,_20045) --> 
    infinitive(_20081,_20041,_20111),
    pushstack(free,npgap(_19985),nil,_20111,_20045),
    [].

thatto0(_19981,_19983,_19985,[thatto0,_20085,{}],_20045,_20049) --> 
    that(_19983,_20085,_20045,_20049),
    {_19981\==start}.

thatto0(ask,that,_19985,[thatto0,[]],_20025,_20025) --> 
    [].

thatto0(believe,that,_19985,[thatto0,[]],_20025,_20025) --> 
    [].

thatto0(let,that,_19985,[thatto0,[]],_20025,_20025) --> 
    [].

thatto0(_19981,that,_19985,[thatto0,[],{}],_20053,_20053) --> 
    [],
    {\+member(_19981,[cause,make])}.

rep_vp(let,_19983,_19985,_19987,_19989,_19991,_19993,[rep_vp,_20207,!,_20275,{},_20367,[]],_20143,_20147) --> 
    w(verb(let,_20047,fin),_20207,_20143,_20241),
    !,
    noun_phrase1(_20033,_20035,_20037,_20275,_20241,_20317),
    {rv_template(id,let,_19983,_19985,_19987,_20075,_19993)},
    event00(_19987,_20075,_19989,_19991,_20367,_20317,_20413),
    pushstack(free,noun_phrase(_20033,_20035,_20037),nil,_20413,_20147),
    [].

rep_vp(_19981,_19983,_19985,_19987,_19989,_19991,_19993,[rep_vp,_20181,_20239,_20327,{},_20389],_20117,_20121) --> 
    do(_20031,_20181,_20117,_20215),
    lexv(rv,_19981,_20039,_20041,_20239,_20215,_20285),
    ittobetrue0(_20327,_20285,_20357),
    {rv_template(_20031,_19981,_19983,_19985,_19987,_20023,_19993)},
    event00(_19987,_20023,_19989,_19991,_20389,_20357,_20121).

rep_complements0(_19981,_19983,_19985,_19987,_19989,[rep_complements0,_20109,!,_20177],_20057,_20061) --> 
    w(prep(about),_20109,_20057,_20143),
    !,
    reject(_20177,_20143,_20061).

rep_complements0(_19981,_19983,_19985,_19987,_19989,[rep_complements0,{},_20159,_20217],_20093,_20097) --> 
    {testmember(_19981,[say,tell])},
    prep1(to,_20159,_20093,_20193),
    pushstack(first,prep(to),nil,_20193,_20305),
    verb_modifiers(_19981,_19983,_19985,_19987,_19989,_20217,_20305,_20097).

rep_complements0(_19981,_19983,_19985,_19987,_19989,[rep_complements0,{},_20149],_20083,_20087) --> 
    {testmember(_19981,[tell,convince])},
    pushstack(first,prep(to),nil,_20083,_20247),
    verb_modifiers(_19981,_19983,_19985,_19987,_19989,_20149,_20247,_20087).

rep_complements0(_19981,_19983,_19985,_19987,_19989,[rep_complements0,_20101],_20049,_20053) --> 
    verb_modifiers0(_19981,_19983,_19985,_19987,_19989,_20101,_20049,_20053).

be_complements(_19981,_19983,_19989:_19991,[be_complements,_20103,_20161],_20063,_20067) --> 
    w(verb(be,pres,part),_20103,_20063,_20137),
    be_complements(_19981,_19983,_19989:_19991,_20161,_20137,_20067).

be_complements(_19981,_19983,_19989:_19991,[be_complements,_20103,_20181],_20063,_20067) --> 
    be_complement(_19981,_19983,_19989:_20007,_20103,_20063,_20145),
    be_complements2(_19981,_19983,_19989,_20007,_19991,_20181,_20145,_20067).

be_complements2(_19981,_19983,_19985,_19987,_19987 and _19995,[be_complements2,_20129,_20177,_20265],_20077,_20081) --> 
    and0(_20129,_20077,_20159),
    be_compl(_19981,_19983,_19985,_20017,_20177,_20159,_20223),
    be_complements2(_19981,_19983,_19985,_20017,_19995,_20265,_20223,_20081).

be_complements2(_19981,_19983,_19985,_19987,_19987,[be_complements2,_20089],_20037,_20041) --> 
    reductant0(_20089,_20037,_20041).

be_compl(_19981,_19983,_19985,_19987,[be_compl,_20087],_20041,_20045) --> 
    passive(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

be_compl(_19981,_19983,_19985,_19987,[be_compl,_20137,_20185,_20283],_20091,_20095) --> 
    the0(_20137,_20091,_20167),
    ap(_20021,_19981,_19983,_20027,_20029,_20185,_20167,_20235),
    verb_modifiers0(adj/nil/_20021,_19981,_19983,_20027:_20029,_19985:_19987,_20283,_20235,_20095).

be_complement(_19981,_19983,_19989:_19991,[be_complement,_20081],_20041,_20045) --> 
    be_compl(_19981,_19983,_19989,_19991,_20081,_20041,_20045).

be_complement(_19981,_19983,_19989:_19991,[be_complement,_20081],_20041,_20045) --> 
    be_noun(_19981,_19983,_19989,_19991,_20081,_20041,_20045).

be_compl(_19981,_19983,_19985,_19987,[be_compl,_20101,_20179],_20055,_20059) --> 
    comparisons(_19981,_19983,_19999,_20101,_20055,_20143),
    event00(_19983,_19999,_19985,_19987,_20179,_20143,_20059).

be_compl(_19981,_19983,_19985,_19987,[be_compl,_20117,_20165],_20071,_20075) --> 
    sure(_20117,_20071,_20147),
    pushstack(first,w(verb(know,_20009,fin)),nil,_20147,_20185),
    do_phrase(_19981,_19983,id,_19985:_19987,_20165,_20185,_20075).

be_noun(_19981,_19983,_19985,exists(_19983:event)::_19993,[be_noun,_20159,{},!,_20261],_20113,_20117) --> 
    noun_phrase(_20043,_20045,_20047,_20159,_20113,_20201),
    {bealign(_19981,_20043,_19983,_20047,_20063)},
    !,
    verb_modifiers0(exist,_19981,_19983,_20045:_20063,_19985:_19993,_20261,_20201,_20117).

ap(_19981,_19983,_19985,_19987,exists(_19985:event)::_19999 and _19987,[ap,_20137,_20185,_20243],_20085,_20089) --> 
    the0(_20137,_20085,_20167),
    adverb0(_20037,_20185,_20167,_20219),
    postadj1(_19981,_19983,_19985,_19999,_20243,_20219,_20089).

passive(_19981,_19983,_19985,_19987,[passive,{},_20225,_20313,_20411,!,_20469],_20159,_20163) --> 
    {user:value(textflag,true)},
    lexv(rv,_20063,past,part,_20225,_20159,_20271),
    whodidit(_20071,_20073,_20075,_20077,_20079,_20313,_20271,_20363),
    infinitive(_20411,_20363,_20441),
    !,
    pushstack(first,(noun_phrase(_20075,_20077,_20079),lexv(rv,_20063,past,fin),npgap(_19981),infinitive),nil,_20441,_20791),
    stm(_19983,id,_19985:_19987,_20469,_20791,_20163).

passive(_19981,_19983,_19985,_19991 and _19993,[passive,{},_20243,_20331,_20409,!,_20517],_20177,_20181) --> 
    {user:value(textflag,true)},
    lexv(dtv,_20073,past,part,_20243,_20177,_20289),
    np1(_20051,true,_19993,_20331,_20289,_20373),
    whodidit(_20089,_20091,_20093,_20095,_20097,_20409,_20373,_20459),
    !,
    pushstack(first,(noun_phrase(_20093,_20095,_20097),lexv(dtv,_20073,past,fin),npgap(_19981),npgap(_20051)),nil,_20459,_20843),
    stm(_19983,id,_19985:_19991,_20517,_20843,_20181).

passive(_19981,_19983,_19985,_19987,[passive,_20185,_20233,_20321,_20369,!,_20477],_20139,_20143) --> 
    adverbx0(_20185,_20139,_20215),
    lexv(tv,_20045,past,part,_20233,_20215,_20279),
    adverbx0(_20321,_20279,_20351),
    whodidit(_20053,_20055,_20057,_20059,_20061,_20369,_20351,_20419),
    !,
    pushstack(free,(noun_phrase(_20057,_20059,_20061),w(verb(_20045,pres,fin)),npgap(_19981)),nil,_20419,_20657),
    stm(_19983,id,_19985:_19987,_20477,_20657,_20143).

whodidit(_19981,_19983,_19985,_19987,_19989,[whodidit,_20115,!,_20173,_20221],_20063,_20067) --> 
    by(_20115,_20063,_20145),
    !,
    accept(_20173,_20145,_20203),
    noun_phrase(_19985,_19987,_19989,_20221,_20203,_20067).

whodidit(_19981,_19983,_19985,_19987,_19989,[whodidit,_20129,!,_20261],_20077,_20081) --> 
    lock(exact,_20077,_20169),pushstack(exact,w(noun(agent,sin,u,n)),nil,_20169,_20181),np1(_19985,_19987,_19989,_20129,_20181,_20159),unlock(_20159,_20161),
    !,
    accept(_20261,_20161,_20081).

xverb_phrase(_19981,_19983,_19985,_19987,_19989,[xverb_phrase,_20105],_20053,_20057) --> 
    verb_phrase(_19981,_19983,_19985,_19987:_19989,_20105,_20053,_20057).

xverb_phrase(_19981,_19983,_19985,_19987,_19989,[xverb_phrase,_20133,_20211],_20081,_20085) --> 
    noun_phrase(_20013,_20007,_20009,_20133,_20081,_20175),
    pushstack(free,noun_phrase(_19981,_20007,_20009),nil,_20175,_20313),
    verb_phrase(_20013,_19983,_19985,_19987:_19989,_20211,_20313,_20085).

xverb_phrase(_19981,_19983,_19985,_19987,_19989,[xverb_phrase,_20145,_20223,_20271],_20093,_20097) --> 
    noun_phrase(_20025,_20019,_20021,_20145,_20093,_20187),
    be(_20223,_20187,_20253),
    pushstack(free,(be,noun_phrase(_19981,_20019,_20021)),nil,_20253,_20447),
    verb_phrase(_20025,_19983,_19985,_19987:_19989,_20271,_20447,_20097).

qverb_phrase(_19981,_19983,id,_19991:_19993,[qverb_phrase,_20197,_20245,_20293,{},_20375,_20423],_20151,_20155) --> 
    do(_20197,_20151,_20227),
    it(_20245,_20227,_20275),
    pvimodal(_20055,_20057,_20293,_20275,_20331),
    {vartypeid(_19981,thing);constrain(_19981,_20057)},
    to(_20375,_20331,_20405),
    pushstack(first,([it],w(verb(_20055,pres,fin)),npgap(_19981),[to]),nil,_20405,_20521),
    statem(_19983,_19991,_19993,_20423,_20521,_20155).

qverb_phrase(_19981,_19983,_19985,_19991:_19993,[qverb_phrase,_20187,_20235,_20313,_20371,!,_20439],_20141,_20145) --> 
    has(_20187,_20141,_20217),
    noun_phrase1(_20049,_20051,_20053,_20235,_20217,_20277),
    negation0(_19985,_20313,_20277,_20347),
    w(verb(_20065,past,part),_20371,_20347,_20405),
    !,
    pushstack(first,(noun_phrase1(_20049,_20051,_20053),w(verb(_20065,past,fin)),npgap(_19981)),nil,_20405,_20619),
    statem(_19983,_19991,_19993,_20439,_20619,_20145).

qverb_phrase(_19981,_19983,id,_19991:_19993,[qverb_phrase,_20171,_20219,lit(able),lit(to),!,_20351],_20125,_20129) --> 
    be(_20171,_20125,_20201),
    noun_phrase1(_20049,_20051,_19993,_20219,_20201,_20261),
    cc(able,_20261,_20317),
    cc(to,_20317,_20339),
    !,
    pushstack(free,(noun_phrase(_20049,_20051,_19993),[can],npgap(_19981)),nil,_20339,_20531),
    statem(_19983,_19991,_19993,_20351,_20531,_20129).

qverb_phrase(_19981,_19983,id,_19991:_19993,[qverb_phrase,_20177,_20225,_20303,!,_20371],_20131,_20135) --> 
    be(_20177,_20131,_20207),
    np1(_20043,_20045,_19993,_20225,_20207,_20267),
    w(verb(_20055,pres,part),_20303,_20267,_20337),
    !,
    pushstack(first,(np1(_20043,_20045,_19993),w(verb(_20055,pres,fin)),npgap(_19981)),nil,_20337,_20551),
    statem(_19983,_19991,_19993,_20371,_20551,_20135).

qverb_phrase(_19981,_19983,_19985,_19987,[qverb_phrase,_20157,_20205,_20283,_20341],_20111,_20115) --> 
    do(_20157,_20111,_20187),
    noun_phrase(_20029,_20023,_20025,_20205,_20187,_20247),
    w(verb(_20041,inf,fin),_20283,_20247,_20317),
    pushstack(first,(w(verb(_20041,inf,fin)),noun_phrase1(_19981,_20023,_20025)),nil,_20317,_20443),
    verb_phrase(_20029,_19983,_19985,_19987,_20341,_20443,_20115).

qverb_phrase(_19981,_19983,_19985,_19991:_19993,[qverb_phrase,_20141,_20189,!,_20247,_20295],_20095,_20099) --> 
    be(_20141,_20095,_20171),
    thereit(_20189,_20171,_20219),
    !,
    accept(_20247,_20219,_20277),
    pushstack(first,w(verb(exist,pres,fin)),nil,_20277,_20315),
    verb_phrase1(_19981,_19983,_19985,_19991:_19993,_20295,_20315,_20099).

qverb_phrase(_19981,_19983,_19985,_19987,[qverb_phrase,_20087],_20041,_20045) --> 
    verb_phrase(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

qverb_phrase(_19981,_19983,_19985,_19987,[qverb_phrase,_20137,_20185,_20263,_20311],_20091,_20095) --> 
    do(_20137,_20091,_20167),
    noun_phrase(_20029,_20023,_20025,_20185,_20167,_20227),
    hasto0(_20263,_20227,_20293),
    pushstack(free,([do],noun_phrase1(_19981,_20023,_20025)),nil,_20293,_20413),
    verb_phrase(_20029,_19983,_19985,_19987,_20311,_20413,_20095).

qverb_phrase(_19981,_19983,_19985,_19987,[qverb_phrase,_20127,_20175,_20253],_20081,_20085) --> 
    be(_20127,_20081,_20157),
    noun_phrase1(_20023,_20017,_20019,_20175,_20157,_20217),
    pushstack(free,(be,noun_phrase(_19981,_20017,_20019)),nil,_20217,_20429),
    verb_phrase(_20023,_19983,_19985,_19987,_20253,_20429,_20085).

qverb_phrase(_19981,_19983,_19985,_19987,[qverb_phrase,_20127,_20175,_20253],_20081,_20085) --> 
    has(_20127,_20081,_20157),
    noun_phrase1(_20023,_20017,_20019,_20175,_20157,_20217),
    pushstack(first,(has,noun_phrase(_19981,_20017,_20019)),nil,_20217,_20429),
    verb_phrase(_20023,_19983,_19985,_19987,_20253,_20429,_20085).

verb_modifiers0(_19981,_19983,_19985,_19987,_19989,[verb_modifiers0,_20101],_20049,_20053) --> 
    verb_modifiers(_19981,_19983,_19985,_19987,_19989,_20101,_20049,_20053).

verb_modifiers0(_19981,_19983,_19985,_19987,_19987,[verb_modifiers0,{}],_20051,_20051) --> 
    {\+_19981=be1}.

verb_modifiers(_19981,_19983,_19985,_19987,_19989,[verb_modifiers,_20119,_20217],_20067,_20071) --> 
    verb_modifier(_19981,_19983,_19985,_19987,_20005,_20119,_20067,_20169),
    verb_modifiers10(_19981,_19983,_19985,_20005,_19989,_20217,_20169,_20071).

verb_modifiers10(_19981,_19983,_19985,_19987,_19989,[verb_modifiers10,_20107,_20155],_20055,_20059) --> 
    and2(_20107,_20055,_20137),
    verb_modifiers(_19981,_19983,_19985,_19987,_19989,_20155,_20137,_20059).

verb_modifiers10(_19981,_19983,_19985,_19987,_19989,[verb_modifiers10,_20101],_20049,_20053) --> 
    verb_modifiers(_19981,_19983,_19985,_19987,_19989,_20101,_20049,_20053).

verb_modifiers10(_19981,_19983,_19985,_19987,_19987,[verb_modifiers10,[]],_20037,_20037) --> 
    [].

verb_modifiers10(_19981,_19983,_19985,_19987,_19989,[verb_modifiers10,_20107,_20155],_20055,_20059) --> 
    and2(_20107,_20055,_20137),
    verb_modifiers(_19981,_19983,_19985,_19987,_19989,_20155,_20137,_20059).

verb_modifier3(_19981,_19983,_19985,_19987,exists(_19985)::_19987 and _20001,[verb_modifier3,_20175],_20123,_20127) --> 
    pushstack(free,(npgap(_19983),lexv(iv,_19981,pres,fin),prep(in),the(_19985),w(noun(time,sin,u,n))),nil,_20123,_20513),
    st0(_20001,_20175,_20513,_20127).

verb_modifier4(_19981,_19983,_19985,_19987,exists(_19985)::_19987 and _20001,[verb_modifier4,_20213,!,_20511],_20161,_20165) --> 
    lock(exact,_20161,_20409),pushstack(exact,(prep(in),the(_19985),w(noun(time,sin,u,n))),nil,_20409,_20421),adverbial1(_20039,_19985,_20043,_20045,_20213,_20421,_20399),unlock(_20399,_20401),
    !,
    pushstack(free,(npgap(_19983),lexv(tv,_19981,pres,fin),adverbial1(_20039,_19985,_20043,_20045)),nil,_20401,_20761),
    st0(_20001,_20511,_20761,_20165).

verb_modifier(_19981,_19983,_19985,_19993 and(findexternal(_20027:place)::_20027 isa place and _20019):_19995,_19993:_19995,[verb_modifier,{},_20211,{}],_20139,_20143) --> 
    {user:value(dialog,1)},
    thisplace(_20057,_20211,_20139,_20143),
    {verb_compl(_19981,_20057,_19983,_20027:place,_19985,_20019)}.

verb_modifier(_19981,_19983,_19985,_19993 and _20007:_20001,_19993:_19995,[verb_modifier,{},_20227,_20295,{},_20407,{}],_20161,_20165) --> 
    {\+member(_19981,[want])},
    in_order_to(_19981,_20079,_20227,_20161,_20265),
    subordinatex(nil,coevent,_19983,_20051,_20091,_20295,_20265,_20345),
    {negate(_20079,_20091,_20103)},
    determiner00(_20051,_20001,_20103,_19995,_20407,_20345,_20165),
    {verb_compl(_19981,in_order_to,_19983,_20051,_19985,_20007)}.

verb_modifier(_19981,_19983,_19985,_19993 and _20007:_20001,_19993:_19995,[verb_modifier,_20187,_20245,_20333,{},{}],_20135,_20139) --> 
    while(_20053,_20187,_20135,_20221),
    lexv(tv,_20059,pres,part,_20245,_20221,_20291),
    verb_modifier4(_20059,_19983,_20045,_20001,_20075,_20333,_20291,_20139),
    {negate(_20053,_20075,_19995)},
    {verb_compl(_19981,during,_19983,_20045,_19985,_20007)}.

verb_modifier(_19981,_19983,_19985,_19993 and _20007:_20001,_19993:_19995,[verb_modifier,_20187,_20245,_20333,{},{}],_20135,_20139) --> 
    while(_20053,_20187,_20135,_20221),
    lexv(iv,_20059,pres,part,_20245,_20221,_20291),
    verb_modifier3(_20059,_19983,_20045,_20001,_20075,_20333,_20291,_20139),
    {negate(_20053,_20075,_19995)},
    {verb_compl(_19981,during,_19983,_20045,_19985,_20007)}.

verb_modifier(_19981,_19983,_19985,_19993 and _20007:_20001,_19993:_19995,[verb_modifier,_20163,_20211,{}],_20111,_20115) --> 
    this(_20163,_20111,_20193),
    pushstack(free,(prep(in),this),nil,_20193,_20387),adverbial(_20029,_20033,_20001,_19995,_20211,_20387,_20115),
    {verb_compl(_19981,_20029,_19983,_20033,_19985,_20007)}.

verb_modifier(_19981,_19983,_19985,_19993 and _20007:_20001,_19993:_19995,[verb_modifier,{},_20195,{}],_20129,_20133) --> 
    {\+member(_19981,[ask,tell,propose,know,know1])},
    adverbial3(_20029,_20033,_20001,_19995,_20195,_20129,_20133),
    {verb_compl(_19981,_20029,_19983,_20033,_19985,_20007)}.

verb_modifier(_19981,_19983,_19985,_20005 and _19993:_20001,_19993:_19995,[verb_modifier,_20141,{}],_20089,_20093) --> 
    adverbial1(_20023,_20027,_20001,_19995,_20141,_20089,_20093),
    {verb_compl(_19981,_20023,_19983,_20027,_19985,_20005)}.

verb_modifier(_19981,_19983,_19985,_19993 and _20007:_19995,_19993:_19995,[verb_modifier,_20139,{}],_20087,_20091) --> 
    adverb(_20023,_20027,_20039,_20139,_20087,_20091),
    {adv_compl(_19981,_20023,_19983,_20027,_19985,_20007)}.

verb_modifier(_19981,_19983,_19985,_20005 and _19993:_20001,_19993:_19995,[verb_modifier,_20157,_20215,{},!],_20105,_20109) --> 
    nil_compl(_19981,_20157,_20105,_20191),
    adjunct1(nil,_20035,_20001,_19995,_20215,_20191,_20109),
    {verb_compl(_19981,nil,_19983,_20035,_19985,_20005)},
    !.

verb_modifier(_19981,_19983,_19985,_20005 and _19993:_20001,_19993:_19995,[verb_modifier,_20163,_20221,{},!,_20333],_20111,_20115) --> 
    dir_compl(_19981,_20163,_20111,_20197),
    adjunct1(dir,_20041,_20001,_19995,_20221,_20197,_20267),
    {verb_compl(_19981,dir,_19983,_20041,_19985,_20005)},
    !,
    accept(_20333,_20267,_20115).

verb_modifier1(_19981,_19983,_19985,_19987,[verb_modifier1,_20087],_20041,_20045) --> 
    adjunct1(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

verb_modifier1(_19981,_19983,_19985,_19987,[verb_modifier1,_20087],_20041,_20045) --> 
    verb_modifier2(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

dir_compl(_19981,[dir_compl,{},!,_20091],_20039,_20043) --> 
    {v_compl(_19981,_20003,dir,_20007)},
    !,
    accept(_20091,_20039,_20043).

nil_compl(_19981,[nil_compl,_20057,!,_20125],_20029,_20033) --> 
    prep1(_19997,_20057,_20029,_20091),
    !,
    reject(_20125,_20091,_20033).

nil_compl(_19981,[nil_compl,_20071,!,_20139],_20043,_20047) --> 
    look_ahead(w(noun(hour,_20007,_20009,_20011)),_20071,_20043,_20105),
    !,
    reject(_20139,_20105,_20047).

nil_compl(be/_19987,[nil_compl,{},!,_20097],_20045,_20049) --> 
    {a_compl(_19987,_20009,nil,_20013)},
    !,
    accept(_20097,_20045,_20049).

nil_compl(_19981,[nil_compl,{},!,_20091],_20039,_20043) --> 
    {v_compl(_19981,_20003,nil,_20007)},
    !,
    accept(_20091,_20039,_20043).

verb_modifier2(_19981,_19983,_19985,exists(_19983)::_19985 and _19999,[verb_modifier2,_20101],_20055,_20059) --> 
    subordinate(_19981,_19983,_19999,_20101,_20055,_20059).

adverbial(_19981,_19983,_19985,_19987,[adverbial,_20087],_20041,_20045) --> 
    adverbial3(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

adverbial(_19981,_19983,_19985,_19987,[adverbial,_20087],_20041,_20045) --> 
    adverbial1(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

adverbial0(_19981,_19983,_19985,_19987,[adverbial0,_20087],_20041,_20045) --> 
    adverbial1(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

adverbial0(nil,_19983,_19985,_19987,[adverbial0,_20087],_20041,_20045) --> 
    adjunct1(nil,_19983,_19985,_19987,_20087,_20041,_20045).

adverbial1(_19981,_19983,_19985,_19987,[adverbial1,_20087],_20041,_20045) --> 
    adjunct1(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

adverbial3(_19981,_19983,_19985,_19987,[adverbial3,_20101,_20179],_20055,_20059) --> 
    subordinate(_19981,_19983,_20001,_20101,_20055,_20143),
    determiner00(_19983,_19985,_20001,_19987,_20179,_20143,_20059).

subordinate(_19981,_19983,_19985,[subordinate,_20099,_20177,_20235],_20059,_20063) --> 
    subjunction(_19981,_20003,_20001,_20099,_20059,_20141),
    not_look_ahead_date(_19981,_20177,_20141,_20211),
    subord_clause(_20001,_20003,_19983,_19985,_20235,_20211,_20063).

not_look_ahead_date(until,[not_look_ahead_date,_20059,!,_20137],_20031,_20035) --> 
    date(_19997,_19999,_20059,_20031,_20097),
    !,
    reject(_20137,_20097,_20035).

not_look_ahead_date(_19981,[not_look_ahead_date,[]],_20013,_20013) --> 
    [].

not_look_ahead_np([not_look_ahead_np,lit(bye)],_20009,_20013) --> 
    cc(bye,_20009,_20013).

not_look_ahead_np([not_look_ahead_np,_20039,!,_20097],_20017,_20021) --> 
    look_ahead_np(_20039,_20017,_20069),
    !,
    reject(_20097,_20069,_20021).

not_look_ahead_np([not_look_ahead_np,[]],_20005,_20005) --> 
    [].

look_ahead_np([look_ahead_np,lit(bye),!,_20075],_20021,_20025) --> 
    cc(bye,_20021,_20063),
    !,
    reject(_20075,_20063,_20025).

look_ahead_np([look_ahead_np,_20045],_20023,_20027) --> 
    look_ahead(w(noun(_19989,_19991,_19993,_19995)),_20045,_20023,_20027).

look_ahead_np([look_ahead_np,_20043],_20021,_20025) --> 
    look_ahead(w(name(_19989,_19991,_19993)),_20043,_20021,_20025).

look_ahead_np([look_ahead_np,_20041],_20019,_20023) --> 
    look_ahead(w(nb(_19989,_19991)),_20041,_20019,_20023).

look_ahead_np([look_ahead_np,_20055],_20033,_20037) --> 
    look_ahead_lit([a,an,the,that,this,they],_20055,_20033,_20037).

look_ahead_lit(_19981,[look_ahead_lit,lit(_19995),{}],_20033,_20037) --> 
    cc(_19995,_20033,_20037),
    {testmember(_19995,_19981)}.

subordinatex(_19981,_19983,_19985,_20005:_20007,_19993 and srel/_19981/_19983/_20005/_20001,[subordinatex,{},_20219,!,_20317],_20147,_20151) --> 
    {user:value(textflag,true)},
    verb_phrase(_19985,_20001,_20063,_20065,_20219,_20147,_20265),
    !,
    pushstack(free,(npgap(_19985),verb_phrase(_19985,_20001,_20063,_20065)),nil,_20265,_20487),
    st0(_19993,_20317,_20487,_20151).

subordinatex(_19981,_19983,_19985,_19987,_19989,[subordinatex,_20197,!,_20417,!,_20665],_20145,_20149) --> 
    lock(exact,_20145,_20315),pushstack(exact,(w(prep(_19981)),the(_19987),w(noun(_19983,_20041,_20043,n))),nil,_20315,_20327),adverbial1(_19981,_20051,_20053,_20055,_20197,_20327,_20305),unlock(_20305,_20307),
    !,
    pushstack(free,(npgap(_19985),adverbial1(_19981,_20051,_20053,_20055)),nil,_20307,_20605),st0(_19989,_20417,_20605,_20631),
    !,
    accept(_20665,_20631,_20149).

subord_clause(_19981,_19983,_19985,_19987,[subord_clause,_20159,!,_20457],_20113,_20117) --> 
    lock(exact,_20113,_20355),pushstack(exact,(prep(_19981),the(_19985),w(noun(_19983,_20043,_20045,n))),nil,_20355,_20367),adverbial1(_20009,_20011,_20013,_20015,_20159,_20367,_20345),unlock(_20345,_20347),
    !,
    pushstack(free,adverbial1(_20009,_20011,_20013,_20015),nil,_20347,_20561),
    st0(_19987,_20457,_20561,_20117).

reductant0([reductant0,[]],_20005,_20005) --> 
    [].

adverb0(_19981,[adverb0,_20057,!,_20125],_20029,_20033) --> 
    adverb1(_19981,_20057,_20029,_20091),
    !,
    accept(_20125,_20091,_20033).

adverb0(_19981,[adverb0,[]],_20013,_20013) --> 
    [].

adverb(there,place,post,[adverb,lit(there),!,_20129],_20057,_20061) --> 
    cc(there,_20057,_20117),
    !,
    not_look_ahead(w(verb(_20009,_20011,_20013)),_20129,_20117,_20061).

adverb(_19981,_19983,_19985,[adverb,_20087,{}],_20047,_20051) --> 
    particle(_19981,_20087,_20047,_20051),
    {particle(_19981,_19983,_19985)}.

adverbx0([adverbx0,_20061,!,[]],_20039,_20043) --> 
    properadverb(_19999,_20001,_20003,_20061,_20039,_20103),
    !,
    pushstack(free,adverb(_19999,_20001,_20003),nil,_20103,_20043),
    [].

adverbx0([adverbx0,[]],_20005,_20005) --> 
    [].

properadverb(_19981,_19983,_19985,[properadverb,_20091,{}],_20051,_20055) --> 
    adverb(_19981,_19983,_19985,_20091,_20051,_20055),
    {\+preposition(_19981)}.

adjunct1(_19981,_19983,_19985,_19987,[adjunct1,{},_20149,_20207,_20275],_20089,_20093) --> 
    {_19981==nil},
    dendagen0(_20031,_20149,_20089,_20183),
    date(_20015,_20017,_20207,_20183,_20245),
    pushstack(free,date(_20015,_20017),nil,_20245,_20367),
    np1(_19983,_19985,_19987,_20275,_20367,_20093).

adjunct1(_19981,_19983,_19985,_19987,[adjunct1,{},_20127,!,_20215],_20067,_20071) --> 
    {_19981==nil},
    time_phrase(_19983,_19985,_19987,_20127,_20067,_20169),
    !,
    accept(_20215,_20169,_20071).

adjunct1(_19981,_19983,_19985,_19987,[adjunct1,{},_20115],_20055,_20059) --> 
    {_19981==nil},
    np1(_19983,_19985,_19987,_20115,_20055,_20059).

adjunct1(on,_19983,_19985,_19987,[adjunct1,_20137,_20185,_20233,_20291,!,_20369],_20091,_20095) --> 
    on0(_20137,_20091,_20167),
    the0(_20185,_20167,_20215),
    dendagen0(_20033,_20233,_20215,_20267),
    plausibledate1(_20027,_20029,_20291,_20267,_20329),
    !,
    pushstack(first,date(_20027,_20029),nil,_20329,_20469),
    np1(_19983,_19985,_19987,_20369,_20469,_20095).

adjunct1(in,_19983,_19985,_19987,[adjunct1,_20205,_20263,{},_20335,!,_20403],_20159,_20163) --> 
    prep(in,_20205,_20159,_20239),
    w(nb(_20037,num),_20263,_20239,_20297),
    {1000=<_20037,_20037=<9999},
    not_look_ahead(w(noun(time,_20089,_20091,_20093)),_20335,_20297,_20369),
    !,
    lock(exact,_20369,_20437),
    pushstack(exact,(w(noun(year,sin,u,n)),w(nb(_20037,num))),nil,_20437,_20449),
    np1(_19983,_19985,_19987,_20403,_20449,_20427),
    unlock(_20427,_20163).

adjunct1(_19981,_19983,_19985,_19987,[adjunct1,_20087],_20041,_20045) --> 
    pp(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

adjunct1(_19981,_19983,_19985,_19987,[adjunct1,{},_20115],_20055,_20059) --> 
    {_19981==dir},
    noun_phrase1(_19983,_19985,_19987,_20115,_20055,_20059).

pp(_19981,_19983,_19985,_19987,[pp,_20095,_20153],_20049,_20053) --> 
    prep(_19981,_20095,_20049,_20129),
    noun_phrasenw(_19983,_19985,_19987,_20153,_20129,_20053).

noun_phrasenw(_19981,_19983,_19985,[noun_phrasenw,_20081,!,_20149],_20041,_20045) --> 
    relwhat(_20001,_20081,_20041,_20115),
    !,
    reject(_20149,_20115,_20045).

noun_phrasenw(_19981,_19983,_19985,[noun_phrasenw,_20073],_20033,_20037) --> 
    noun_phrase(_19981,_19983,_19985,_20073,_20033,_20037).

streetno([streetno,lit(one),!,_20075],_20021,_20025) --> 
    cc(one,_20021,_20063),
    !,
    reject(_20075,_20063,_20025).

streetno([streetno,_20039,!,_20097],_20017,_20021) --> 
    a(_20039,_20017,_20069),
    !,
    reject(_20097,_20069,_20021).

streetno([streetno,_20055,_20113,!,_20171],_20033,_20037) --> 
    w(nb(_20003,num),_20055,_20033,_20089),
    colon(_20113,_20089,_20143),
    !,
    reject(_20171,_20143,_20037).

streetno([streetno,_20047,{}],_20025,_20029) --> 
    num(_19991,_20047,_20025,_20029),
    {_19991<500}.

rel_clauses(_19981,_19983,_19983 and _19991,[rel_clauses,_20111,!,_20179],_20071,_20075) --> 
    pronoun(_20023,_20111,_20071,_20145),
    !,
    lock(last,_20145,_20363),
    pushstack(last,(pronoun(_20023),npgap(_19981)),nil,_20363,_20375),
    st0(_19991,_20179,_20375,_20353),
    unlock(_20353,_20075).

rel_clauses(_19981,_19983,_19985,[rel_clauses,_20087,_20165],_20047,_20051) --> 
    rel_clause(_19981,_19983,_19997,_20087,_20047,_20129),
    rel_clauses0(_19981,_19997,_19985,_20165,_20129,_20051).

rel_clauses0(_19981,_19983,_19985,[rel_clauses0,_20079,_20127],_20039,_20043) --> 
    and1(_20079,_20039,_20109),
    rel_clauses(_19981,_19983,_19985,_20127,_20109,_20043).

rel_clauses0(_19981,_19983,_19983,[rel_clauses0,[]],_20025,_20025) --> 
    [].

rel_clause(_19981,_19983,_19983 and _19991,[rel_clause,_20095,_20153],_20055,_20059) --> 
    rel(_19981,_20095,_20055,_20129),
    pushstack(free,npgap(_19981),nil,_20129,_20251),
    st0(_19991,_20153,_20251,_20059).

rel_clause(_19981,_19983,_19985,[rel_clause,_20103,_20151,{}],_20063,_20067) --> 
    ofx(_20103,_20063,_20133),
    noun_phrase(_20005,_19983 and _20009,_19985,_20151,_20133,_20067),
    {has_template(_20005,_19981,_20009)}.

rel_clause(_19981,_19983,_19983 and _19991,[rel_clause,_20097,_20145],_20057,_20061) --> 
    having(_20097,_20057,_20127),
    pushstack(first,(npgap(_19981),has),nil,_20127,_20317),
    st0(_19991,_20145,_20317,_20061).

rel_clause(_19981,_19983,_19983 and _19991,[rel_clause,{},_20219,_20267,_20325,_20587],_20159,_20163) --> 
    {user:value(textflag,true)},
    infinitive(_20219,_20159,_20249),
    w(verb(_20067,pres,fin),_20267,_20249,_20301),
    pushstack(first,(prep(in),npgap(_19981)),nil,_20301,_20507),verb_modifier1(_20037,_20039,_20041,_20043,_20325,_20507,_20545),
    pushstack(free,(someone,w(verb(_20067,pres,fin)),adverbial1(_20037,_20039,_20041,_20043)),nil,_20545,_20763),
    stn(real,_19991,_20587,_20763,_20163).

rel_clause(_19981,_19983,_19983 and _19991,[rel_clause,{},_20193,_20251,_20513],_20139,_20143) --> 
    {constrain(_19981,way)},
    doing(_20051,_20193,_20139,_20227),
    pushstack(free,(prep(in),npgap(_19981)),nil,_20227,_20433),verb_modifier1(_20031,_20033,_20035,_20037,_20251,_20433,_20471),
    pushstack(free,(someone,w(verb(_20051,pres,fin)),adverbial1(_20031,_20033,_20035,_20037)),nil,_20471,_20691),
    stn(real,_19991,_20513,_20691,_20143).

rel_clause(_19981,_19983,_19983 and _19991,[rel_clause,_20147,_20215,_20293],_20107,_20111) --> 
    whose_noun(_20031,_20033,_20147,_20107,_20185),
    worldcom(_20037,_19991,_20041,_20215,_20185,_20257),
    pushstack(first,(has,art,noun(_20057,_20059,_20061,n,_20031,_20033),that),nil,_20257,_20603),
    xverb_phrase(_19981,_20037,id,true,_20041,_20293,_20603,_20111).

rel_clause(_19981,_19983,_19985,[rel_clause,_20139,_20227,_20305],_20099,_20103) --> 
    lexv(iv,_20009,pres,part,_20139,_20099,_20185),
    worldcom(_20027,_19983,_20035:_19985,_20227,_20185,_20269),
    pushstack(first,lexv(iv,_20009,pres,fin),nil,_20269,_20409),
    verb_phrase(_19981,_20027,id,_20035 and _19983:_19985,_20305,_20409,_20103).

rel_clause(_19981,_19983,_19985,[rel_clause,_20139,_20227,_20305],_20099,_20103) --> 
    lexv(tv,_20009,pres,part,_20139,_20099,_20185),
    worldcom(_20027,_19983,_20035:_19985,_20227,_20185,_20269),
    pushstack(first,lexv(tv,_20009,pres,fin),nil,_20269,_20409),
    verb_phrase(_19981,_20027,id,_20035 and _19983:_19985,_20305,_20409,_20103).

rel_clause(_19981,_19983,_19983 and _19991,[rel_clause,_20121,_20169],_20081,_20085) --> 
    where(_20121,_20081,_20151),
    pushstack(free,(prep(in),the(_19981),w(noun(place,_20025,_20027,n))),nil,_20151,_20345),
    statement(_19991,_20169,_20345,_20085).

rel_clause(_19981,_19983,_19983 and _19991,[rel_clause,_20137,{},_20199],_20097,_20101) --> 
    when(_20137,_20097,_20167),
    {constrain(_19981,time)},
    pushstack(free,(prep(in),the(_19981),w(noun(time,sin,u,n))),nil,_20167,_20375),
    statement(_19991,_20199,_20375,_20101).

rel_clause(_19995:_19997,_19983,_19983 and _19991,[rel_clause,{},_20293,_20351,{},{},_20437,!,_20525],_20233,_20237) --> 
    {user:value(textflag,true)},
    prep1(for,_20293,_20233,_20327),
    w(verb(_20113,pres,part),_20351,_20327,_20385),
    {tv_templ(_20113,_20127,_20129)},
    {stanprep(_20137,_19997)},
    np1(_20143,_20145,_20147,_20437,_20385,_20479),
    !,
    pushstack(free,([a],w(noun(agent,sin,u,n)),w(verb(_20113,pres,fin)),np1(_20143,_20145,_20147),prep1(_20137),npgap(_19995:_19997)),nil,_20479,_20763),
    statement(_19991,_20525,_20763,_20237).

rel_clause(_19995:_19997,_19983,_19983 and _19991,[rel_clause,{},_20289,_20337,{},{},_20423,!,_20511],_20229,_20233) --> 
    {user:value(textflag,true)},
    infinitive(_20289,_20229,_20319),
    w(verb(_20109,_20111,fin),_20337,_20319,_20371),
    {tv_templ(_20109,_20123,_20125)},
    {stanprep(_20133,_19997)},
    np1(_20139,_20141,_20143,_20423,_20371,_20465),
    !,
    pushstack(free,([a],w(noun(agent,sin,u,n)),w(verb(_20109,pres,fin)),np1(_20139,_20141,_20143),prep1(_20133),npgap(_19995:_19997)),nil,_20465,_20775),
    statement(_19991,_20511,_20775,_20233).

rel_clause(_19981,_19983,_19983 and _19991,[rel_clause,{},_20239,_20287,{},{},!,_20383],_20179,_20183) --> 
    {user:value(textflag,true)},
    infinitive(_20239,_20179,_20269),
    w(verb(_20079,_20081,fin),_20287,_20269,_20321),
    {tv_templ(kiss,_20093,_20095)},
    {constrain(_19981,_20095)},
    !,
    pushstack(free,([a],w(noun(agent,sin,u,n)),w(verb(_20079,pres,fin)),npgap(_19981)),nil,_20321,_20481),
    statement(_19991,_20383,_20481,_20183).

doing(_19981,[doing,_20059,_20107],_20031,_20035) --> 
    to(_20059,_20031,_20089),
    w(verb(_19981,pres,fin),_20107,_20089,_20035).

doing(_19981,[doing,_20063,_20121],_20035,_20039) --> 
    prep1(in,_20063,_20035,_20097),
    w(verb(_19981,pres,part),_20121,_20097,_20039).

doing(_19981,[doing,_20063,_20121],_20035,_20039) --> 
    prep1(of,_20063,_20035,_20097),
    w(verb(_19981,pres,part),_20121,_20097,_20039).

reduced_rel(_19981,_19983,_19985,[reduced_rel,_20089,!,_20157],_20049,_20053) --> 
    w(verb(_20005,pres,fin),_20089,_20049,_20123),
    !,
    reject(_20157,_20123,_20053).

reduced_rel(_19981,_19983,_19985,[reduced_rel,_20089,!,_20157],_20049,_20053) --> 
    w(verb(_20005,past,fin),_20089,_20049,_20123),
    !,
    reject(_20157,_20123,_20053).

reduced_rel(_19981,_19983,_19985,[reduced_rel,_20089,!,_20157],_20049,_20053) --> 
    w(verb(be,_20007,_20009),_20089,_20049,_20123),
    !,
    reject(_20157,_20123,_20053).

reduced_rel(_19981,_19983,_19985,[reduced_rel,_20121,!,_20189],_20081,_20085) --> 
    w(verb(_20017,pres,part),_20121,_20081,_20155),
    !,
    pushstack(first,(that,w(verb(_20017,pres,fin))),nil,_20155,_20283),
    rel_clause(_19981,_19983,_19985,_20189,_20283,_20085).

whose_noun(_19981,_19983,[whose_noun,_20073,_20121],_20039,_20043) --> 
    whose(_20073,_20039,_20103),
    noun(_19993,_19995,u,n,_19981,_19983,_20121,_20103,_20043).

relwhat(_19981,[relwhat,lit(what),{}],_20033,_20037) --> 
    cc(what,_20033,_20037),
    {constrain(_19981,thing)}.

relwhat(_19981,[relwhat,lit(who),{}],_20033,_20037) --> 
    cc(who,_20033,_20037),
    {constrain(_19981,agent)}.

rel(_19981,[rel,_20061,{}],_20033,_20037) --> 
    relpron(_19997,_20061,_20033,_20037),
    {constrain(_19981,_19997)}.

begin([begin,[]],_20005,_20005) --> 
    [].

end([end,[]],_20005,_20005) --> 
    [].

accept([accept,[]],_20005,_20005) --> 
    [].

reject([reject,{}],_20009,_20009) --> 
    {fail}.

comparisons(_19981,_19983,_19985,[comparisons,_20089,_20167],_20049,_20053) --> 
    comparison(_19981,_19983,_19999,_20089,_20049,_20131),
    comparisons0(_19981,_19983,_19999,_19985,_20167,_20131,_20053).

comparisons0(_19981,_19983,_19985,_19985 and _19993,[comparisons0,_20113,_20161,_20239],_20067,_20071) --> 
    and1(_20113,_20067,_20143),
    comparison(_19981,_19983,_20013,_20161,_20143,_20203),
    comparisons0(_19981,_19983,_20013,_19993,_20239,_20203,_20071).

comparisons0(_19981,_19983,_19985,_19985,[comparisons0,[]],_20031,_20031) --> 
    [].

comparison(_19981,_19983,_19985,[comparison,_20105,_20163,{}],_20065,_20069) --> 
    comparator1(_20005,_20105,_20065,_20139),
    noun_phrase1(_20011,_20013,_19985,_20163,_20139,_20069),
    {compare(_20005,number,_19981,_20011,_20013)}.

comparison(_19981,_19983,_19985,[comparison,_20107,_20175,{}],_20067,_20071) --> 
    comparator2(_20005,_20007,_20107,_20067,_20145),
    noun_phrase1(_20011,_20013,_19985,_20175,_20145,_20071),
    {compare(_20005,_20007,_19981,_20011,_20013)}.

noun_phrase2(_19981,_19981,_19985,_19987,[noun_phrase2,_20105,_20163],_20059,_20063) --> 
    resiproc(_20003,_20105,_20059,_20139),
    pushstack(first,pronoun(_20003),nil,_20139,_20261),
    noun_phrase1(_19981,_19985,_19987,_20163,_20261,_20063).

noun_phrase2(_19981,_19983,_19985,findalt(diff,_19981,_19983)::_19997 and _19985,[noun_phrase2,_20117,_20165],_20071,_20075) --> 
    another(_20117,_20071,_20147),
    noun(_20017,sin,u,n,_19983,_19997,_20165,_20147,_20075).

noun_phrase2(_19981,_19983,_19985,_19987,[noun_phrase2,_20085],_20039,_20043) --> 
    noun_phrase(_19983,_19985,_19987,_20085,_20039,_20043).

noun_phrase(_19981,_19983,_19985,[noun_phrase,_20073],_20033,_20037) --> 
    noun_phrases(_19981,_19983,_19985,_20073,_20033,_20037).

noun_phrases(_19981,_19983,_19985,[noun_phrases,_20097,_20145,_20223],_20057,_20061) --> 
    both0(_20097,_20057,_20127),
    noun_phrase1(_20001,_19983,_20007,_20145,_20127,_20187),
    noun_phrases0(_20001,_19981,_19983,_20007,_19985,_20223,_20187,_20061).

noun_phrases0(_19981,_19983,_19985,_19987,_19987 and _19995,[noun_phrases0,_20151,_20209,_20287,{}],_20099,_20103) --> 
    andor(_20021,_20151,_20099,_20185),
    noun_phrase1(_20035,_19985,_20039,_20209,_20185,_20251),
    noun_phrases20(_20035,_20025,_19985,_20039,_19995,_20287,_20251,_20103),
    {latin(_20021,_19981,_20025,_19983)}.

noun_phrases0(_19981,_19983,_19985,_19987,_19987 and _19995,[noun_phrases0,_20141,_20219,{}],_20089,_20093) --> 
    noun_phrase1(_20025,_19985,_20029,_20141,_20089,_20183),
    noun_phrases10(_20025,_20019,_19985,_20029,_19995,_20219,_20183,_20093),
    {latin(and,_19981,_20019,_19983)}.

noun_phrases0(_19981,_19981,_19985,_19987,_19987,[noun_phrases0,[]],_20037,_20037) --> 
    [].

noun_phrases10(_19981,_19983,_19985,_19987,_19987 and _19995,[noun_phrases10,_20151,_20209,_20287,{}],_20099,_20103) --> 
    andor(_20021,_20151,_20099,_20185),
    noun_phrase1(_20035,_19985,_20039,_20209,_20185,_20251),
    noun_phrases20(_20035,_20025,_19985,_20039,_19995,_20287,_20251,_20103),
    {latin(_20021,_19981,_20025,_19983)}.

noun_phrases10(_19981,_19983,_19985,_19987,_19987 and _19995,[noun_phrases10,_20141,_20219,{}],_20089,_20093) --> 
    noun_phrase1(_20025,_19985,_20029,_20141,_20089,_20183),
    noun_phrases10(_20025,_20019,_19985,_20029,_19995,_20219,_20183,_20093),
    {latin(and,_19981,_20019,_19983)}.

noun_phrases20(_19981,_19983,_19985,_19987,_19987 and _19995,[noun_phrases20,_20151,_20209,_20287,{}],_20099,_20103) --> 
    andor(_20021,_20151,_20099,_20185),
    noun_phrase1(_20035,_19985,_20039,_20209,_20185,_20251),
    noun_phrases20(_20035,_20025,_19985,_20039,_19995,_20287,_20251,_20103),
    {latin(_20021,_19981,_20025,_19983)}.

noun_phrases20(_19981,_19981,_19985,_19987,_19987,[noun_phrases20,[]],_20037,_20037) --> 
    [].

no_phrase(_19981,_19983,[no_phrase,_20071],_20037,_20041) --> 
    pushstack(free,the(_19981),nil,_20037,_20169),
    noun_phrase1(_19997,true,_19983,_20071,_20169,_20041).

noun_phrase1(_19981,_19983,_19983 and _19991,[noun_phrase1,_20095,_20153],_20055,_20059) --> 
    relwhat(_19981,_20095,_20055,_20129),
    pushstack(free,npgap(_19981),nil,_20129,_20251),
    st0(_19991,_20153,_20251,_20059).

noun_phrase1(_19981,_19983,_19983,[noun_phrase1,_20069],_20029,_20033) --> 
    npgap(_19981,_20069,_20029,_20033).

noun_phrase1(_19981,_19983,_19985,[noun_phrase1,_20073],_20033,_20037) --> 
    np1(_19981,_19983,_19985,_20073,_20033,_20037).

noun_phrase1(_19981,_19983,_19985,[noun_phrase1,_20073],_20033,_20037) --> 
    npa(_19981,_19983,_19985,_20073,_20033,_20037).

noun_phrase1(_19981,_19983,_19985,[noun_phrase1,_20073],_20033,_20037) --> 
    np2(_19981,_19983,_19985,_20073,_20033,_20037).

noun_phrase1(_19981,_19983,exists(_19981)::set_of(_20005,_20007,_19981)and _19983,[noun_phrase1,_20113,_20161,_20209,_20257],_20073,_20077) --> 
    athe(_20113,_20073,_20143),
    setlist(_20161,_20143,_20191),
    of(_20209,_20191,_20239),
    no_phrase(_20005,_20007,_20257,_20239,_20077).

np0(_19981,_19983,_19985,[np0,_20081,_20129],_20041,_20045) --> 
    athe0(_20081,_20041,_20111),
    aname_phrase(_19995,_19981,_19983,_19985,_20129,_20111,_20045).

np0(_19981,_19983,_19985,[np0,_20079],_20039,_20043) --> 
    np_head(_19989,_19981,_19993,_19993,_19983,_19985,_20079,_20039,_20043).

np0(_19981,_19983,_19985,[np0,_20073],_20033,_20037) --> 
    npa(_19981,_19983,_19985,_20073,_20033,_20037).

np0(_19981,_19983,_19983,[np0,_20069],_20029,_20033) --> 
    npgap(_19981,_20069,_20029,_20033).

np1_accept(_19981,_19983,_19985,[np1_accept,_20079,!],_20039,_20043) --> 
    np1(_19981,_19983,_19985,_20079,_20039,_20043),
    !.

np1(_19981,_19983,_19985,[np1,_20095,_20203],_20055,_20059) --> 
    np_kernel(_19995,_19981,_19999,_20001,_19983,_19985,_20095,_20055,_20149),
    noun_modifiers0(_19995,_19981,_19999,_20001,_20203,_20149,_20059).

np_kernel(_19981,_19983,_19985,_19987,_19989,_19991,[np_kernel,_20115],_20057,_20061) --> 
    np_head1(_19981,_19983,_19985,_19987,_19989,_19991,_20115,_20057,_20061).

np_kernel(_19981,_19983,true,_19987,_19989,_19987 and _19997,[np_kernel,_20123,_20171],_20065,_20069) --> 
    the0(_20123,_20065,_20153),
    aname_phrase(_19981,_19983,_19989,_19997,_20171,_20153,_20069).

np_kernel(_19981,_19983,_19985,_19987,_19989,_19991,[np_kernel,_20115],_20057,_20061) --> 
    np_head(_19981,_19983,_19985,_19987,_19989,_19991,_20115,_20057,_20061).

np_head1(_19981,_19983,_19995 and _19997,_19987,_19989,_19991,[np_head1,_20191,_20299,_20357,{},!,_20489],_20133,_20137) --> 
    determiner0(_20031,_19981,_19983,_19987,_19989,_19991,_20191,_20133,_20245),
    w(name(_20049,_20051,_20053),_20299,_20245,_20333),
    noun(_20057,_20031,u,n,_19983,_19995,_20357,_20333,_20411),
    {adjname_template(_20049,_19983,_20079,_19997)},
    !,
    accept(_20489,_20411,_20137).

aname_phrase(_19981,_19983,_19985,_19987,[aname_phrase,lit(one),_20135,!,_20203],_20067,_20071) --> 
    cc(one,_20067,_20133),
    w(noun(_20017,_20019,_20021,_20023),_20135,_20133,_20169),
    !,
    reject(_20203,_20169,_20071).

aname_phrase(_19981,_19983,_19985,_19987,[aname_phrase,_20131,_20189,{},!,_20271],_20085,_20089) --> 
    number(_20015,_20131,_20085,_20165),
    w(noun(_20023,plu,_20027,_20029),_20189,_20165,_20223),
    {\+measureclass(_20023)},
    !,
    reject(_20271,_20223,_20089).

aname_phrase(_19981,_19983,_19985,_19987,[aname_phrase,_20125,_20173,_20221,_20279,!,_20347],_20079,_20083) --> 
    the0(_20125,_20079,_20155),
    filanepr(_20173,_20155,_20203),
    number(_20021,_20221,_20203,_20255),
    w(noun(_20029,plu,_20033,_20035),_20279,_20255,_20313),
    !,
    reject(_20347,_20313,_20083).

aname_phrase(_19981,_19983,_19985,_19987,[aname_phrase,_20155,{},_20227,{},!,_20309],_20109,_20113) --> 
    wx(adj2(nil,_20027),_20155,_20109,_20189),
    {member(_20027,[nearest])},
    w(name(_20049,_20051,_20053),_20227,_20189,_20261),
    {\+number(_20049)},
    !,
    reject(_20309,_20261,_20113).

aname_phrase(_19981,_19983,_19985,_19987,[aname_phrase,_20123,_20171,_20229,{}],_20077,_20081) --> 
    athe0(_20123,_20077,_20153),
    xpreadjs0(_20013,_20171,_20153,_20205),
    name_phrase(_19981,_19983,_19985,_20017,_20229,_20205,_20081),
    {preadjs_template(_20013,_19983,_20017,_19987)}.

npa(_19981,_19983,_19985,[npa,_20089,!,_20157],_20049,_20053) --> 
    w(name(good_friday,n,date),_20089,_20049,_20123),
    !,
    reject(_20157,_20123,_20053).

npa(_19981,_19983,findit(_19995)::_19991,[npa,_20135,_20183,_20363,{}],_20095,_20099) --> 
    its(_20135,_20095,_20165),
    pushstack(free,art,nil,_20165,_20283),determiner(_19981,_20045 and _20025,_19983,_19991,_20183,_20283,_20321),
    noun_compound(_19981,_20045,_20055,_20363,_20321,_20099),
    {has_template(_19995,_19981,_20025)}.

npa(_19981,_19983,_19985,[npa,_20083,_20131,!,_20189],_20043,_20047) --> 
    this(_20083,_20043,_20113),
    np_corner(_20131,_20113,_20161),
    !,
    reject(_20189,_20161,_20047).

npa(_19981,_19983,findit(_19981)::_19983,[npa,_20089,{}],_20049,_20053) --> 
    this1(_20089,_20049,_20053),
    {it_template(_19981)}.

npa(_20001:_20003,_19983,findpron(_20001:_20003)::_20001 isa _20019 and _19983,[npa,_20119,{}],_20079,_20083) --> 
    pronoun(_20019,_20119,_20079,_20083),
    {type(_20019,_20003)}.

npa(_19981,_19983,_19985,[npa,_20087,_20175],_20047,_20051) --> 
    determiner00(_19981,_19997,_19983,_19985,_20087,_20047,_20133),
    name_complex(_19981,_19997,_20175,_20133,_20051).

npa(_19981,_19983,_19985,[npa,_20109,_20167],_20069,_20073) --> 
    posspron(_20011,_20109,_20069,_20143),
    pushstack(first,(thispron,w(noun(_20011,sin,u,gen))),nil,_20143,_20259),
    np1(_19981,_19983,_19985,_20167,_20259,_20073).

name_phrase(name,_19983,_19985,_19985 and _19993,[name_phrase,_20089],_20043,_20047) --> 
    person_name(_19983,_19993,_20089,_20043,_20047).

name_phrase(_19981,_19983,_19985,_19991 and _19985,[name_phrase,_20091],_20045,_20049) --> 
    namep(_19981,_19983,_19991,_20091,_20045,_20049).

person_name((_20005,_20011,_20013):person,_19987 and _19993 and _19995,[person_name,_20125,_20193,_20261,!,_20339],_20091,_20095) --> 
    properfirstname(_20005,_19987,_20125,_20091,_20163),
    properfirstname(_20011,_19993,_20193,_20163,_20231),
    properlastname(_20013,_19995,_20261,_20231,_20299),
    !,
    accept(_20339,_20299,_20095).

person_name((_19999,_20001):person,_19987 and _19989,[person_name,_20101,_20169,!,_20247],_20067,_20071) --> 
    properfirstname(_19999,_19987,_20101,_20067,_20139),
    properlastname(_20001,_19989,_20169,_20139,_20207),
    !,
    accept(_20247,_20207,_20071).

properfirstname(_19981,_19983,[properfirstname,_20065],_20031,_20035) --> 
    nameq1(_19981:firstname,_19983,_20065,_20031,_20035).

properlastname(_19981,_19983,[properlastname,_20065],_20031,_20035) --> 
    nameq1(_19981:lastname,_19983,_20065,_20031,_20035).

time_phrase(_19981,_19983,_19989 and _19983,[time_phrase,_20077],_20037,_20041) --> 
    timeq12(_19981,_19989,_20077,_20037,_20041).

npy(_19981,_19983,_19985,[npy,_20073],_20033,_20037) --> 
    namep(_19981,_19983,_19985,_20073,_20033,_20037).

npy(_19981,_19983,_19985,[npy,_20073],_20033,_20037) --> 
    np2(_19981,_19983,_19985,_20073,_20033,_20037).

np_corner([np_corner,_20037],_20015,_20019) --> 
    wx(adj2(nil,_19987),_20037,_20015,_20019).

np_corner([np_corner,_20041],_20019,_20023) --> 
    w(noun(_19985,_19987,_19989,_19991),_20041,_20019,_20023).

np_corner([np_corner,_20037],_20015,_20019) --> 
    w(nb(_19985,_19987),_20037,_20015,_20019).

filanepr([filanepr,_20037],_20015,_20019) --> 
    wx(adj2(nil,first),_20037,_20015,_20019).

filanepr([filanepr,_20037],_20015,_20019) --> 
    wx(adj2(nil,last),_20037,_20015,_20019).

filanepr([filanepr,_20037],_20015,_20019) --> 
    wx(adj2(nil,next),_20037,_20015,_20019).

filanepr([filanepr,_20037],_20015,_20019) --> 
    wx(adj2(nil,previous),_20037,_20015,_20019).

flnp(_19981,[flnp,_20083,{}],_20055,_20059) --> 
    wx(adj2(nil,_19981),_20083,_20055,_20059),
    {testmember(_19981,[first,last,next,previous])}.

np2(_19981,_19983,_19985,[np2,_20183,_20231,_20289,_20397,_20455,!,_20543],_20143,_20147) --> 
    the0(_20183,_20143,_20213),
    prep1(nearest,_20231,_20213,_20265),
    np_head(0,_20057,_20059,_20061,_20063,_20065,_20289,_20265,_20343),
    prep1(_20069,_20397,_20343,_20431),
    np1(_20043,_20045,_20047,_20455,_20431,_20497),
    !,
    pushstack(first,(np_head(0,_20057,_20059,_20061,_20063,_20065),prep1(near),np1(_20043,_20045,_20047)),nil,_20497,_20785),
    np1_accept(_19981,_19983,_19985,_20543,_20785,_20147).

np2(_19981,_19983,_19985,[np2,_20159,_20217,_20265,_20463],_20119,_20123) --> 
    number(1:_20045,_20159,_20119,_20193),
    ofthe(_20217,_20193,_20247),
    pushstack(first,a,nil,_20247,_20363),np_head(_20055,_19981,_20059,_20061,_19983,_19985,_20265,_20363,_20409),
    pushstack(first,(prep(from),this,w(noun(set,_20031,_20033,n))),nil,_20409,_20635),
    noun_modifiers0(_20055,_19981,_20059,_20061,_20463,_20635,_20123).

np2(_19981,_19983,_19985,[np2,_20143,_20191,_20239,_20347,_20395],_20103,_20107) --> 
    the(_20143,_20103,_20173),
    same(_20191,_20173,_20221),
    noun(_20031,_20033,_20035,n,_20039,_20041,_20239,_20221,_20293),
    as(_20347,_20293,_20377),
    pushstack(free,(the,noun(_20053,_20033,_20057,n,_20039,_20041),ofx),nil,_20377,_20647),
    np1(_19981,_19983,_19985,_20395,_20647,_20107).

np2(_19981,_19983,_19985,[np2,_20115,_20183],_20075,_20079) --> 
    quant_pron(_20021,_20011,_20115,_20075,_20153),
    pushstack(first,([_20021],w(noun(_20011,_20013,_20015,n))),nil,_20153,_20203),
    np1(_19981,_19983,_19985,_20183,_20203,_20079).

np_head(0,_19983,_19985,_19987,_19989,findpron(_20031)::exists(_19983)::_19985 and _20013 and _19987 and _20025 and _19989,[np_head,_20233,_20281,!,_20399,_20457,{},{}],_20175,_20179) --> 
    thispron(_20233,_20175,_20263),
    noun(_20087,_20089,_20091,gen,_20031,_20013,_20281,_20263,_20335),
    !,
    preadjs0(_20101,_20399,_20335,_20433),
    noun_compound(_19983,_20107,_20109,_20457,_20433,_20179),
    {preadjs_template(_20101,_19983,_20107,_19985)},
    {has_template(_20031,_19983,_20025)}.

np_head(0,_19983,_19985,_19987,_19989,find(_20031)::exists(_19983)::_19985 and _20013 and _19987 and _20025 and _19989,[np_head,_20227,_20275,_20383,_20441,{},{}],_20169,_20173) --> 
    this(_20227,_20169,_20257),
    noun(_20081,_20083,_20085,gen,_20031,_20013,_20275,_20257,_20329),
    preadjs0(_20095,_20383,_20329,_20417),
    noun_compound(_19983,_20101,sin,_20441,_20417,_20173),
    {preadjs_template(_20095,_19983,_20101,_19985)},
    {has_template(_20031,_19983,_20025)}.

np_head(_19981,_19983,_19985,_19987,_19989,_19991,[np_head,_20197,_20305,_20363,{},{}],_20139,_20143) --> 
    determiner0(_20033,_19981,_19983,_19987,_19989,_19991,_20197,_20139,_20251),
    preadjs0(_20023,_20305,_20251,_20339),
    noun_complex(_19983,_20027,_20033,_20363,_20339,_20143),
    {_20023==true,!;\+vartypeid(_19983,friday)},
    {preadjs_template(_20023,_19983,_20027,_19985)}.

noun_complex(_19981,_19983,_19985,[noun_complex,_20073],_20033,_20037) --> 
    noun_compound(_19981,_19983,_19985,_20073,_20033,_20037).

noun_complex(_19981,_19983,_19985,[noun_complex,_20073],_20033,_20037) --> 
    noun_list(_19981,_19983,_19985,_20073,_20033,_20037).

name_complex(_19981,_19983,[name_complex,_20059],_20025,_20029) --> 
    name_compound(_19981,_19983,_20059,_20025,_20029).

this1(_19981,find(_19981),[this1,_20057],_20023,_20027) --> 
    this1(_20057,_20023,_20027).

clock_number(_19985:_19987,[clock_number,_20073,{}],_20045,_20049) --> 
    number(_19985:_19987,_20073,_20045,_20049),
    {_19985>=100}.

bus_number(_19985:_19987,[bus_number,_20073,{}],_20045,_20049) --> 
    number(_19985:_19987,_20073,_20045,_20049),
    {_19985=<100}.

road_number(_19985:_19987,[road_number,_20073,{}],_20045,_20049) --> 
    number(_19985:_19987,_20073,_20045,_20049),
    {_19985=<100}.

noun_list(_19981,_19983,_19985,[noun_list,_20095,_20203],_20055,_20059) --> 
    noun(_20005,_19985,u,n,_19995,_19997,_20095,_20055,_20149),
    nlists0(_19995,_19997,_19981,_19983,_20203,_20149,_20059).

nlists0(_19997:_19999,_19983,(_19997,_20017):(_19999,_20011),_19983 and _19993,[nlists0,_20153,_20211,_20319],_20107,_20111) --> 
    andor(_20043,_20153,_20107,_20187),
    noun(_20047,_20049,_20051,n,_20033,_20035,_20211,_20187,_20265),
    nlists0(_20033,_20035,_20017:_20011,_19993,_20319,_20265,_20111).

nlists0(_19981,_19983,_19981,_19983,[nlists0,[]],_20031,_20031) --> 
    [].

name_compound(_19981,_19983,[name_compound,_20093,_20171,_20249],_20059,_20063) --> 
    plausible_name(_20003,_20005,_20015,_20093,_20059,_20135),
    sine(u,_20015,_19999,_20171,_20135,_20213),
    ncomps0(_19999,_19981,_20003,_20005,_19983,_20249,_20213,_20063).

noun_compound(_19981,_19989 and _19991,_19985,[noun_compound,_20123,_20181,{}],_20083,_20087) --> 
    w(name(_20011,_20027,_20029),_20123,_20083,_20157),
    noun(_20033,_19985,u,n,_19981,_19989,_20181,_20157,_20087),
    {adjname_template(_20011,_19981,_20015,_19991)}.

noun_compound(_19981,_19983,_19985,[noun_compound,_20095,_20193],_20055,_20059) --> 
    noun2(_19985,u,_19995,_19999,_20001,_20095,_20055,_20145),
    ncomps0(_19995,_19981,_19999,_20001,_19983,_20193,_20145,_20059).

ncomps0(_19981,_19983,_19985,_19987,_19989,[ncomps0,_20117,_20205],_20065,_20069) --> 
    adjs10(_19983,_20013,_19987,_20005,_20117,_20065,_20163),
    ncomps(_19999,_19983,_19985,_20005,_19989,_20205,_20163,_20069).

ncomps0(n,_19983,_19985,_19987,_19987,[ncomps0,{}],_20047,_20047) --> 
    {compatvar(_19983,_19985)}.

ncomps(_19981,_19983,_19985,_19987,_19989,[ncomps,_20191,_20249,{},_20361,_20449],_20139,_20143) --> 
    not_look_ahead(w(verb(_20037,_20039,_20041)),_20191,_20139,_20225),
    noun2(_20045,_20047,_20017,_20021,_20053,_20249,_20225,_20299),
    {has_template(_19985,_20021,_20065)},
    determiner00(_19985,_19987,exists(_20021)::_20053 and _20065,_20023,_20361,_20299,_20407),
    ncomps0(_20017,_19983,_20021,_20023,_19989,_20449,_20407,_20143).

sine(_19981,n,gen,[sine,lit(s)],_20029,_20033) --> 
    cc(s,_20029,_20033).

sine(u,n,n,[sine,[]],_20025,_20025) --> 
    [].

sine(_19981,gen,gen,[sine,[]],_20025,_20025) --> 
    [].

noun_modifiers0(_19981,_19983,_19985,_19987,[noun_modifiers0,{},_20127],_20067,_20071) --> 
    {_19981=0;_19981=name},
    rel_clauses(_19983,_19985,_19987,_20127,_20067,_20071).

noun_modifiers0(_19981,_19983,_19985,_19987,[noun_modifiers0,{},_20127],_20067,_20071) --> 
    {_19981=0;_19981=name},
    reduced_rel(_19983,_19985,_19987,_20127,_20067,_20071).

noun_modifiers0(0,_19983,_19985,_19987,[noun_modifiers0,_20085],_20039,_20043) --> 
    rel_clauses(_19983,_19985,_19987,_20085,_20039,_20043).

noun_modifiers0(_19981,_19983,_19985,_19987,[noun_modifiers0,{},_20129],_20069,_20073) --> 
    {_19981\==of,_19981\==name},
    noun_modifiers(_19997,_19983,_19985,_19987,_20129,_20069,_20073).

noun_modifiers0(0,_19983,_19985,_19985,[noun_modifiers0,[]],_20031,_20031) --> 
    [].

noun_modifiers0(name,_19983,_19985,_19985,[noun_modifiers0,[]],_20031,_20031) --> 
    [].

noun_modifiers10(_19981,_19983,_19985,_19987,[noun_modifiers10,_20099,!,_20157],_20053,_20057) --> 
    and2(_20099,_20053,_20129),
    !,
    noun_modifiers(_20003,_19983,_19985,_19987,_20157,_20129,_20057).

noun_modifiers10(_19981,_19983,_19985,_19987,[noun_modifiers10,_20087],_20041,_20045) --> 
    noun_modifiers0(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

noun_modifiers(_19981,_19983,_19985,_19987,[noun_modifiers,_20101,_20179],_20055,_20059) --> 
    noun_modifier(_19983,_19985,_20001,_20101,_20055,_20143),
    noun_modifiers10(_19997,_19983,_20001,_19987,_20179,_20143,_20059).

noun_modifier(_19981,_19983,_19983 and _19991,[noun_modifier,_20079],_20039,_20043) --> 
    comparison(_19981,_19997,_19991,_20079,_20039,_20043).

noun_modifier(_19981,_19983,_19983 and _19991,[noun_modifier,_20129,_20187,{},{}],_20089,_20093) --> 
    negation0(_20017,_20129,_20089,_20163),
    adjunct1(_20029,_20031,_20021,_19991,_20187,_20163,_20093),
    {noun_compl(_20029,_19981,_20031,_20019)},
    {negate(_20017,_20019,_20021)}.

noun_modifier(_19981,_19983,_19983 and _19991,[noun_modifier,_20115,_20173,_20231],_20075,_20079) --> 
    prep(_20023,_20115,_20075,_20149),
    rel(_19981,_20173,_20149,_20207),
    pushstack(free,(prep(_20023),npgap(_19981)),nil,_20207,_20407),
    st0(_19991,_20231,_20407,_20079).

noun_modifier(_19981,_19983,_19983 and _19991,[noun_modifier,_20141,_20199,{},!,_20345],_20101,_20105) --> 
    day(_20019,_20141,_20101,_20175),
    lock(exact,_20175,_20239),pushstack(exact,w(noun(_20019,sin,u,n)),nil,_20239,_20251),np1(_20043,_20045,_19991,_20199,_20251,_20229),unlock(_20229,_20231),
    {noun_compl(nil,_19981,_20043,_20045)},
    !,
    accept(_20345,_20231,_20105).

noun_modifier(_19981,_19983,_19983 and _19991,[noun_modifier,_20105,!,{}],_20065,_20069) --> 
    adverb(_20013,_20015,_20025,_20105,_20065,_20069),
    !,
    {noun_adverb(_19981,_20013,_20015,_19991)}.

determiner0(plu,0,_19985,_19987,_19989,quant(eq/_20015,_19985)::_19987 and _19989,[determiner0,_20217,_20265,{},_20337,!,[]],_20159,_20163) --> 
    the0(_20217,_20159,_20247),
    wx(adj2(nil,_20059),_20265,_20247,_20299),
    {member(_20059,[first,last,next,previous])},
    number(_20015:_20107,_20337,_20299,_20371),
    !,
    pushstack(free,w(adj2(_20059,nil)),nil,_20371,_20163),
    [].

determiner0(_19981,0,_19985,_19987,_19989,quant(eq/_20015,_19985)::_19987 and _19989,[determiner0,_20157,_20205,{}],_20099,_20103) --> 
    the0(_20157,_20099,_20187),
    number(_20015:_20047,_20205,_20187,_20103),
    {pluralis(_19981,_20015)}.

determiner0(sin,0,_19985,_19987,_19989,_19991,[determiner0,_20123,_20171],_20065,_20069) --> 
    this1(_20123,_20065,_20153),
    pushstack(first,this,nil,_20153,_20265),
    determiner(_19985,_19987,_19989,_19991,_20171,_20265,_20069).

determiner0(_19981,0,_19985,_19987,_19989,_19991,[determiner0,_20123,_20171],_20065,_20069) --> 
    the(_20123,_20065,_20153),
    pushstack(first,art,nil,_20153,_20265),
    determiner(_19985,_19987,_19989,_19991,_20171,_20265,_20069).

determiner0(_19981,0,_19985,_19987,_19989,_19991,[determiner0,_20111],_20053,_20057) --> 
    determiner(_19985,_19987,_19989,_19991,_20111,_20053,_20057).

determiner0(_19981,0,_19985,_19987,_19989,_19991,[determiner0,_20111],_20053,_20057) --> 
    determiner00(_19985,_19987,_19989,_19991,_20111,_20053,_20057).

determiner00(_19981,_19983,_19985,_19987,[determiner00,_20093],_20047,_20051) --> 
    pushstack(first,art,nil,_20047,_20187),
    determiner(_19981,_19983,_19985,_19987,_20093,_20187,_20051).

determiner(_19981,_19983,_19985,find(_19981)::_19983 and _19985,[determiner,_20093],_20047,_20051) --> 
    this(_20093,_20047,_20051).

determiner(_19981,_19983,_19985,_19983 and _19985,[determiner,_20087],_20041,_20045) --> 
    the(_19981,_20087,_20041,_20045).

determiner(_19981,_19983,_19985,exists(_19981)::_19983 and _19985,[determiner,_20099,_20147],_20053,_20057) --> 
    only0(_20099,_20053,_20129),
    art(_20147,_20129,_20057).

determiner(_19981,_19983,_19985,forall(_19981)::_19983=>_19985,[determiner,_20093],_20047,_20051) --> 
    every(_20093,_20047,_20051).

determiner(_19981,_19983,_19985,not (exists(_19981)::_19983 and _19985),[determiner,_20097],_20051,_20055) --> 
    no(_20097,_20051,_20055).

determiner(_19981,_19983,_19985,quant(eq/_20011,_19981)::_19983 and _19985,[determiner,_20117,_20165],_20071,_20075) --> 
    theonly0(_20117,_20071,_20147),
    number(_20011:_20027,_20165,_20147,_20075).

determiner(_19981,_19983,_19985,quant(_20009/_20011,_19981)::_19983 and _19985,[determiner,_20127,_20185,_20243],_20081,_20085) --> 
    comparator1(_20009,_20127,_20081,_20161),
    number(_20011:_20037,_20185,_20161,_20219),
    ofthe0(_20243,_20219,_20085).

determiner(_19981,_19983,_19985,quant(gt/2,_19981)::_19983 and _19985,[determiner,_20101],_20055,_20059) --> 
    many(_20101,_20055,_20059).

determiner(_19981,_19983,_19985,quant(ge/2,_19981)::_19983 and _19985,[determiner,_20101],_20055,_20059) --> 
    several(_20101,_20055,_20059).

determiner(_19981,_19983,_19985,quant(le/3,_19981)::_19983 and _19985,[determiner,_20107,_20155],_20061,_20065) --> 
    a0(_20107,_20061,_20137),
    few(_20155,_20137,_20065).

nounp1(_19981,_19983,_19985,[nounp1,_20079],_20039,_20043) --> 
    noun(_19989,_19991,_19993,_19985,_19981,_19983,_20079,_20039,_20043).

nounp1(_19981,_19983,_19985,[nounp1,_20073],_20033,_20037) --> 
    plausible_name(_19981,_19983,_19985,_20073,_20033,_20037).

plausible_name(_19989:_19991,_19989 isa _19997,_19985,[plausible_name,_20119,{},{}],_20079,_20083) --> 
    w(name(_19989,_19985,_19997),_20119,_20079,_20083),
    {atom(_19989)},
    {type(_19997,_19991)}.

nounp(_19981,_19983,[nounp,_20067],_20033,_20037) --> 
    noun(_19987,_19989,u,n,_19981,_19983,_20067,_20033,_20037).

nounp(_19981,_19983,[nounp,_20061],_20027,_20031) --> 
    namep(0,_19981,_19983,_20061,_20027,_20031).

noun(_19981,_19983,_19985,_19987,_19995:_19981,_19995 isa _19981,[noun,_20127],_20069,_20073) --> 
    w(noun(_19981,_19983,_19985,_19987),_20127,_20069,_20073).

noun(_19981,_19983,_19985,_19987,_19995:_19981,_19995 isa _19981,[noun,_20175,_20233,{},!,_20315],_20117,_20121) --> 
    w(name(_20035,n,_20039),_20175,_20117,_20209),
    w(noun(_20047,_19983,_19985,_19987),_20233,_20209,_20267),
    {adjnamecomp_template(_20035,_20047,_19981)},
    !,
    accept(_20315,_20267,_20121).

namep(0,_19983,_19985,[namep,_20071],_20031,_20035) --> 
    measure(_19983,_19985,_20071,_20031,_20035).

namep(name,_19983,_19985,[namep,_20095,_20143],_20055,_20059) --> 
    you(_20095,_20055,_20125),
    pushstack(first,w(name(tuc,n,savant)),nil,_20125,_20163),
    nameq(_19983,_19985,_20143,_20163,_20059).

namep(0,_19983,_19985,[namep,_20131,_20179,_20247,!,_20365,{}],_20091,_20095) --> 
    nr(_20131,_20091,_20161),
    nameq1(_20025,_20037,_20179,_20161,_20217),
    noun(_20041,_20043,_20045,n,_19983,_20029,_20247,_20217,_20301),
    !,
    accept(_20365,_20301,_20095),
    {align(_19983,_20025,_20027,_20029,_19985)}.

namep(0,_19983,_19985,[namep,_20155,_20203,_20301,_20349,{},{},!,_20455],_20115,_20119) --> 
    athe0(_20155,_20115,_20185),
    noun2(_20031,_20033,n,_20037,_20039,_20203,_20185,_20253),
    suchas0(_20301,_20253,_20331),
    nameq(_20043,_20045,_20349,_20331,_20387),
    {compoundtest(_20031,_20033,_20037,_20043)},
    {align_noun_name(_20037,_20043,_20039,_19983,_19985)},
    !,
    accept(_20455,_20387,_20119).

namep(0,_19983,_19985,[namep,{},_20139,_20187,_20255],_20079,_20083) --> 
    {user:value(busflag,true)},
    the(_20139,_20079,_20169),
    nameq(_19983,_20039,_20187,_20169,_20225),
    noun(_20007,sin,_20011,n,_19983,_19985,_20255,_20225,_20083).

namep(0,_19983,_19985,[namep,{},_20137,_20185,_20253],_20083,_20087) --> 
    {\+user:value(busflag,true)},
    the0(_20137,_20083,_20167),
    nameq(_19983,_20043,_20185,_20167,_20223),
    noun(_20007,_20009,_20011,n,_19983,_19985,_20253,_20223,_20087).

namep(0,_19983,_19985,[namep,_20119,_20167,_20235,{}],_20079,_20083) --> 
    the0(_20119,_20079,_20149),
    nameq1(_20013,_20025,_20167,_20149,_20205),
    noun(_20029,sin,_20033,n,_19983,_20017,_20235,_20205,_20083),
    {align(_19983,_20013,_20015,_20017,_19985)}.

namep(name,_19983,_19985,[namep,_20099,_20167,_20225],_20059,_20063) --> 
    nameq(_19983,_19985,_20099,_20059,_20137),
    not_look_ahead([am],_20167,_20137,_20201),
    not_look_ahead([pm],_20225,_20201,_20063).

noun2(_19981,_19983,_19985,_19999:_20001,_19993 and _19995,[noun2,_20219,_20277,_20335,{},{},!,_20431],_20167,_20171) --> 
    w(noun(_20045,sin,u,n),_20219,_20167,_20253),
    w(noun(_20059,sin,u,n),_20277,_20253,_20311),
    w(noun(_20073,_19981,_19983,_19985),_20335,_20311,_20369),
    {adjnoun_template(_20045,_20073,_19999:_20001,_19993)},
    {adjnoun_template(_20059,_20073,_19999:_20001,_19995)},
    !,
    accept(_20431,_20369,_20171).

noun2(_19981,_19983,_19985,_19993:_19995,_19989,[noun2,_20167,_20225,{},!,_20307],_20115,_20119) --> 
    w(noun(_20027,sin,u,n),_20167,_20115,_20201),
    w(noun(_20041,_19981,_19983,_19985),_20225,_20201,_20259),
    {adjnoun_template(_20027,_20041,_19993:_19995,_19989)},
    !,
    accept(_20307,_20259,_20119).

noun2(_19981,_19983,_19985,_19987,_19989,[noun2,_20103],_20051,_20055) --> 
    noun(_19993,_19981,_19983,_19985,_19987,_19989,_20103,_20051,_20055).

measure(_19981,_19983,[measure,_20141,_20199,{},{},{}],_20107,_20111) --> 
    number(_20017,_20141,_20107,_20175),
    noun(_20031,_20033,_20035,n,_20015,_20019,_20199,_20175,_20111),
    {\+testmember(_20031,[noon,clock])},
    {measureclass(_20031)},
    {align_measure(_20015,_20017,_20019,_19981,_19983)}.

nameq(_19981,_19983,[nameq,_20059],_20025,_20029) --> 
    nameq1(_19981,_19983,_20059,_20025,_20029).

nameq(_19981,_19983,[nameq,_20059],_20025,_20029) --> 
    nameq2(_19981,_19983,_20059,_20025,_20029).

plausibledate1(_19987:date,_19987 isa date,[plausibledate1,_20181,{},_20253,_20311,_20399,{}],_20147,_20151) --> 
    w(nb(_20049,num),_20181,_20147,_20215),
    {_20049=<31},
    not_look_ahead([:],_20253,_20215,_20287),
    optional(['.'],_20311,_20287,_20375),
    not_look_ahead(w(nb(_20097,_20099)),_20399,_20375,_20151),
    {todaysdate(date(_20045,_20047,_20111)),_19987=date(_20045,_20047,_20049)}.

date(_19987:date,_19987 isa date,[date,_20163,{},!,{}],_20129,_20133) --> 
    w(name(_20021,n,date),_20163,_20129,_20133),
    {testmember(_20021,[whitsun_eve,whitsun_day,maundy_thursday,good_friday,eastereve,easterday,christmas_eve,christmas_day,new_years_eve,new_years_day,midsummer_eve,midsummer_day])},
    !,
    {named_date(_20021,_19987)}.

date(_19987:_19995,_19987 isa date,[date,_20147,_20215,_20263,!,{},{},!,_20379],_20113,_20117) --> 
    monthday(_20041,_20043,_20147,_20113,_20185),
    point0(_20215,_20185,_20245),
    xyear0(_20041,_20049,_20263,_20245,_20301),
    !,
    {_19987=date(_20049,_20041,_20043)},
    {type(date,_19995)},
    !,
    accept(_20379,_20301,_20117).

date(_19987:_19995,_19987 isa date,[date,_20169,_20227,_20285,_20333,_20391,!,{},{},!,_20507],_20135,_20139) --> 
    dayno(_20053,_20169,_20135,_20203),
    not_look_ahead([one],_20227,_20203,_20261),
    ofslash0(_20285,_20261,_20315),
    monthnumber(_20065,_20333,_20315,_20367),
    xyear0(_20065,_20071,_20391,_20367,_20429),
    !,
    {_19987=date(_20071,_20065,_20053)},
    {type(date,_19995)},
    !,
    accept(_20507,_20429,_20139).

monthday(_19981,_19983,[monthday,_20079,_20137,_20185,!],_20045,_20049) --> 
    month(_19981,_20079,_20045,_20113),
    point0(_20137,_20113,_20167),
    dayno(_19983,_20185,_20167,_20049),
    !.

monthday(_19981,_19983,[monthday,_20091,_20149,_20197,_20245,_20303,!],_20057,_20061) --> 
    dayno(_19983,_20091,_20057,_20125),
    point0(_20149,_20125,_20179),
    ofslash0(_20197,_20179,_20227),
    month(_19981,_20245,_20227,_20279),
    point0(_20303,_20279,_20061),
    !.

dayno(_19981,[dayno,_20079,{}],_20051,_20055) --> 
    w(nb(_19981,_20013),_20079,_20051,_20055),
    {_19981>0,_19981=<31}.

monthnumber(_19981,[monthnumber,_20079,{}],_20051,_20055) --> 
    number(_19981:_20013,_20079,_20051,_20055),
    {_19981>0,_19981=<12}.

month(_19981,[month,_20069,{}],_20041,_20045) --> 
    w(name(_19995,n,_20009),_20069,_20041,_20045),
    {monthnumber(_19995,_19981)}.

day(_19981,[day,_20069,{}],_20041,_20045) --> 
    w(noun(_19981,_20005,_20007,_20009),_20069,_20041,_20045),
    {dayname(_19981)}.

xyear0(_19981,_19983,[xyear0,_20075,_20123,!,_20191],_20041,_20045) --> 
    aar0(_20075,_20041,_20105),
    year(_19983,_20123,_20105,_20157),
    !,
    accept(_20191,_20157,_20045).

xyear0(_19981,_19983,[xyear0,{},{}],_20045,_20045) --> 
    {this_year(_19999)},
    {adjust_year(_19981,_19999,_19983)}.

aar0([aar0,_20047,!],_20025,_20029) --> 
    w(noun(year,_19993,_19995,n),_20047,_20025,_20029),
    !.

aar0([aar0,[]],_20005,_20005) --> 
    [].

year0(_19981,[year0,_20057,!,_20125],_20029,_20033) --> 
    year(_19981,_20057,_20029,_20091),
    !,
    accept(_20125,_20091,_20033).

year0(_19981,[year0,{}],_20021,_20021) --> 
    {this_year(_19981)}.

year(_19981,[year,_20101,{},{}],_20073,_20077) --> 
    number(_20009:_20019,_20101,_20073,_20077),
    {_20009>=90,_20009=<99},
    {_19981 is 1900+_20009}.

year(_19981,[year,_20091,{},!,_20173],_20063,_20067) --> 
    number(_19981:_20009,_20091,_20063,_20125),
    {_19981>=1900,_19981=<9999},
    !,
    accept(_20173,_20125,_20067).

timeq12(_19987:_19995,_19987 isa clock,[timeq12,_20091,!,{}],_20057,_20061) --> 
    time12(_19987,_20091,_20057,_20061),
    !,
    {type(clock,_19995)}.

kl0([kl0,lit(kl),!],_20015,_20019) --> 
    cc(kl,_20015,_20019),
    !.

kl0([kl0,[]],_20005,_20005) --> 
    [].

nameq1(_19981,_19983,[nameq1,_20059],_20025,_20029) --> 
    date(_19981,_19983,_20059,_20025,_20029).

nameq1(_19987:_19995,_19987 isa _19989,[nameq1,_20149,{},{},{}],_20115,_20119) --> 
    w(name(_19987,_20033,_19989),_20149,_20115,_20119),
    {_20033\==gen},
    {_19989==unkn->user:value(unknownflag,true);true},
    {type(_19989,_19995)}.

nameq1(quote(_19999):_19995,quote(_19999)isa thing,[nameq1,_20103,!,{}],_20069,_20073) --> 
    w(quote(_19999),_20103,_20069,_20073),
    !,
    {type(sentence,_19995)}.

nameq1(_19987:clock,_19987 isa clock,[nameq1,_20069],_20035,_20039) --> 
    time12(_19987,_20069,_20035,_20039).

nameq1(_19981,_19983,[nameq1,_20059],_20025,_20029) --> 
    timeq12(_19981,_19983,_20059,_20025,_20029).

nameq1(_19987:lastname,_19987 isa lastname,[nameq1,{},_20175,_20233,_20291,!,_20359],_20121,_20125) --> 
    {user:value(teleflag,true)},
    look_ahead(w(name(_19987,n,firstname)),_20175,_20121,_20209),
    w(name(_19987,n,lastname),_20233,_20209,_20267),
    not_look_ahead(w(name(_20081,n,lastname)),_20291,_20267,_20325),
    !,
    accept(_20359,_20325,_20125).

nameq1(_19987:firstname,_19987 isa firstname,[nameq1,{},_20175,_20233,_20291,!,_20359],_20121,_20125) --> 
    {user:value(teleflag,true)},
    look_ahead(w(name(_19987,n,lastname)),_20175,_20121,_20209),
    w(name(_19987,n,firstname),_20233,_20209,_20267),
    look_ahead(w(name(_20081,n,lastame)),_20291,_20267,_20325),
    !,
    accept(_20359,_20325,_20125).

nameq2(_19987:_19995,_19987 isa number,[nameq2,_20075],_20041,_20045) --> 
    number(_19987:_19995,_20075,_20041,_20045).

nameq2(_19987:_19995,_19987 isa clock,[nameq2,{},_20133,{}],_20085,_20089) --> 
    {type(clock,_19995)},
    number(_19987:_20043,_20133,_20085,_20089),
    {_19987>=100,_19987=<2500}.

time12(_19981,[time12,_20045],_20017,_20021) --> 
    time2(_19981,_20045,_20017,_20021).

time12(_19981,[time12,_20045],_20017,_20021) --> 
    time1(_19981,_20045,_20017,_20021).

time1(_19981,[time1,lit(one),!,_20089],_20029,_20033) --> 
    cc(one,_20029,_20077),
    !,
    reject(_20089,_20077,_20033).

time1(_19981,[time1,_20077,_20135,!,_20203],_20049,_20053) --> 
    num(_20003,_20077,_20049,_20111),
    w(noun(time_count,plu,_20015,_20017),_20135,_20111,_20169),
    !,
    reject(_20203,_20169,_20053).

time1(_19981,[time1,_20115,{},_20187,_20245,!,_20303],_20087,_20091) --> 
    num(_19981,_20115,_20087,_20149),
    {_19981>=100,_19981<2500},
    not_look_ahead(w(noun(hour,plu,u,_20055)),_20187,_20149,_20221),
    clock0(_20245,_20221,_20275),
    !,
    accept(_20303,_20275,_20091).

time1(_19981,[time1,_20131,{},_20203,_20261,!,{}],_20103,_20107) --> 
    num(_20025,_20131,_20103,_20165),
    {_20025<25,_20025>=1},
    not_look_ahead(w(noun(hour,plu,u,_20071)),_20203,_20165,_20237),
    clock0(_20261,_20237,_20107),
    !,
    {_19981 is _20025*100}.

time2(_19981,[time2,_20057,_20115],_20029,_20033) --> 
    homi(_19991,_20057,_20029,_20091),
    ampm(_19991,_19981,_20115,_20091,_20033).

time2(_19981,[time2,_20073,{},_20145],_20045,_20049) --> 
    time1(_19997,_20073,_20045,_20107),
    {_19997<2500},
    ampm(_19997,_19981,_20145,_20107,_20049).

time2(_19981,[time2,_20099,_20157,_20215,{}],_20071,_20075) --> 
    wx(adj2(nil,half),_20099,_20071,_20133),
    prep1(past,_20157,_20133,_20191),
    hours(_20033,_20215,_20191,_20075),
    {_19981 is _20033*100+30}.

time2(_19981,[time2,_20089,_20147,_20205,{}],_20061,_20065) --> 
    wx(adj2(nil,half),_20089,_20061,_20123),
    prep1(past,_20147,_20123,_20181),
    time12(_20007,_20205,_20181,_20065),
    {addtotime(_20007,30,_19981)}.

homi(_19981,[homi,_20095,_20153,_20201,{},!],_20067,_20071) --> 
    hours(_20009,_20095,_20067,_20129),
    hcolon(_20153,_20129,_20183),
    minutes(_20013,_20201,_20183,_20071),
    {_19981 is _20009*100+_20013},
    !.

homi(_19981,[homi,_20083,_20141,{}],_20055,_20059) --> 
    hours(_20013,_20083,_20055,_20117),
    minutes(_20009,_20141,_20117,_20059),
    {_19981 is _20013*100+_20009}.

ampm(_19981,_19983,[ampm,_20105,!,{}],_20071,_20075) --> 
    pmtime(_20105,_20071,_20075),
    !,
    {_19981>1200->_19983 is _19981;_19983 is _19981+1200}.

ampm(_19981,_19981,[ampm,_20053],_20019,_20023) --> 
    amtime(_20053,_20019,_20023).

ampm(_19981,_19981,[ampm,_20053],_20019,_20023) --> 
    clock0(_20053,_20019,_20023).

hours(_19981,[hours,_20067,{}],_20039,_20043) --> 
    w(nb(_19981,num),_20067,_20039,_20043),
    {_19981<25}.

minutes(_19981,[minutes,_20067,{}],_20039,_20043) --> 
    w(nb(_19981,num),_20067,_20039,_20043),
    {_19981<60}.

nameq3(_19987:_19995,_19987 isa number,[nameq3,_20081,_20129],_20047,_20051) --> 
    only0(_20081,_20047,_20111),
    number(_19987:_19995,_20129,_20111,_20051).

number(_19985:_19987,[number,_20067,{}],_20039,_20043) --> 
    num(_19985,_20067,_20039,_20043),
    {type(number,_19987)}.

number(_19985:_19987,[number,lit(a),_20145,{},!,{}],_20095,_20099) --> 
    cc(a,_20095,_20143),
    num(_19985,_20145,_20143,_20099),
    {_19985=100;_19985=1000;_19985=1000000},
    !,
    {type(number,_19987)}.

intrans_verb(be1,_19983,_19985,_19987,pres,fin,[intrans_verb,_20127,_20175,{}],_20069,_20073) --> 
    hasto0(_20127,_20069,_20157),
    be1(_20175,_20157,_20073),
    {iv_template(be1,_19983,_19985,_19987)}.

intrans_verb(_19981,_19983,_19985,_19987,_19989,_19991,[intrans_verb,_20137,_20185,{}],_20079,_20083) --> 
    hasto0(_20137,_20079,_20167),
    lexv(iv,_19981,_19989,_19991,_20185,_20167,_20083),
    {iv_template(_19981,_19983,_19985,_19987)}.

intrans_verb(_19981,_19983,_19985,_19987,past,fin,[intrans_verb,_20137,_20185,{}],_20079,_20083) --> 
    has(_20137,_20079,_20167),
    lexv(iv,_19981,past,part,_20185,_20167,_20083),
    {iv_template(_19981,_19983,_19985,_19987)}.

trans_verbs(_19981,_19983,_19985,_19987,_19989,[trans_verbs,_20125,_20243],_20073,_20077) --> 
    trans_verb(_19999,_19983,_19985,_19987,_20021,_20023,_20025,_20125,_20073,_20183),
    trans_verbs0(_19999,_19981,_19983,_19985,_19987,_19989,_20243,_20183,_20077).

trans_verbs0(_19981,_19983,_19985,_19987,_19989,_19991,[trans_verbs0,_20153,_20211,_20329],_20095,_20099) --> 
    andor(and,_20153,_20095,_20187),
    trans_verb(_20025,_19985,_19987,_19989,_20033,_20035,_20037,_20211,_20187,_20269),
    trans_verbs0((_19981,_20025),_19983,_19985,_19987,_19989,_19991,_20329,_20269,_20099).

trans_verbs0(_19981,_19981,_20001:_20003,_20007:_20009,_19989,_19981/_20001/_20007/_19989,[trans_verbs0,[]],_20073,_20073) --> 
    [].

trans_verb(equal,_19983,_19985,_19987,_19989,pres,fin,[trans_verb,_20141,_20189,{}],_20077,_20081) --> 
    hasto0(_20141,_20077,_20171),
    be(_20189,_20171,_20081),
    {tv_template(equal,_19983,_19985,_19987,_19989)}.

trans_verb(_19981,_19983,_19985,_19987,_19989,_19991,_19993,[trans_verb,_20151,_20199,{}],_20087,_20091) --> 
    hasto0(_20151,_20087,_20181),
    lexv(tv,_19981,_19991,_19993,_20199,_20181,_20091),
    {tv_template(_19981,_19983,_19985,_19987,_19989)}.

that_verb(_19981,_19983,_19985,_19987,_19989,_19991,[that_verb,_20141,_20189,{}],_20083,_20087) --> 
    hasto0(_20141,_20083,_20171),
    that_v(_19981,_19989,_19991,_20189,_20171,_20087),
    {rv_template(id,_19981,_20015,_19983,_19985,_19987,_20023)}.

that_v(_19981,_19983,_19985,[that_v,_20075],_20035,_20039) --> 
    lexv(rv,_19981,_19983,_19985,_20075,_20035,_20039).

lexv(iv,be1,pres,fin,[lexv,_20077],_20031,_20035) --> 
    be(_20077,_20031,_20035).

lexv(tv,be_named,pres,fin,[lexv,_20105,_20153,!,_20251],_20059,_20063) --> 
    be(_20105,_20059,_20135),
    lexv(_20009,call,past,part,_20153,_20135,_20199),
    !,
    accept(_20251,_20199,_20063).

lexv(tv,make,_19985,_19987,[lexv,_20107,_20165,!,_20223],_20061,_20065) --> 
    w(verb(make,_19985,_19987),_20107,_20061,_20141),
    up0(_20165,_20141,_20195),
    !,
    accept(_20223,_20195,_20065).

lexv(_19981,_19983,_19985,_19987,[lexv,_20133,_20191,{},!,_20303],_20087,_20091) --> 
    w(verb(have,_19985,_19987),_20133,_20087,_20167),
    lexv(_19981,_19983,past,part,_20191,_20167,_20237),
    {verbtype(_19983,_19981)},
    !,
    accept(_20303,_20237,_20091).

lexv(_19981,_19983,_19985,_19987,[lexv,_20105,{}],_20059,_20063) --> 
    w(verb(_19983,_19985,_19987),_20105,_20059,_20063),
    {verbtype(_19983,_19981)}.

be_modal(_19981,[be_modal,_20051,_20099],_20023,_20027) --> 
    be(_20051,_20023,_20081),
    modal(_19981,_20099,_20081,_20027).

be_modal(seem,[be_modal,_20053],_20025,_20029) --> 
    w(verb(seem,_19991,fin),_20053,_20025,_20029).

modal(_19981,[modal,_20059,_20137],_20031,_20035) --> 
    that_v(_19981,past,part,_20059,_20031,_20101),
    tobetrue(_19991,_20137,_20101,_20035).

modal(_19981,[modal,_20049],_20021,_20025) --> 
    that_v(_19981,_19987,fin,_20049,_20021,_20025).

modal(think,[modal,_20051],_20023,_20027) --> 
    wx(adj2(nil,possible),_20051,_20023,_20027).

tobetrue(_19981,[tobetrue,_20051,_20099],_20023,_20027) --> 
    to(_20051,_20023,_20081),
    be_truefalse(_19981,_20099,_20081,_20027).

tobetrue(id,[tobetrue,[]],_20013,_20013) --> 
    [].

pvimodal(_19981,_19983,[pvimodal,_20097,{},{}],_20063,_20067) --> 
    w(verb(_19981,_20015,fin),_20097,_20063,_20067),
    {_19981\==be},
    {pvi_templ(_19981,_19983)}.

xpreadjs0(true,[xpreadjs0,_20057],_20029,_20033) --> 
    look_ahead(w(name(_19993,_19995,_19997)),_20057,_20029,_20033).

xpreadjs0(_19981,[xpreadjs0,_20045],_20017,_20021) --> 
    preadjs0(_19981,_20045,_20017,_20021).

preadjs0((_19985,_19987),[preadjs0,_20061,_20119],_20033,_20037) --> 
    preadj1(_19985,_20061,_20033,_20095),
    preadjs0(_19987,_20119,_20095,_20037).

preadjs0(true,[preadjs0,[]],_20013,_20013) --> 
    [].

preadj1(_19985/_19987,[preadj1,_20109,_20167,{},{},!],_20081,_20085) --> 
    adverb0(_20015,_20109,_20081,_20143),
    wx(adj2(_19985,_19987),_20167,_20143,_20085),
    {\+noun(_19987)},
    {\+post_adjective(_19987)},
    !.

postadj1(_19981,_19983,_19985,_19987,[postadj1,_20129,_20177,!,_20275,_20323],_20083,_20087) --> 
    so0(_20129,_20083,_20159),
    adj12(_19981,_19983,_19985,_19987,_20177,_20159,_20223),
    !,
    accept(_20275,_20223,_20305),
    not_look_ahead(w(noun(_20023,_20025,_20027,_20029)),_20323,_20305,_20087).

adjs10(_19981,_19983,_19985,_19985 and _19993,[adjs10,_20109,_20197],_20063,_20067) --> 
    adj1(_20013,_19981,_19983,_20007,_20109,_20063,_20155),
    adjs10a(_19981,_19983,_20007,_19993,_20197,_20155,_20067).

adjs10(_19981,_19983,_19985,_19985,[adjs10,[]],_20031,_20031) --> 
    [].

adjs10a(_19981,_19983,_19985,_19985 and _19993,[adjs10a,_20115,_20163,_20251],_20069,_20073) --> 
    and0(_20115,_20069,_20145),
    adj1(_20019,_19981,_19983,_20013,_20163,_20145,_20209),
    adjs10a(_19981,_19983,_20013,_19993,_20251,_20209,_20073).

adjs10a(_19981,_19983,_19985,_19985,[adjs10a,[]],_20031,_20031) --> 
    [].

adj12(_19981,_19983,_19985,_19987,[adj12,_20087],_20041,_20045) --> 
    adj1(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

adj12(_19981,_19983,_19985,_19987,[adj12,_20087],_20041,_20045) --> 
    adj2(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

adj12(_19981,_19983,_19985,_19987,[adj12,_20087],_20041,_20045) --> 
    adj3(_19981,_19983,_19985,_19987,_20087,_20041,_20045).

adj1(previous,_19983,_19985,_19987,[adj1,lit(next),_20147,_20195,{}],_20079,_20083) --> 
    cc(next,_20079,_20145),
    to(_20147,_20145,_20177),
    wx(adj2(nil,last),_20195,_20177,_20083),
    {adj_template(nil,previous,_19983,_19985,_19987)}.

adj1(_19981,_19983,_19985,_19987,[adj1,_20109,{}],_20063,_20067) --> 
    wx(adj2(nil,_19981),_20109,_20063,_20067),
    {adj_template(nil,_19981,_19983,_19985,_19987)}.

adj2(_19981,_19983,_19985,_19987,[adj2,_20109,{}],_20063,_20067) --> 
    w(name(_19981,n,_20019),_20109,_20063,_20067),
    {adjname_template(_19981,_19983,_19985,_19987)}.

adj3(_19981,_19983,_19985,_19987,[adj3,_20119,_20177,{}],_20073,_20077) --> 
    adverb1(_20019,_20119,_20073,_20153),
    wx(adj2(nil,_19981),_20177,_20153,_20077),
    {adj_template(nil,_19981,_19983,_19985,_19987)}.

adverb1(_19981,[adverb1,lit(_19981),{}],_20033,_20037) --> 
    cc(_19981,_20033,_20037),
    {gradv_templ(_19981,_19997)}.

prep0(_19981,[prep0,_20045],_20017,_20021) --> 
    prep(_19981,_20045,_20017,_20021).

prep(_19981,[prep,_20045],_20017,_20021) --> 
    prep2(_19981,_20045,_20017,_20021).

prep(_19981,[prep,_20045],_20017,_20021) --> 
    prep1(_19981,_20045,_20017,_20021).

prep1(_19981,[prep1,_20049],_20021,_20025) --> 
    w(prep(_19981),_20049,_20021,_20025).

atom(_19981,[atom,_20069,{}],_20041,_20045) --> 
    w(name(_19995,_20007,_20009),_20069,_20041,_20045),
    {atom_templ(_19995,_19981)}.

atomlist(_19981,[atomlist,_20073,_20131,_20189],_20045,_20049) --> 
    atom1(_20003,_20073,_20045,_20107),
    atom1(_20007,_20131,_20107,_20165),
    atoms0(_20003-_20007,_19981,_20189,_20165,_20049).

atom1(_19981,[atom1,_20069,{}],_20041,_20045) --> 
    w(name(_19981,n,_19995),_20069,_20041,_20045),
    {_19995\==unkn}.

atoms0(_19981,_19983,[atoms0,_20075,_20133],_20041,_20045) --> 
    atom1(_19999,_20075,_20041,_20109),
    atoms0(_19981-_19999,_19983,_20133,_20109,_20045).

atoms0(_19981,_19981,[atoms0,[]],_20019,_20019) --> 
    [].

newatom(_19981,[newatom,_20069,{}],_20041,_20045) --> 
    w(name(_19995,_20007,_20009),_20069,_20041,_20045),
    {atom_templ(_19995,_19981)}.

newatomid(_19981,[newatomid,_20053],_20025,_20029) --> 
    w(name(_19981,_19991,_19993),_20053,_20025,_20029).

subjunction(after,time,in,[subjunction,_20089,_20147],_20049,_20053) --> 
    prep(after,_20089,_20049,_20123),
    not_look_ahead(w(nb(_20003,_20005)),_20147,_20123,_20053).

subjunction(before,time,in,[subjunction,_20089,_20147],_20049,_20053) --> 
    prep(before,_20089,_20049,_20123),
    not_look_ahead(w(nb(_20003,_20005)),_20147,_20123,_20053).

subjunction(during,time,in,[subjunction,_20065],_20025,_20029) --> 
    while(_20065,_20025,_20029).

subjunction(in,time,in,[subjunction,_20065],_20025,_20029) --> 
    when(_20065,_20025,_20029).

subjunction(in,place,in,[subjunction,_20065],_20025,_20029) --> 
    where(_20065,_20025,_20029).

subjunction(in,time,ni,[subjunction,_20069],_20029,_20033) --> 
    prep(without,_20069,_20029,_20033).

subjunction(until,time,in,[subjunction,_20065],_20025,_20029) --> 
    until(_20065,_20025,_20029).

subjunction(so_that,coevent,nil,[subjunction,_20065],_20025,_20029) --> 
    so_that(_20065,_20025,_20029).

subjunction(nil,coevent,because_of,[subjunction,_20065],_20025,_20029) --> 
    because(_20065,_20025,_20029).

subjunction(because_of,coevent,nil,[subjunction,_20065],_20025,_20029) --> 
    if1(_20065,_20025,_20029).

qtrailer([qtrailer,_20037],_20015,_20019) --> 
    wx(adj2(nil,next),_20037,_20015,_20019).

a0([a0,_20027],_20005,_20009) --> 
    a(_20027,_20005,_20009).

a0([a0,[]],_20005,_20005) --> 
    [].

a([a,lit(a)],_20009,_20013) --> 
    cc(a,_20009,_20013).

a([a,lit(an)],_20009,_20013) --> 
    cc(an,_20009,_20013).

art([art,lit(a)],_20009,_20013) --> 
    cc(a,_20009,_20013).

art([art,lit(the)],_20009,_20013) --> 
    cc(the,_20009,_20013).

art([art,lit(an)],_20009,_20013) --> 
    cc(an,_20009,_20013).

art([art,lit(any)],_20009,_20013) --> 
    cc(any,_20009,_20013).

art([art,lit(another)],_20009,_20013) --> 
    cc(another,_20009,_20013).

art([art,lit(one),lit(or),lit(more)],_20029,_20033) --> 
    cc(one,_20029,_20071),
    cc(or,_20071,_20093),
    cc(more,_20093,_20033).

art([art,lit(some)],_20009,_20013) --> 
    cc(some,_20009,_20013).

art([art,_20033,_20081],_20011,_20015) --> 
    all(_20033,_20011,_20063),
    ofthe0(_20081,_20063,_20015).

art([art,lit(this),_20077],_20033,_20037) --> 
    cc(this,_20033,_20075),
    look_ahead(w(noun(_19995,_19997,_19999,_20001)),_20077,_20075,_20037).

all([all,lit(all)],_20009,_20013) --> 
    cc(all,_20009,_20013).

all([all,_20033,_20081],_20011,_20015) --> 
    the(_20033,_20011,_20063),
    set(_20081,_20063,_20015).

and0([and0,_20033,_20081],_20011,_20015) --> 
    and1(_20033,_20011,_20063),
    then0(_20081,_20063,_20015).

and0([and0,[]],_20005,_20005) --> 
    [].

and1([and1,lit(and)],_20009,_20013) --> 
    cc(and,_20009,_20013).

and1([and1,lit(but)],_20009,_20013) --> 
    cc(but,_20009,_20013).

and2([and2,lit(but)],_20009,_20013) --> 
    cc(but,_20009,_20013).

andor(butnot,[andor,_20063,lit(not),!,_20143],_20035,_20039) --> 
    and1(_20063,_20035,_20093),
    cc(not,_20093,_20131),
    !,
    accept(_20143,_20131,_20039).

andor(and,[andor,_20047,_20095],_20019,_20023) --> 
    and1(_20047,_20019,_20077),
    do0(_20095,_20077,_20023).

andor(or,[andor,lit(or)],_20017,_20021) --> 
    cc(or,_20017,_20021).

amtime([amtime,_20047,!],_20025,_20029) --> 
    w(noun(noon,_19993,_19995,_19997),_20047,_20025,_20029),
    !.

amtime([amtime,lit(am),_20059],_20015,_20019) --> 
    cc(am,_20015,_20057),
    point0(_20059,_20057,_20019).

amtime([amtime,lit(a),_20075,lit(m),_20145],_20031,_20035) --> 
    cc(a,_20031,_20073),
    point0(_20075,_20073,_20105),
    cc(m,_20105,_20143),
    point0(_20145,_20143,_20035).

anorder(a,_19983,[anorder,_20069,_20117],_20035,_20039) --> 
    a(_20069,_20035,_20099),
    w(nb(_19983,ord),_20117,_20099,_20039).

anorder(the,_19983,[anorder,_20069,_20117],_20035,_20039) --> 
    the(_20069,_20035,_20099),
    w(nb(_19983,ord),_20117,_20099,_20039).

another([another,lit(another)],_20009,_20013) --> 
    cc(another,_20009,_20013).

another([another,lit(other)],_20009,_20013) --> 
    cc(other,_20009,_20013).

as([as,lit(as)],_20009,_20013) --> 
    cc(as,_20009,_20013).

as0([as0,_20027],_20005,_20009) --> 
    as(_20027,_20005,_20009).

as0([as0,[]],_20005,_20005) --> 
    [].

at([at,_20031],_20009,_20013) --> 
    prep(at,_20031,_20009,_20013).

athe([athe,_20027],_20005,_20009) --> 
    the(_20027,_20005,_20009).

athe([athe,_20027],_20005,_20009) --> 
    a(_20027,_20005,_20009).

athe0([athe0,_20027],_20005,_20009) --> 
    athe(_20027,_20005,_20009).

athe0([athe0,[]],_20005,_20005) --> 
    [].

be([be,_20039],_20017,_20021) --> 
    w(verb(be,_19987,fin),_20039,_20017,_20021).

be(_19981,[be,_20069,_20117,_20175,_20223,_20271],_20041,_20045) --> 
    do(_20069,_20041,_20099),
    negation0(_19981,_20117,_20099,_20151),
    has(_20175,_20151,_20205),
    to(_20223,_20205,_20253),
    be(_20271,_20253,_20045).

be(_19981,[be,_20057,_20105,_20163],_20029,_20033) --> 
    modal(_20057,_20029,_20087),
    negation0(_19981,_20105,_20087,_20139),
    be(_20163,_20139,_20033).

be(_19981,[be,_20051,_20099],_20023,_20027) --> 
    be(_20051,_20023,_20081),
    negation0(_19981,_20099,_20081,_20027).

be(_19981,[be,_20061,_20109,lit(been)],_20033,_20037) --> 
    has(_20061,_20033,_20091),
    negation0(_19981,_20109,_20091,_20143),
    cc(been,_20143,_20037).

be_truefalse(_19981,[be_truefalse,_20051,_20099],_20023,_20027) --> 
    be(_20051,_20023,_20081),
    truefalse(_19981,_20099,_20081,_20027).

be_truefalse(not,[be_truefalse,_20075,_20133,_20181,lit(true)],_20047,_20051) --> 
    w(verb(reject,_20013,fin),_20075,_20047,_20109),
    infinitive(_20133,_20109,_20163),
    be(_20181,_20163,_20211),
    cc(true,_20211,_20051).

because([because,lit(because)],_20009,_20013) --> 
    cc(because,_20009,_20013).

both0([both0,lit(both)],_20009,_20013) --> 
    cc(both,_20009,_20013).

both0([both0,[]],_20005,_20005) --> 
    [].

by([by,lit(by)],_20009,_20013) --> 
    cc(by,_20009,_20013).

clock0([clock0,_20039,!,_20097],_20017,_20021) --> 
    clock(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

clock0([clock0,[]],_20005,_20005) --> 
    [].

clock([clock,lit(o),lit(clock)],_20019,_20023) --> 
    cc(o,_20019,_20061),
    cc(clock,_20061,_20023).

clock([clock,lit(clock)],_20009,_20013) --> 
    cc(clock,_20009,_20013).

clock([clock,lit(oclock)],_20009,_20013) --> 
    cc(oclock,_20009,_20013).

clock([clock,lit(h)],_20009,_20013) --> 
    cc(h,_20009,_20013).

colon0([colon0,_20027],_20005,_20009) --> 
    colon(_20027,_20005,_20009).

colon0([colon0,[]],_20005,_20005) --> 
    [].

hcolon([hcolon,lit(h)],_20009,_20013) --> 
    cc(h,_20009,_20013).

hcolon([hcolon,_20027],_20005,_20009) --> 
    colon(_20027,_20005,_20009).

colon([colon,lit(:)],_20009,_20013) --> 
    cc(:,_20009,_20013).

colon([colon,lit('.')],_20009,_20013) --> 
    cc('.',_20009,_20013).

comparator1(eq,[comparator1,lit(like)],_20017,_20021) --> 
    cc(like,_20017,_20021).

comparator1(eq,[comparator1,lit(equal),_20073],_20023,_20027) --> 
    cc(equal,_20023,_20071),
    to0(_20073,_20071,_20027).

comparator1(eq,[comparator1,lit(like)],_20017,_20021) --> 
    cc(like,_20017,_20021).

comparator1(eq,[comparator1,_20045],_20017,_20021) --> 
    prep1(about,_20045,_20017,_20021).

comparator1(ge,[comparator1,_20073,_20121,lit(or),lit(equal),_20213],_20045,_20049) --> 
    greater(_20073,_20045,_20103),
    than0(_20121,_20103,_20151),
    cc(or,_20151,_20189),
    cc(equal,_20189,_20211),
    to0(_20213,_20211,_20049).

comparator1(ge,[comparator1,lit(not),_20083,lit(than)],_20033,_20037) --> 
    cc(not,_20033,_20081),
    less(_20083,_20081,_20113),
    cc(than,_20113,_20037).

comparator1(ge,[comparator1,_20051,lit(least)],_20023,_20027) --> 
    at(_20051,_20023,_20081),
    cc(least,_20081,_20027).

comparator1(gt,[comparator1,_20051,lit(than)],_20023,_20027) --> 
    greater(_20051,_20023,_20081),
    cc(than,_20081,_20027).

comparator1(gt,[comparator1,_20045],_20017,_20021) --> 
    prep1(over,_20045,_20017,_20021).

comparator1(le,[comparator1,_20073,_20121,lit(or),lit(equal),_20213],_20045,_20049) --> 
    less(_20073,_20045,_20103),
    than0(_20121,_20103,_20151),
    cc(or,_20151,_20189),
    cc(equal,_20189,_20211),
    to0(_20213,_20211,_20049).

comparator1(le,[comparator1,lit(no),lit(more),lit(than)],_20037,_20041) --> 
    cc(no,_20037,_20085),
    cc(more,_20085,_20107),
    cc(than,_20107,_20041).

comparator1(le,[comparator1,lit(not),_20083,lit(than)],_20033,_20037) --> 
    cc(not,_20033,_20081),
    greater(_20083,_20081,_20113),
    cc(than,_20113,_20037).

comparator1(le,[comparator1,_20047,_20095],_20019,_20023) --> 
    at(_20047,_20019,_20077),
    most(_20095,_20077,_20023).

comparator1(lt,[comparator1,_20051,lit(than)],_20023,_20027) --> 
    less(_20051,_20023,_20081),
    cc(than,_20081,_20027).

comparator1(ne,[comparator1,lit(different),lit(from)],_20027,_20031) --> 
    cc(different,_20027,_20075),
    cc(from,_20075,_20031).

comparator1(ne,[comparator1,lit(except)],_20017,_20021) --> 
    cc(except,_20017,_20021).

comparator1(ne,[comparator1,_20047,_20095],_20019,_20023) --> 
    unequal(_20047,_20019,_20077),
    to0(_20095,_20077,_20023).

comparator2(gt,speed,[comparator2,lit(faster),lit(than)],_20033,_20037) --> 
    cc(faster,_20033,_20087),
    cc(than,_20087,_20037).

comparator2(gt,age,[comparator2,_20063,lit(than)],_20029,_20033) --> 
    older(_20063,_20029,_20093),
    cc(than,_20093,_20033).

comparator2(lt,age,[comparator2,_20063,lit(than)],_20029,_20033) --> 
    younger(_20063,_20029,_20093),
    cc(than,_20093,_20033).

comparator2(gt,size,[comparator2,_20063,lit(than)],_20029,_20033) --> 
    greater(_20063,_20029,_20093),
    cc(than,_20093,_20033).

comparator2(lt,size,[comparator2,lit(smaller),lit(than)],_20033,_20037) --> 
    cc(smaller,_20033,_20087),
    cc(than,_20087,_20037).

comparator2(gt,complexity,[comparator2,lit(more),lit(complex),lit(than)],_20043,_20047) --> 
    cc(more,_20043,_20097),
    cc(complex,_20097,_20119),
    cc(than,_20119,_20047).

comparator2(lt,complexity,[comparator2,lit(simpler),lit(than)],_20033,_20037) --> 
    cc(simpler,_20033,_20087),
    cc(than,_20087,_20037).

comparator2(gt,latitude,[comparator2,lit(north),_20085],_20029,_20033) --> 
    cc(north,_20029,_20083),
    of(_20085,_20083,_20033).

comparator2(lt,latitude,[comparator2,lit(south),_20085],_20029,_20033) --> 
    cc(south,_20029,_20083),
    of(_20085,_20083,_20033).

comparator2(gt,longitude,[comparator2,lit(west),_20085],_20029,_20033) --> 
    cc(west,_20029,_20083),
    of(_20085,_20083,_20033).

comparator2(lt,longitude,[comparator2,lit(east),_20085],_20029,_20033) --> 
    cc(east,_20029,_20083),
    of(_20085,_20083,_20033).

superlative(_19981,_19983,[superlative,_20059],_20025,_20029) --> 
    superlat(_19981,_19983,_20059,_20025,_20029).

superlative(_19981,_19983,[superlative,_20079,_20237],_20045,_20049) --> 
    pushstack(free,quant0(_19993),nil,_20045,_20177),superlat(_19981,_19983,_20079,_20177,_20207),
    quant0(_19993,_20237,_20207,_20049).

superlat(max(_19987),size,[superlat,_20067,_20125],_20033,_20037) --> 
    quant0(_19987,_20067,_20033,_20101),
    greatest(_20125,_20101,_20037).

superlat(max(_19987),latitude,[superlat,_20077,_20135,lit(northern)],_20043,_20047) --> 
    quant0(_19987,_20077,_20043,_20111),
    most(_20135,_20111,_20165),
    cc(northern,_20165,_20047).

superlat(max(_19987),longitude,[superlat,_20077,_20135,lit(western)],_20043,_20047) --> 
    quant0(_19987,_20077,_20043,_20111),
    most(_20135,_20111,_20165),
    cc(western,_20165,_20047).

superlat(min(_19987),size,[superlat,_20071,lit(smallest)],_20037,_20041) --> 
    quant0(_19987,_20071,_20037,_20105),
    cc(smallest,_20105,_20041).

superlat(min(_19987),latitude,[superlat,_20077,_20135,lit(southern)],_20043,_20047) --> 
    quant0(_19987,_20077,_20043,_20111),
    most(_20135,_20111,_20165),
    cc(southern,_20165,_20047).

superlat(min(_19987),longitude,[superlat,_20077,_20135,lit(eastern)],_20043,_20047) --> 
    quant0(_19987,_20077,_20043,_20111),
    most(_20135,_20111,_20165),
    cc(eastern,_20165,_20047).

dendagen0(_19981,[dendagen0,_20063,_20111,!,_20179],_20035,_20039) --> 
    on0(_20063,_20035,_20093),
    dendagen(_19981,_20111,_20093,_20145),
    !,
    accept(_20179,_20145,_20039).

dendagen0(nil,[dendagen0,[]],_20013,_20013) --> 
    [].

dendagen(_19981,[dendagen,_20057,!,_20125],_20029,_20033) --> 
    day(_19981,_20057,_20029,_20091),
    !,
    accept(_20125,_20091,_20033).

dendagen(nil,[dendagen,[],!,_20073],_20025,_20029) --> 
    [],
    !,
    accept(_20073,_20025,_20029).

do0([do0,_20027],_20005,_20009) --> 
    do(_20027,_20005,_20009).

do0([do0,[]],_20005,_20005) --> 
    [].

do0(_19981,_19983,_19985,[do0,lit(am),{},!,_20147],_20061,_20065) --> 
    cc(am,_20061,_20121),
    {\+type(self,_19981)},
    !,
    reject(_20147,_20121,_20065).

do0(_19981,not,id,[do0,_20075,lit(not)],_20035,_20039) --> 
    has(_20075,_20035,_20105),
    cc(not,_20105,_20039).

do0(_19981,not,id,[do0,_20081,!,_20149],_20041,_20045) --> 
    do(not,_20081,_20041,_20115),
    !,
    accept(_20149,_20115,_20045).

do0(_19981,_19983,id,[do0,_20081,!,_20139],_20041,_20045) --> 
    do(_20081,_20041,_20111),
    !,
    negation0(_19983,_20139,_20111,_20045).

do0(_19981,_19983,_19983,[do0,[]],_20025,_20025) --> 
    [].

do0(_19981,not,id,[do0,_20075,_20133],_20035,_20039) --> 
    negation0(not,_20075,_20035,_20109),
    do0(_20133,_20109,_20039).

do(not,[do,lit(dont)],_20017,_20021) --> 
    cc(dont,_20017,_20021).

do(not,[do,lit(cannot),!,_20089],_20029,_20033) --> 
    cc(cannot,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

do(not,[do,lit(never),!,_20089],_20029,_20033) --> 
    cc(never,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

do(_19981,[do,_20057,_20105,_20163],_20029,_20033) --> 
    use(_20057,_20029,_20087),
    negation0(_19981,_20105,_20087,_20139),
    to(_20163,_20139,_20033).

do(_19981,[do,_20057,_20105,_20163],_20029,_20033) --> 
    do(_20057,_20029,_20087),
    negation0(_19981,_20105,_20087,_20139),
    hasto0(_20163,_20139,_20033).

do(id,[do,[]],_20013,_20013) --> 
    [].

do(_19981,[do,_20051,_20099],_20023,_20027) --> 
    has(_20051,_20023,_20081),
    negation0(_19981,_20099,_20081,_20027).

dox([dox,lit(do)],_20009,_20013) --> 
    cc(do,_20009,_20013).

dox([dox,lit(does)],_20009,_20013) --> 
    cc(does,_20009,_20013).

do([do,_20041,_20089],_20019,_20023) --> 
    dox(_20041,_20019,_20071),
    not_look_ahead([it],_20089,_20071,_20023).

do([do,lit(can)],_20009,_20013) --> 
    cc(can,_20009,_20013).

do([do,_20027],_20005,_20009) --> 
    may(_20027,_20005,_20009).

do([do,_20027],_20005,_20009) --> 
    must(_20027,_20005,_20009).

do([do,lit(will)],_20009,_20013) --> 
    cc(will,_20009,_20013).

dont(not,[dont,lit(don),lit(t)],_20027,_20031) --> 
    cc(don,_20027,_20075),
    cc(t,_20075,_20031).

dont(not,[dont,lit(dont),!,_20089],_20029,_20033) --> 
    cc(dont,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

dont(not,[dont,lit(do),lit(not),!,_20121],_20039,_20043) --> 
    cc(do,_20039,_20087),
    cc(not,_20087,_20109),
    !,
    accept(_20121,_20109,_20043).

dont(id,[dont,lit(do),!,_20089],_20029,_20033) --> 
    cc(do,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

dont(id,[dont,[]],_20013,_20013) --> 
    [].

each([each,lit(each)],_20009,_20013) --> 
    cc(each,_20009,_20013).

each([each,lit(all),_20059],_20015,_20019) --> 
    cc(all,_20015,_20057),
    the(_20059,_20057,_20019).

either0([either0,lit(either)],_20009,_20013) --> 
    cc(either,_20009,_20013).

either0([either0,[]],_20005,_20005) --> 
    [].

every([every,lit(all)],_20009,_20013) --> 
    cc(all,_20009,_20013).

every([every,lit(every)],_20009,_20013) --> 
    cc(every,_20009,_20013).

every([every,lit(each)],_20009,_20013) --> 
    cc(each,_20009,_20013).

few([few,lit(few)],_20009,_20013) --> 
    cc(few,_20009,_20013).

from([from,lit(from)],_20009,_20013) --> 
    cc(from,_20009,_20013).

great([great,_20037],_20015,_20019) --> 
    wx(adj2(nil,great),_20037,_20015,_20019).

great([great,lit(big)],_20009,_20013) --> 
    cc(big,_20009,_20013).

great([great,lit(great)],_20009,_20013) --> 
    cc(great,_20009,_20013).

great([great,lit(high)],_20009,_20013) --> 
    cc(high,_20009,_20013).

great([great,lit(large)],_20009,_20013) --> 
    cc(large,_20009,_20013).

great([great,lit(tall)],_20009,_20013) --> 
    cc(tall,_20009,_20013).

greater([greater,lit(after)],_20009,_20013) --> 
    cc(after,_20009,_20013).

greater([greater,lit(bigger)],_20009,_20013) --> 
    cc(bigger,_20009,_20013).

greater([greater,lit(greater)],_20009,_20013) --> 
    cc(greater,_20009,_20013).

greater([greater,lit(higher)],_20009,_20013) --> 
    cc(higher,_20009,_20013).

greater([greater,lit(later)],_20009,_20013) --> 
    cc(later,_20009,_20013).

greater([greater,lit(more),_20059],_20015,_20019) --> 
    cc(more,_20015,_20057),
    great(_20059,_20057,_20019).

greater([greater,lit(more)],_20009,_20013) --> 
    cc(more,_20009,_20013).

greatest([greatest,lit(greatest)],_20009,_20013) --> 
    cc(greatest,_20009,_20013).

greatest([greatest,lit(biggest)],_20009,_20013) --> 
    cc(biggest,_20009,_20013).

greatest([greatest,lit(largest)],_20009,_20013) --> 
    cc(largest,_20009,_20013).

has([has,_20039],_20017,_20021) --> 
    w(verb(have,_19987,fin),_20039,_20017,_20021).

hasto0([hasto0,_20033,_20081],_20011,_20015) --> 
    has(_20033,_20011,_20063),
    to(_20081,_20063,_20015).

hasto0([hasto0,[]],_20005,_20005) --> 
    [].

having([having,_20039],_20017,_20021) --> 
    w(verb(have,pres,part),_20039,_20017,_20021).

having([having,_20035],_20013,_20017) --> 
    w(prep(with),_20035,_20013,_20017).

how([how,lit(how)],_20009,_20013) --> 
    cc(how,_20009,_20013).

how([how,lit(why)],_20009,_20013) --> 
    cc(why,_20009,_20013).

i([i,lit(i)],_20009,_20013) --> 
    cc(i,_20009,_20013).

if1([if1,lit(if)],_20009,_20013) --> 
    cc(if,_20009,_20013).

in0([in0,lit(in)],_20009,_20013) --> 
    cc(in,_20009,_20013).

in0([in0,[]],_20005,_20005) --> 
    [].

in_order_to(go,_19983,[in_order_to,_20069,!,_20137],_20035,_20039) --> 
    prep1(to,_20069,_20035,_20103),
    !,
    reject(_20137,_20103,_20039).

in_order_to(start,id,[in_order_to,_20065,!,_20123],_20031,_20035) --> 
    infinitive(_20065,_20031,_20095),
    !,
    accept(_20123,_20095,_20035).

in_order_to(stop,id,[in_order_to,_20065,!,_20123],_20031,_20035) --> 
    infinitive(_20065,_20031,_20095),
    !,
    accept(_20123,_20095,_20035).

in_order_to(_19981,not,[in_order_to,_20063,_20121],_20029,_20033) --> 
    prep1(without,_20063,_20029,_20097),
    infinitive(_20121,_20097,_20033).

in_order_to(_19981,id,[in_order_to,_20053],_20019,_20023) --> 
    in_order_to(_20053,_20019,_20023).

in_order0([in_order0,_20039,!,_20097],_20017,_20021) --> 
    in_order(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

in_order0([in_order0,[]],_20005,_20005) --> 
    [].

in_order([in_order,_20041,lit(order)],_20019,_20023) --> 
    prep(in,_20041,_20019,_20075),
    cc(order,_20075,_20023).

in_order_to([in_order_to,_20049,_20107,!,_20165],_20027,_20031) --> 
    prep1(to,_20049,_20027,_20083),
    notverb(_20107,_20083,_20137),
    !,
    reject(_20165,_20137,_20031).

in_order_to([in_order_to,_20033,_20081],_20011,_20015) --> 
    in_order0(_20033,_20011,_20063),
    infinitive(_20081,_20063,_20015).

in_order_to([in_order_to,_20057,_20105,_20153,_20211],_20035,_20039) --> 
    if1(_20057,_20035,_20087),
    i(_20105,_20087,_20135),
    w(verb(want,_20005,fin),_20153,_20135,_20187),
    infinitive(_20211,_20187,_20039).

infinitive([infinitive,lit(to)],_20009,_20013) --> 
    cc(to,_20009,_20013).

notverb([notverb,_20051,!,_20119],_20029,_20033) --> 
    w(verb(_19997,_19999,fin),_20051,_20029,_20085),
    !,
    reject(_20119,_20085,_20033).

notverb([notverb,_20027],_20005,_20009) --> 
    art(_20027,_20005,_20009).

notverb([notverb,lit(the)],_20009,_20013) --> 
    cc(the,_20009,_20013).

notverb([notverb,_20037],_20015,_20019) --> 
    wx(adj2(nil,_19987),_20037,_20015,_20019).

notverb([notverb,_20041],_20019,_20023) --> 
    w(noun(_19985,_19987,_19989,_19991),_20041,_20019,_20023).

notverb([notverb,_20039],_20017,_20021) --> 
    w(name(_19985,_19987,_19989),_20039,_20017,_20021).

it([it,lit(it)],_20009,_20013) --> 
    cc(it,_20009,_20013).

its([its,lit(its),_20059],_20015,_20019) --> 
    cc(its,_20015,_20057),
    own0(_20059,_20057,_20019).

ittobetrue0([ittobetrue0,_20051,_20099,_20147,_20195,!],_20029,_20033) --> 
    it(_20051,_20029,_20081),
    to(_20099,_20081,_20129),
    be(_20147,_20129,_20177),
    true(_20195,_20177,_20033),
    !.

ittobetrue0([ittobetrue0,[]],_20005,_20005) --> 
    [].

just0([just0,lit(just),!,_20075],_20021,_20025) --> 
    cc(just,_20021,_20063),
    !,
    accept(_20075,_20063,_20025).

just0([just0,lit(right),!,_20075],_20021,_20025) --> 
    cc(right,_20021,_20063),
    !,
    accept(_20075,_20063,_20025).

just0([just0,[]],_20005,_20005) --> 
    [].

latest([latest,lit(last)],_20009,_20013) --> 
    cc(last,_20009,_20013).

less([less,lit(before)],_20009,_20013) --> 
    cc(before,_20009,_20013).

less([less,lit(earlier)],_20009,_20013) --> 
    cc(earlier,_20009,_20013).

less([less,lit(less)],_20009,_20013) --> 
    cc(less,_20009,_20013).

less([less,lit(lower)],_20009,_20013) --> 
    cc(lower,_20009,_20013).

less([less,lit(smaller)],_20009,_20013) --> 
    cc(smaller,_20009,_20013).

may([may,lit(can)],_20009,_20013) --> 
    cc(can,_20009,_20013).

may([may,lit(may)],_20009,_20013) --> 
    cc(may,_20009,_20013).

many([many,lit(many)],_20009,_20013) --> 
    cc(many,_20009,_20013).

modal([modal,_20027],_20005,_20009) --> 
    may(_20027,_20005,_20009).

modal([modal,_20027],_20005,_20009) --> 
    must(_20027,_20005,_20009).

modal([modal,lit(will)],_20009,_20013) --> 
    cc(will,_20009,_20013).

most([most,lit(most)],_20009,_20013) --> 
    cc(most,_20009,_20013).

much([much,lit(much)],_20009,_20013) --> 
    cc(much,_20009,_20013).

must([must,lit(must)],_20009,_20013) --> 
    cc(must,_20009,_20013).

must([must,_20033,_20081],_20011,_20015) --> 
    has(_20033,_20011,_20063),
    to(_20081,_20063,_20015).

negation0(id,[negation0,lit(not),lit(only),!,_20121],_20039,_20043) --> 
    cc(not,_20039,_20087),
    cc(only,_20087,_20109),
    !,
    accept(_20121,_20109,_20043).

negation0(not,[negation0,lit(not)],_20017,_20021) --> 
    cc(not,_20017,_20021).

negation0(id,[negation0,[]],_20013,_20013) --> 
    [].

newyear([newyear,_20057,_20115],_20035,_20039) --> 
    wx(adj2(nil,new),_20057,_20035,_20091),
    w(noun(year,_19993,_19995,_19997),_20115,_20091,_20039).

newyear([newyear,lit(newyear)],_20009,_20013) --> 
    cc(newyear,_20009,_20013).

no([no,lit(no)],_20009,_20013) --> 
    cc(no,_20009,_20013).

now0([now0,_20039,!,_20097],_20017,_20021) --> 
    now(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

now0([now0,lit(today),!,_20075],_20021,_20025) --> 
    cc(today,_20021,_20063),
    !,
    accept(_20075,_20063,_20025).

now0([now0,[]],_20005,_20005) --> 
    [].

now([now,_20049,lit(now),!,_20129],_20027,_20031) --> 
    just0(_20049,_20027,_20079),
    cc(now,_20079,_20117),
    !,
    accept(_20129,_20117,_20031).

nr0([nr0,_20039,!,_20097],_20017,_20021) --> 
    nr(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

nr0([nr0,[]],_20005,_20005) --> 
    [].

nr([nr,_20047,_20105],_20025,_20029) --> 
    w(noun(number,sin,u,n),_20047,_20025,_20081),
    point0(_20105,_20081,_20029).

nr([nr,lit(no),_20059],_20015,_20019) --> 
    cc(no,_20015,_20057),
    point0(_20059,_20057,_20019).

of([of,_20031],_20009,_20013) --> 
    prep1(of,_20031,_20009,_20013).

of0([of0,_20027],_20005,_20009) --> 
    of(_20027,_20005,_20009).

of0([of0,[]],_20005,_20005) --> 
    [].

offrom([offrom,_20027],_20005,_20009) --> 
    of(_20027,_20005,_20009).

offrom([offrom,_20031],_20009,_20013) --> 
    prep1(from,_20031,_20009,_20013).

ofslash0([ofslash0,lit('.')],_20009,_20013) --> 
    cc('.',_20009,_20013).

ofslash0([ofslash0,lit(/)],_20009,_20013) --> 
    cc(/,_20009,_20013).

ofslash0([ofslash0,_20027],_20005,_20009) --> 
    of0(_20027,_20005,_20009).

ofthe([ofthe,_20033,_20081],_20011,_20015) --> 
    of(_20033,_20011,_20063),
    the(_20081,_20063,_20015).

ofthe0([ofthe0,_20027],_20005,_20009) --> 
    ofthe(_20027,_20005,_20009).

ofthe0([ofthe0,lit(other)],_20009,_20013) --> 
    cc(other,_20009,_20013).

ofthe0([ofthe0,[]],_20005,_20005) --> 
    [].

older([older,lit(older)],_20009,_20013) --> 
    cc(older,_20009,_20013).

one([one,lit(one)],_20009,_20013) --> 
    cc(one,_20009,_20013).

one([one,_20037],_20015,_20019) --> 
    w(nb(1,num),_20037,_20015,_20019).

ones([ones,lit(ones)],_20009,_20013) --> 
    cc(ones,_20009,_20013).

on0([on0,_20037,!],_20015,_20019) --> 
    prep1(on,_20037,_20015,_20019),
    !.

on0([on0,_20037,!],_20015,_20019) --> 
    prep1(in,_20037,_20015,_20019),
    !.

on0([on0,[]],_20005,_20005) --> 
    [].

only0([only0,lit(only),!],_20015,_20019) --> 
    cc(only,_20015,_20019),
    !.

only0([only0,[]],_20005,_20005) --> 
    [].

ordinal(_19981,[ordinal,_20051],_20023,_20027) --> 
    w(nb(_19981,ord),_20051,_20023,_20027).

or1([or1,lit(or)],_20009,_20013) --> 
    cc(or,_20009,_20013).

others([others,lit(others)],_20009,_20013) --> 
    cc(others,_20009,_20013).

own0([own0,lit(own)],_20009,_20013) --> 
    cc(own,_20009,_20013).

own0([own0,[]],_20005,_20005) --> 
    [].

particle(reductant,[particle,_20041],_20013,_20017) --> 
    reductant(_20041,_20013,_20017).

particle(early,[particle,_20041],_20013,_20017) --> 
    amtime(_20041,_20013,_20017).

particle(now,[particle,_20041],_20013,_20017) --> 
    now(_20041,_20013,_20017).

particle(_19981,[particle,lit(_19981),{}],_20035,_20039) --> 
    cc(_19981,_20035,_20039),
    {particle(_19981,_19997,_19999)}.

particle(hereafter,[particle,_20061,lit(now),_20141],_20033,_20037) --> 
    prep1(from,_20061,_20033,_20095),
    cc(now,_20095,_20139),
    on0(_20141,_20139,_20037).

particle(hereafter,[particle,lit(as),_20099,lit(as),_20169],_20049,_20053) --> 
    cc(as,_20049,_20097),
    soon(_20099,_20097,_20129),
    cc(as,_20129,_20167),
    wx(adj2(nil,possible),_20169,_20167,_20053).

particle(regularly,[particle,lit(as),lit(usual)],_20027,_20031) --> 
    cc(as,_20027,_20075),
    cc(usual,_20075,_20031).

reductant([reductant,lit(not),lit(only)],_20019,_20023) --> 
    cc(not,_20019,_20061),
    cc(only,_20061,_20023).

reductant([reductant,lit(only)],_20009,_20013) --> 
    cc(only,_20009,_20013).

pmtime([pmtime,_20101,lit(the),_20181,{},!,_20263],_20079,_20083) --> 
    prep1(in,_20101,_20079,_20135),
    cc(the,_20135,_20179),
    w(noun(_20023,sin,u,n),_20181,_20179,_20215),
    {member(_20023,[afternoon,evening,night])},
    !,
    accept(_20263,_20215,_20083).

pmtime([pmtime,lit(pm),_20059],_20015,_20019) --> 
    cc(pm,_20015,_20057),
    point0(_20059,_20057,_20019).

pmtime([pmtime,lit(p),_20075,lit(m),_20145],_20031,_20035) --> 
    cc(p,_20031,_20073),
    point0(_20075,_20073,_20105),
    cc(m,_20105,_20143),
    point0(_20145,_20143,_20035).

pmtime([pmtime,lit(p),_20059],_20015,_20019) --> 
    cc(p,_20015,_20057),
    point0(_20059,_20057,_20019).

pmtime([pmtime,_20047,!],_20025,_20029) --> 
    w(noun(afternoon,_19993,_19995,_19997),_20047,_20025,_20029),
    !.

point0([point0,_20039,!,_20097],_20017,_20021) --> 
    point(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

point0([point0,[]],_20005,_20005) --> 
    [].

pointNO([pointNO,_20039,!,_20097],_20017,_20021) --> 
    point(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

pointNO([pointNO,{}],_20021,_20021) --> 
    {user:value(nodotflag,true)}.

point([point,lit('.')],_20009,_20013) --> 
    cc('.',_20009,_20013).

posspron(self,[posspron,lit(my),_20073],_20023,_20027) --> 
    cc(my,_20023,_20071),
    own0(_20073,_20071,_20027).

posspron(man,[posspron,lit(his),_20073],_20023,_20027) --> 
    cc(his,_20023,_20071),
    own0(_20073,_20071,_20027).

posspron(woman,[posspron,lit(her),_20073],_20023,_20027) --> 
    cc(her,_20023,_20071),
    own0(_20073,_20071,_20027).

posspron(savant,[posspron,lit(your)],_20017,_20021) --> 
    cc(your,_20017,_20021).

posspron(person,[posspron,_20047,_20095],_20019,_20023) --> 
    their(_20047,_20019,_20077),
    own0(_20095,_20077,_20023).

prep2(about,[prep2,_20055,_20113],_20027,_20031) --> 
    prep1(for,_20055,_20027,_20089),
    prep1(about,_20113,_20089,_20031).

prep2(according_to,[prep2,lit(according),_20073],_20023,_20027) --> 
    cc(according,_20023,_20071),
    to(_20073,_20071,_20027).

prep2(after,[prep2,lit(just),_20077],_20027,_20031) --> 
    cc(just,_20027,_20075),
    prep1(after,_20077,_20075,_20031).

prep2(around,[prep2,_20055,_20113],_20027,_20031) --> 
    prep1(at,_20055,_20027,_20089),
    prep1(about,_20113,_20089,_20031).

prep2(around,[prep2,_20055,_20113],_20027,_20031) --> 
    prep1(at,_20055,_20027,_20089),
    prep1(around,_20113,_20089,_20031).

prep2(around,[prep2,_20055,_20113],_20027,_20031) --> 
    w(prep(near),_20055,_20027,_20089),
    to(_20113,_20089,_20031).

prep2(beside,[prep2,lit(next),_20073],_20023,_20027) --> 
    cc(next,_20023,_20071),
    to(_20073,_20071,_20027).

prep2(from,[prep2,lit(out),_20073],_20023,_20027) --> 
    cc(out,_20023,_20071),
    offrom(_20073,_20071,_20027).

prep2(near,[prep2,_20055,_20113],_20027,_20031) --> 
    w(prep(near),_20055,_20027,_20089),
    to(_20113,_20089,_20031).

prep2(near,[prep2,_20057,_20115],_20029,_20033) --> 
    w(adj2(nearest,nil),_20057,_20029,_20091),
    to(_20115,_20091,_20033).

prep2(near,[prep2,_20055,_20113],_20027,_20031) --> 
    w(prep(near),_20055,_20027,_20089),
    by(_20113,_20089,_20031).

prep2(near,[prep2,_20055,_20113],_20027,_20031) --> 
    w(prep(near),_20055,_20027,_20089),
    at(_20113,_20089,_20031).

prep2(nearest,[prep2,_20055,_20113],_20027,_20031) --> 
    w(prep(nearest),_20055,_20027,_20089),
    to(_20113,_20089,_20031).

prep2(of,[prep2,lit(up),_20077],_20027,_20031) --> 
    cc(up,_20027,_20075),
    prep1(of,_20077,_20075,_20031).

prep2(on,[prep2,lit(as),_20077],_20027,_20031) --> 
    cc(as,_20027,_20075),
    prep1(of,_20077,_20075,_20031).

prep2(out_of,[prep2,lit(out),_20073],_20023,_20027) --> 
    cc(out,_20023,_20071),
    offrom(_20073,_20071,_20027).

prep2(to,[prep2,lit(bound),_20077],_20027,_20031) --> 
    cc(bound,_20027,_20075),
    prep1(for,_20077,_20075,_20031).

prep2(to,[prep2,_20081,_20139,_20187,_20245],_20053,_20057) --> 
    prep1(on,_20081,_20053,_20115),
    its0(_20139,_20115,_20169),
    w(noun(way,sin,u,n),_20187,_20169,_20221),
    prep(to,_20245,_20221,_20057).

prep2(to,[prep2,_20051,_20099],_20023,_20027) --> 
    umpover(_20051,_20023,_20081),
    prep1(to,_20099,_20081,_20027).

prep2(without,[prep2,lit(free),_20073],_20023,_20027) --> 
    cc(free,_20023,_20071),
    of(_20073,_20071,_20027).

prep2(with,[prep2,lit(by),lit(using)],_20027,_20031) --> 
    cc(by,_20027,_20075),
    cc(using,_20075,_20031).

prep2(with,[prep2,lit(using)],_20017,_20021) --> 
    cc(using,_20017,_20021).

prep2(with,[prep2,_20057,lit(use),_20127],_20029,_20033) --> 
    by(_20057,_20029,_20087),
    cc(use,_20087,_20125),
    of(_20127,_20125,_20033).

its0([its0,lit(its)],_20009,_20013) --> 
    cc(its,_20009,_20013).

its0([its0,lit(the)],_20009,_20013) --> 
    cc(the,_20009,_20013).

umpover([umpover,lit(up)],_20009,_20013) --> 
    cc(up,_20009,_20013).

umpover([umpover,lit(down)],_20009,_20013) --> 
    cc(down,_20009,_20013).

pronoun(_19981,[pronoun,lit(_19995),{}],_20033,_20037) --> 
    cc(_19995,_20033,_20037),
    {pronoun(_19995,_19981)}.

reflexiv0(_19981,[reflexiv0,_20051,!],_20023,_20027) --> 
    reflexiv(_19981,_20051,_20023,_20027),
    !.

reflexiv0(_19981,[reflexiv0,[]],_20013,_20013) --> 
    [].

reflexiv(ask,[reflexiv,lit(you),!,_20089],_20029,_20033) --> 
    cc(you,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

reflexiv(give,[reflexiv,lit(i),!,_20089],_20029,_20033) --> 
    cc(i,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

reflexiv(notify,[reflexiv,lit(i),!,_20089],_20029,_20033) --> 
    cc(i,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

reflexiv(show,[reflexiv,lit(i),!,_20089],_20029,_20033) --> 
    cc(i,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

reflexiv(tell,[reflexiv,lit(i),!,_20089],_20029,_20033) --> 
    cc(i,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

reflexiv(_19981,[reflexiv,{},lit(there)],_20043,_20047) --> 
    {\+user:value(dialog,1)},
    cc(there,_20043,_20047).

quant_pron(every,person,[quant_pron,lit(all),_20089],_20033,_20037) --> 
    cc(all,_20033,_20087),
    number(_19993,_20089,_20087,_20037).

quant_pron(every,person,[quant_pron,lit(each)],_20023,_20027) --> 
    cc(each,_20023,_20027).

quant_pron(every,person,[quant_pron,lit(everybody)],_20023,_20027) --> 
    cc(everybody,_20023,_20027).

quant_pron(every,person,[quant_pron,lit(everyone)],_20023,_20027) --> 
    cc(everyone,_20023,_20027).

quant_pron(every,thing,[quant_pron,lit(everything)],_20023,_20027) --> 
    cc(everything,_20023,_20027).

quant_pron(some,person,[quant_pron,lit(somebody)],_20023,_20027) --> 
    cc(somebody,_20023,_20027).

quant_pron(some,person,[quant_pron,_20053],_20019,_20023) --> 
    someone(_20053,_20019,_20023).

quant_pron(some,person,[quant_pron,lit(one)],_20023,_20027) --> 
    cc(one,_20023,_20027).

quant_pron(some,person,[quant_pron,lit(anybody)],_20023,_20027) --> 
    cc(anybody,_20023,_20027).

quant_pron(some,person,[quant_pron,lit(anyone)],_20023,_20027) --> 
    cc(anyone,_20023,_20027).

quant_pron(some,thing,[quant_pron,lit(something)],_20023,_20027) --> 
    cc(something,_20023,_20027).

quant_pron(some,thing,[quant_pron,lit(anything)],_20023,_20027) --> 
    cc(anything,_20023,_20027).

quant_pron(no,person,[quant_pron,lit(nobody)],_20023,_20027) --> 
    cc(nobody,_20023,_20027).

quant_pron(no,person,[quant_pron,lit(noone)],_20023,_20027) --> 
    cc(noone,_20023,_20027).

quant_pron(no,thing,[quant_pron,lit(nothing)],_20023,_20027) --> 
    cc(nothing,_20023,_20027).

quant_pron(some,vehicle,[quant_pron,lit(it),{}],_20045,_20049) --> 
    cc(it,_20045,_20049),
    {user:value(busflag,true)}.

quant0(+1,[quant0,[]],_20017,_20017) --> 
    [].

quant0(+_19985,[quant0,_20049],_20021,_20025) --> 
    num(_19985,_20049,_20021,_20025).

quant0(-_19985,[quant0,_20049],_20021,_20025) --> 
    ordinal(_19985,_20049,_20021,_20025).

relpron(thing,[relpron,_20041],_20013,_20017) --> 
    that(_20041,_20013,_20017).

relpron(thing,[relpron,_20041],_20013,_20017) --> 
    which(_20041,_20013,_20017).

relpron(thing,[relpron,_20041],_20013,_20017) --> 
    what(_20041,_20013,_20017).

relpron(agent,[relpron,_20041],_20013,_20017) --> 
    who(_20041,_20013,_20017).

resiproc(man,[resiproc,lit(himself)],_20017,_20021) --> 
    cc(himself,_20017,_20021).

resiproc(person,[resiproc,lit(themselves)],_20017,_20021) --> 
    cc(themselves,_20017,_20021).

resiproc(woman,[resiproc,lit(herself)],_20017,_20021) --> 
    cc(herself,_20017,_20021).

resiproc(thing,[resiproc,lit(itself)],_20017,_20021) --> 
    cc(itself,_20017,_20021).

same([same,lit(same)],_20009,_20013) --> 
    cc(same,_20009,_20013).

set([set,_20041],_20019,_20023) --> 
    w(noun(set,_19987,u,n),_20041,_20019,_20023).

setlist([setlist,_20027],_20005,_20009) --> 
    set(_20027,_20005,_20009).

setlist([setlist,lit(list)],_20009,_20013) --> 
    cc(list,_20009,_20013).

several([several,lit(several)],_20009,_20013) --> 
    cc(several,_20009,_20013).

several([several,lit(more),lit(than),_20091],_20025,_20029) --> 
    cc(more,_20025,_20067),
    cc(than,_20067,_20089),
    one(_20091,_20089,_20029).

so0([so0,lit(so),!],_20015,_20019) --> 
    cc(so,_20015,_20019),
    !.

so0([so0,[]],_20005,_20005) --> 
    [].

so_that([so_that,lit(that)],_20009,_20013) --> 
    cc(that,_20009,_20013).

so_that([so_that,lit(so),_20059],_20015,_20019) --> 
    cc(so,_20015,_20057),
    that(_20059,_20057,_20019).

so_that([so_that,lit(in),lit(order),_20091],_20025,_20029) --> 
    cc(in,_20025,_20067),
    cc(order,_20067,_20089),
    that(_20091,_20089,_20029).

so_that([so_that,lit(so)],_20009,_20013) --> 
    cc(so,_20009,_20013).

someone([someone,lit(someone)],_20009,_20013) --> 
    cc(someone,_20009,_20013).

soon([soon,lit(soon)],_20009,_20013) --> 
    cc(soon,_20009,_20013).

soon([soon,_20037],_20015,_20019) --> 
    wx(adj2(nil,fast),_20037,_20015,_20019).

suchas0([suchas0,lit(such),lit(as),!,_20107],_20031,_20035) --> 
    cc(such,_20031,_20073),
    cc(as,_20073,_20095),
    !,
    accept(_20107,_20095,_20035).

suchas0([suchas0,[]],_20005,_20005) --> 
    [].

statics(avg,[statics,lit(average),_20073],_20023,_20027) --> 
    cc(average,_20023,_20071),
    ofthe0(_20073,_20071,_20027).

statics(max(+1),[statics,lit(maximum),_20081],_20031,_20035) --> 
    cc(maximum,_20031,_20079),
    ofthe0(_20081,_20079,_20035).

statics(min(+1),[statics,lit(minimum),_20081],_20031,_20035) --> 
    cc(minimum,_20031,_20079),
    ofthe0(_20081,_20079,_20035).

statics(sum,[statics,_20047,_20095],_20019,_20023) --> 
    total(_20047,_20019,_20077),
    ofthe0(_20095,_20077,_20023).

statics(number,[statics,lit(number),_20073],_20023,_20027) --> 
    cc(number,_20023,_20071),
    ofthe0(_20073,_20071,_20027).

sure([sure,lit(sure)],_20009,_20013) --> 
    cc(sure,_20009,_20013).

terminator([terminator,_20027],_20005,_20009) --> 
    termchar(_20027,_20005,_20009).

termchar([termchar,lit('.')],_20009,_20013) --> 
    cc('.',_20009,_20013).

termchar([termchar,lit(?)],_20009,_20013) --> 
    cc(?,_20009,_20013).

termchar([termchar,lit(!)],_20009,_20013) --> 
    cc(!,_20009,_20013).

thanks([thanks,lit(thanks)],_20009,_20013) --> 
    cc(thanks,_20009,_20013).

thanks([thanks,lit(thank),lit(you)],_20019,_20023) --> 
    cc(thank,_20019,_20061),
    cc(you,_20061,_20023).

thanks([thanks,lit(thankyou)],_20009,_20013) --> 
    cc(thankyou,_20009,_20013).

thanks([thanks,lit(thank),lit(s)],_20019,_20023) --> 
    cc(thank,_20019,_20061),
    cc(s,_20061,_20023).

than0([than0,lit(than)],_20009,_20013) --> 
    cc(than,_20009,_20013).

than0([than0,[]],_20005,_20005) --> 
    [].

that([that,lit(that)],_20009,_20013) --> 
    cc(that,_20009,_20013).

that0(_19981,[that0,_20057,!,_20125],_20029,_20033) --> 
    that(_19981,_20057,_20029,_20091),
    !,
    accept(_20125,_20091,_20033).

that0(that,[that0,[]],_20013,_20013) --> 
    [].

that(when,[that,_20041],_20013,_20017) --> 
    when(_20041,_20013,_20017).

that(where,[that,_20041],_20013,_20017) --> 
    where(_20041,_20013,_20017).

that(whether,[that,lit(whether)],_20017,_20021) --> 
    cc(whether,_20017,_20021).

that(whether,[that,_20041],_20013,_20017) --> 
    if1(_20041,_20013,_20017).

that(how,[that,_20041],_20013,_20017) --> 
    how(_20041,_20013,_20017).

that(why,[that,lit(why)],_20017,_20021) --> 
    cc(why,_20017,_20021).

that(that,[that,lit(that)],_20017,_20021) --> 
    cc(that,_20017,_20021).

that0([that0,_20027],_20005,_20009) --> 
    that(_20027,_20005,_20009).

that0([that0,[]],_20005,_20005) --> 
    [].

the([the,lit(the)],_20009,_20013) --> 
    cc(the,_20009,_20013).

the([the,lit(this),_20073],_20029,_20033) --> 
    cc(this,_20029,_20071),
    look_ahead(w(noun,_19993,_19995,_19997),_20073,_20071,_20033).

the0([the0,lit(the),!],_20015,_20019) --> 
    cc(the,_20015,_20019),
    !.

the0([the0,lit(this),!],_20015,_20019) --> 
    cc(this,_20015,_20019),
    !.

the0([the0,[]],_20005,_20005) --> 
    [].

their([their,lit(their)],_20009,_20013) --> 
    cc(their,_20009,_20013).

their([their,lit(the),lit(others)],_20019,_20023) --> 
    cc(the,_20019,_20061),
    cc(others,_20061,_20023).

then0([then0,_20039,!,_20097],_20017,_20021) --> 
    then1(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

then0([then0,[]],_20005,_20005) --> 
    [].

then1([then1,lit(then)],_20009,_20013) --> 
    cc(then,_20009,_20013).

theonly0([theonly0,_20033,_20081],_20011,_20015) --> 
    the0(_20033,_20011,_20063),
    only0(_20081,_20063,_20015).

there0([there0,lit(there)],_20009,_20013) --> 
    cc(there,_20009,_20013).

there0([there0,lit(it)],_20009,_20013) --> 
    cc(it,_20009,_20013).

there0([there0,[]],_20005,_20005) --> 
    [].

thereit([thereit,lit(there)],_20009,_20013) --> 
    cc(there,_20009,_20013).

thereit([thereit,lit(it)],_20009,_20013) --> 
    cc(it,_20009,_20013).

this1([this1,{},lit(the)],_20031,_20035) --> 
    {user:value(textflag,true)},
    cc(the,_20031,_20035).

this1([this1,_20027],_20005,_20009) --> 
    that(_20027,_20005,_20009).

this1([this1,lit(these)],_20009,_20013) --> 
    cc(these,_20009,_20013).

this1([this1,lit(this),_20077],_20033,_20037) --> 
    cc(this,_20033,_20075),
    not_look_ahead(w(noun(_19995,_19997,_19999,_20001)),_20077,_20075,_20037).

this1([this1,lit(those)],_20009,_20013) --> 
    cc(those,_20009,_20013).

to([to,_20031],_20009,_20013) --> 
    prep(to,_20031,_20009,_20013).

to0([to0,_20027],_20005,_20009) --> 
    to(_20027,_20005,_20009).

to0([to0,[]],_20005,_20005) --> 
    [].

total([total,lit(total)],_20009,_20013) --> 
    cc(total,_20009,_20013).

total([total,lit(sum),_20059],_20015,_20019) --> 
    cc(sum,_20015,_20057),
    of(_20059,_20057,_20019).

true([true,lit(true)],_20009,_20013) --> 
    cc(true,_20009,_20013).

truefalse(id,[truefalse,lit(true)],_20017,_20021) --> 
    cc(true,_20017,_20021).

truefalse(id,[truefalse,lit(not),lit(false)],_20027,_20031) --> 
    cc(not,_20027,_20075),
    cc(false,_20075,_20031).

truefalse(not,[truefalse,lit(false)],_20017,_20021) --> 
    cc(false,_20017,_20021).

truefalse(not,[truefalse,lit(not),lit(true)],_20027,_20031) --> 
    cc(not,_20027,_20075),
    cc(true,_20075,_20031).

up0([up0,lit(up),!,_20075],_20021,_20025) --> 
    cc(up,_20021,_20063),
    !,
    accept(_20075,_20063,_20025).

up0([up0,[]],_20005,_20005) --> 
    [].

unequal([unequal,lit(unequal)],_20009,_20013) --> 
    cc(unequal,_20009,_20013).

unequal([unequal,lit(not),lit(equal)],_20019,_20023) --> 
    cc(not,_20019,_20061),
    cc(equal,_20061,_20023).

until([until,lit(until)],_20009,_20013) --> 
    cc(until,_20009,_20013).

use([use,_20039],_20017,_20021) --> 
    w(verb(use,_19987,fin),_20039,_20017,_20021).

very([very,lit(very)],_20009,_20013) --> 
    cc(very,_20009,_20013).

what([what,lit(what)],_20009,_20013) --> 
    cc(what,_20009,_20013).

what([what,_20027],_20005,_20009) --> 
    which(_20027,_20005,_20009).

whatbe(1,[whatbe,_20053,!,_20111],_20025,_20029) --> 
    whatbe1(_20053,_20025,_20083),
    !,
    accept(_20111,_20083,_20029).

whatbe(0,[whatbe,[]],_20013,_20013) --> 
    [].

whatbe1([whatbe1,_20033,_20081],_20011,_20015) --> 
    what(_20033,_20011,_20063),
    be(_20081,_20063,_20015).

whatbe1([whatbe1,lit(whats)],_20009,_20013) --> 
    cc(whats,_20009,_20013).

whatbe1([whatbe1,_20049,lit(me)],_20027,_20031) --> 
    w(verb(show,_19997,fin),_20049,_20027,_20083),
    cc(me,_20083,_20031).

whatbe1([whatbe1,_20039],_20017,_20021) --> 
    w(verb(list,_19987,fin),_20039,_20017,_20021).

when([when,lit(when)],_20009,_20013) --> 
    cc(when,_20009,_20013).

when([when,lit(which),_20073],_20029,_20033) --> 
    cc(which,_20029,_20071),
    w(noun(time,_19993,u,n),_20073,_20071,_20033).

when([when,lit(what),_20073],_20029,_20033) --> 
    cc(what,_20029,_20071),
    w(noun(time,_19993,u,n),_20073,_20071,_20033).

when([when,lit(how),_20081,!,_20149],_20037,_20041) --> 
    cc(how,_20037,_20079),
    wx(adj2(nil,late),_20081,_20079,_20115),
    !,
    accept(_20149,_20115,_20041).

when([when,lit(how),_20081,!,_20149],_20037,_20041) --> 
    cc(how,_20037,_20079),
    wx(adj2(nil,early),_20081,_20079,_20115),
    !,
    accept(_20149,_20115,_20041).

where([where,lit(where)],_20009,_20013) --> 
    cc(where,_20009,_20013).

where([where,lit(how),lit(far)],_20019,_20023) --> 
    cc(how,_20019,_20061),
    cc(far,_20061,_20023).

wherefrom([wherefrom,_20053,lit(where),!,_20143],_20031,_20035) --> 
    prep1(from,_20053,_20031,_20087),
    cc(where,_20087,_20131),
    !,
    accept(_20143,_20131,_20035).

wherefrom([wherefrom,lit(where),_20075,!,_20143],_20031,_20035) --> 
    cc(where,_20031,_20073),
    prep1(from,_20075,_20073,_20109),
    !,
    accept(_20143,_20109,_20035).

wherefrom([wherefrom,lit(wherefrom)],_20009,_20013) --> 
    cc(wherefrom,_20009,_20013).

while(not,[while,_20063,lit(not),!,_20143],_20035,_20039) --> 
    while0(_20063,_20035,_20093),
    cc(not,_20093,_20131),
    !,
    accept(_20143,_20131,_20039).

while(not,[while,lit(without),!,_20089],_20029,_20033) --> 
    cc(without,_20029,_20077),
    !,
    accept(_20089,_20077,_20033).

while(id,[while,_20053,!,_20111],_20025,_20029) --> 
    while0(_20053,_20025,_20083),
    !,
    accept(_20111,_20083,_20029).

while0([while0,_20039,!,_20097],_20017,_20021) --> 
    while(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

while0([while0,[]],_20005,_20005) --> 
    [].

while([while,lit(while)],_20009,_20013) --> 
    cc(while,_20009,_20013).

who([who,lit(who)],_20009,_20013) --> 
    cc(who,_20009,_20013).

which([which,lit(what),_20091,_20149,!,_20207],_20047,_20051) --> 
    cc(what,_20047,_20089),
    w(noun(kind,_20015,_20017,_20019),_20091,_20089,_20125),
    of(_20149,_20125,_20179),
    !,
    accept(_20207,_20179,_20051).

which([which,lit(which)],_20009,_20013) --> 
    cc(which,_20009,_20013).

which2([which2,_20033,_20081],_20011,_20015) --> 
    which(_20033,_20011,_20063),
    ofthe0(_20081,_20063,_20015).

which2([which2,lit(what)],_20009,_20013) --> 
    cc(what,_20009,_20013).

whose([whose,lit(whose)],_20009,_20013) --> 
    cc(whose,_20009,_20013).

you([you,lit(you)],_20009,_20013) --> 
    cc(you,_20009,_20013).

younger([younger,lit(younger)],_20009,_20013) --> 
    cc(younger,_20009,_20013).

num(_19981,[num,_20051],_20023,_20027) --> 
    w(nb(_19981,num),_20051,_20023,_20027).

personal('OK',[personal,_20051],_20023,_20027) --> 
    w(adj2(good,_19991),_20051,_20023,_20027).

personal('LAWL',[personal,lit(lol)],_20017,_20021) --> 
    cc(lol,_20017,_20021).

personal('LMAO',[personal,lit(lawl)],_20017,_20021) --> 
    cc(lawl,_20017,_20021).

personal('ROTFL',[personal,lit(lmao)],_20017,_20021) --> 
    cc(lmao,_20017,_20021).

personal('ROTFLMAO',[personal,lit(rofl)],_20017,_20021) --> 
    cc(rofl,_20017,_20021).

personal('ROTFLMAO',[personal,lit(rotfl)],_20017,_20021) --> 
    cc(rotfl,_20017,_20021).

personal('ROTFLMAO',[personal,lit(roflmao)],_20017,_20021) --> 
    cc(roflmao,_20017,_20021).

personal('OK',[personal,lit(rotflmao)],_20017,_20021) --> 
    cc(rotflmao,_20017,_20021).

personal('OK',[personal,_20051],_20023,_20027) --> 
    wx(adj2(nil,sorry),_20051,_20023,_20027).

personal('OK',[personal,_20073,lit(you),lit(ok)],_20045,_20049) --> 
    w(verb(be,pres,fin),_20073,_20045,_20107),
    cc(you,_20107,_20151),
    cc(ok,_20151,_20049).

personal('OK',[personal,lit(never),_20087],_20037,_20041) --> 
    cc(never,_20037,_20085),
    w(noun(mind,sin,u,n),_20087,_20085,_20041).

personal(pong,[personal,lit(ping)],_20017,_20021) --> 
    cc(ping,_20017,_20021).

personal(thanks,[personal,lit(bravo)],_20017,_20021) --> 
    cc(bravo,_20017,_20021).

personal(thanks,[personal,lit(this),_20089,_20137],_20039,_20043) --> 
    cc(this,_20039,_20087),
    be(_20089,_20087,_20119),
    wx(adj2(nil,good),_20137,_20119,_20043).

personal('OK',[personal,_20095,lit(how),_20205,lit(you),_20285,_20333],_20067,_20071) --> 
    optional(hello,_20095,_20067,_20159),
    cc(how,_20159,_20203),
    w(verb(be,pres,fin),_20205,_20203,_20239),
    cc(you,_20239,_20283),
    feeling0(_20285,_20283,_20315),
    now0(_20333,_20315,_20071).

personal('OK',[personal,_20083,lit(how),_20193,lit(you),_20263,_20311],_20055,_20059) --> 
    optional(hello,_20083,_20055,_20147),
    cc(how,_20147,_20191),
    do(_20193,_20191,_20223),
    cc(you,_20223,_20261),
    do(_20263,_20261,_20293),
    now0(_20311,_20293,_20059).

personal('OK',[personal,_20095,lit(how),_20205,lit(you),_20275,_20333],_20067,_20071) --> 
    optional(hello,_20095,_20067,_20159),
    cc(how,_20159,_20203),
    do(_20205,_20203,_20235),
    cc(you,_20235,_20273),
    w(verb(feel,pres,fin),_20275,_20273,_20309),
    now0(_20333,_20309,_20071).

feeling0([feeling0,_20039],_20017,_20021) --> 
    w(verb(feel,pres,part),_20039,_20017,_20021).

feeling0([feeling0,_20039],_20017,_20021) --> 
    w(verb(do1,pres,part),_20039,_20017,_20021).

feeling0([feeling0,[]],_20005,_20005) --> 
    [].

now0([now0,lit(now),!,_20075],_20021,_20025) --> 
    cc(now,_20021,_20063),
    !,
    accept(_20075,_20063,_20025).

now0([now0,_20043,!,_20111],_20021,_20025) --> 
    particle(_19993,_20043,_20021,_20077),
    !,
    accept(_20111,_20077,_20025).

now0([now0,[]],_20005,_20005) --> 
    [].

quit(bye,[quit,lit(bye),lit(bye),!],_20033,_20037) --> 
    cc(bye,_20033,_20081),
    cc(bye,_20081,_20037),
    !.

quit(bye,[quit,lit(bye)],_20017,_20021) --> 
    cc(bye,_20017,_20021).

quit(bye,[quit,lit(regards)],_20017,_20021) --> 
    cc(regards,_20017,_20021).

quit(bye,[quit,_20061,lit(regards)],_20033,_20037) --> 
    w(adj2(best,nil),_20061,_20033,_20095),
    cc(regards,_20095,_20037).

quit(bye,[quit,_20061,lit(bye)],_20033,_20037) --> 
    wx(adj2(nil,good),_20061,_20033,_20095),
    cc(bye,_20095,_20037).

quit(bye,[quit,_20061,lit(night)],_20033,_20037) --> 
    wx(adj2(nil,good),_20061,_20033,_20095),
    cc(night,_20095,_20037).

quit(bye,[quit,_20061,lit(day)],_20033,_20037) --> 
    wx(adj2(nil,good),_20061,_20033,_20095),
    cc(day,_20095,_20037).

quit(bye,[quit,lit(bye)],_20017,_20021) --> 
    cc(bye,_20017,_20021).

quit(bye,[quit,lit(exit)],_20017,_20021) --> 
    cc(exit,_20017,_20021).

quit(bye,[quit,lit(farewell)],_20017,_20021) --> 
    cc(farewell,_20017,_20021).

quit(bye,[quit,lit(stop)],_20017,_20021) --> 
    cc(stop,_20017,_20021).

quit(bye,[quit,lit(goodbye)],_20017,_20021) --> 
    cc(goodbye,_20017,_20021).

quit(bye,[quit,_20053],_20025,_20029) --> 
    w(verb(quit,pres,fin),_20053,_20025,_20029).

quit(bye,[quit,_20053],_20025,_20029) --> 
    w(verb(stop,pres,fin),_20053,_20025,_20029).

quit(bye,[quit,_20143,lit(a),_20223,_20281,{},{}],_20115,_20119) --> 
    w(verb(have,_20031,_20033),_20143,_20115,_20177),
    cc(a,_20177,_20221),
    wx(adj2(nil,_20047),_20223,_20221,_20257),
    w(noun(_20019,sin,u,n),_20281,_20257,_20119),
    {member(_20047,[good,nice,happy])},
    {subclass0(_20019,time)}.

quit(you_are_welcome,[quit,_20053,_20101,_20149],_20025,_20029) --> 
    optionalok(_20053,_20025,_20083),
    thanks(_20101,_20083,_20131),
    youverymuch0(_20149,_20131,_20029).

quit(merry_christmas,[quit,_20071,_20129],_20043,_20047) --> 
    wx(adj2(nil,good),_20071,_20043,_20105),
    w(noun(christmas,_19997,_19999,_20001),_20129,_20105,_20047).

quit(merry_christmas,[quit,_20069,_20127],_20041,_20045) --> 
    wx(adj2(nil,good),_20069,_20041,_20103),
    w(name(christmas,_19997,_19999),_20127,_20103,_20045).

quit(happy_new_year,[quit,_20057,_20115],_20029,_20033) --> 
    wx(adj2(nil,good),_20057,_20029,_20091),
    newyear(_20115,_20091,_20033).

quit(happy_new_year,[quit,_20057,_20115],_20029,_20033) --> 
    wx(adj2(nil,happy),_20057,_20029,_20091),
    newyear(_20115,_20091,_20033).

greetings0([greetings0,_20039,!,_20097],_20017,_20021) --> 
    greetings(_20039,_20017,_20069),
    !,
    accept(_20097,_20069,_20021).

greetings0([greetings0,[]],_20005,_20005) --> 
    [].

greetings([greetings,_20039],_20017,_20021) --> 
    w(name(hal,n,computer),_20039,_20017,_20021).

greetings([greetings,_20027],_20005,_20009) --> 
    hello(_20027,_20005,_20009).

greetings([greetings,lit(hi),!,_20075],_20021,_20025) --> 
    cc(hi,_20021,_20063),
    !,
    sludder(_20075,_20063,_20025).

greetings([greetings,lit(hello),!,_20075],_20021,_20025) --> 
    cc(hello,_20021,_20063),
    !,
    sludder(_20075,_20063,_20025).

greetings([greetings,lit(but)],_20009,_20013) --> 
    cc(but,_20009,_20013).

greetings([greetings,lit(o),_20067],_20023,_20027) --> 
    cc(o,_20023,_20065),
    np0(_19987,_19989,_19991,_20067,_20065,_20027).

greetings([greetings,lit(ok)],_20009,_20013) --> 
    cc(ok,_20009,_20013).

greetings([greetings,lit(so)],_20009,_20013) --> 
    cc(so,_20009,_20013).

greetings([greetings,lit(yes)],_20009,_20013) --> 
    cc(yes,_20009,_20013).

hello([hello,lit(hello)],_20009,_20013) --> 
    cc(hello,_20009,_20013).

hello([hello,lit(hi)],_20009,_20013) --> 
    cc(hi,_20009,_20013).

hello([hello,_20043,_20101],_20021,_20025) --> 
    wx(adj2(nil,good),_20043,_20021,_20077),
    helloday(_20101,_20077,_20025).

helloday([helloday,_20041],_20019,_20023) --> 
    w(noun(afternoon,_19987,_19989,_19991),_20041,_20019,_20023).

helloday([helloday,_20041],_20019,_20023) --> 
    w(noun(evening,_19987,_19989,_19991),_20041,_20019,_20023).

helloday([helloday,_20041],_20019,_20023) --> 
    w(noun(morning,_19987,_19989,_19991),_20041,_20019,_20023).

optionalok([optionalok,lit(ok)],_20009,_20013) --> 
    cc(ok,_20009,_20013).

optionalok([optionalok,[]],_20005,_20005) --> 
    [].

sludder([sludder,lit(there)],_20009,_20013) --> 
    cc(there,_20009,_20013).

sludder([sludder,_20041],_20019,_20023) --> 
    w(noun(world,sin,u,n),_20041,_20019,_20023).

sludder([sludder,[]],_20005,_20005) --> 
    [].

thisplace(to,[thisplace,lit(here)],_20017,_20021) --> 
    cc(here,_20017,_20021).

thisplace(to,[thisplace,lit(there)],_20017,_20021) --> 
    cc(there,_20017,_20021).

toyou0([toyou0,_20053,lit(you),!,_20143],_20031,_20035) --> 
    prep1(to,_20053,_20031,_20087),
    cc(you,_20087,_20131),
    !,
    accept(_20143,_20131,_20035).

toyou0([toyou0,[]],_20005,_20005) --> 
    [].

you0([you0,lit(you)],_20009,_20013) --> 
    cc(you,_20009,_20013).

you0([you0,[]],_20005,_20005) --> 
    [].

very0([very0,lit(very)],_20009,_20013) --> 
    cc(very,_20009,_20013).

very0([very0,[]],_20005,_20005) --> 
    [].

much0([much0,lit(much)],_20009,_20013) --> 
    cc(much,_20009,_20013).

much0([much0,[]],_20005,_20005) --> 
    [].

youverymuch0([youverymuch0,_20041],_20019,_20023) --> 
    w(noun(friend,_19987,_19989,_19991),_20041,_20019,_20023).

youverymuch0([youverymuch0,_20039,_20087,_20135],_20017,_20021) --> 
    you0(_20039,_20017,_20069),
    very0(_20087,_20069,_20117),
    much0(_20135,_20117,_20021).

youverymuch0([youverymuch0,_20055,_20113,!],_20033,_20037) --> 
    w(prep(for),_20055,_20033,_20089),
    noun_phrase1(_20001,_20003,_20005,_20113,_20089,_20037),
    !.

%%% optionals
optional(qtrailer,[optional,_20085,!],_20057,_20061) --> 
    qtrailer(_20085,_20057,_20061),
    !.

optional(w(prep(_20029)),[optional,_20093,!],_20065,_20069) --> 
    w(prep(_20029),_20093,_20065,_20069),
    !.

optional(much,[optional,_20085,!],_20057,_20061) --> 
    much(_20085,_20057,_20061),
    !.

optional(['.'],[optional,lit('.'),!],_20061,_20065) --> 
    cc('.',_20061,_20065),
    !.

optional(hello,[optional,_20085,!],_20057,_20061) --> 
    hello(_20085,_20057,_20061),
    !.

optional(hello,[optional,_20085,!],_20057,_20061) --> 
    hello(_20085,_20057,_20061),
    !.

optional(hello,[optional,_20085,!],_20057,_20061) --> 
    hello(_20085,_20057,_20061),
    !.

optional(_20017,[],_19963,_19963) --> 
    [].

%%% virtuals
lexv(_20517,_20519,pres,fin,[lexv,_20621],_20575,_20579) --> 
    virtual(lexv(_20517,_20519,pres,fin),_20621,_20575,_20579).

lexv(iv,_20519,pres,fin,[lexv,_20621],_20575,_20579) --> 
    virtual(lexv(iv,_20519,pres,fin),_20621,_20575,_20579).

infinitive([infinitive,_20571],_20549,_20553) --> 
    virtual(infinitive,_20571,_20549,_20553).

verb_phrase1(_20517,_20519,id,_20523,[verb_phrase1,_20621],_20575,_20579) --> 
    virtual(verb_phrase1(_20517,_20519,id,_20523),_20621,_20575,_20579).

noun_phrase(_20517,_20519,_20521,[noun_phrase,_20609],_20569,_20573) --> 
    virtual(noun_phrase(_20517,_20519,_20521),_20609,_20569,_20573).

verb_modifier1(_20517,_20519,_20521,_20523,[verb_modifier1,_20621],_20575,_20579) --> 
    virtual(verb_modifier1(_20517,_20519,_20521,_20523),_20621,_20575,_20579).

adverbial3(_20517,_20519,_20521,_20523,[adverbial3,_20621],_20575,_20579) --> 
    virtual(adverbial3(_20517,_20519,_20521,_20523),_20621,_20575,_20579).

adverb(_20517,_20519,_20521,[adverb,_20609],_20569,_20573) --> 
    virtual(adverb(_20517,_20519,_20521),_20609,_20569,_20573).

adverbial1(_20517,_20519,_20521,_20523,[adverbial1,_20621],_20575,_20579) --> 
    virtual(adverbial1(_20517,_20519,_20521,_20523),_20621,_20575,_20579).

lexv(iv,_20519,_20521,fin,[lexv,_20621],_20575,_20579) --> 
    virtual(lexv(iv,_20519,_20521,fin),_20621,_20575,_20579).

be([be,_20571],_20549,_20553) --> 
    virtual(be,_20571,_20549,_20553).

lexv(iv,_20519,_20521,_20523,[lexv,_20621],_20575,_20579) --> 
    virtual(lexv(iv,_20519,_20521,_20523),_20621,_20575,_20579).

prep(_20517,[prep,_20585],_20557,_20561) --> 
    virtual(prep(_20517),_20585,_20557,_20561).

np1_accept(_20517,_20519,_20521,[np1_accept,_20609],_20569,_20573) --> 
    virtual(np1_accept(_20517,_20519,_20521),_20609,_20569,_20573).

noun_phrase1(_20517,_20519,_20521,[noun_phrase1,_20609],_20569,_20573) --> 
    virtual(noun_phrase1(_20517,_20519,_20521),_20609,_20569,_20573).

the(_20517,[the,_20585],_20557,_20561) --> 
    virtual(the(_20517),_20585,_20557,_20561).

npgap(_20521:thing,[npgap,_20591],_20563,_20567) --> 
    virtual(npgap(_20521:thing),_20591,_20563,_20567).

which2([which2,_20571],_20549,_20553) --> 
    virtual(which2,_20571,_20549,_20553).

lexv(iv,be1,pres,fin,[lexv,_20621],_20575,_20579) --> 
    virtual(lexv(iv,be1,pres,fin),_20621,_20575,_20579).

do([do,_20571],_20549,_20553) --> 
    virtual(do,_20571,_20549,_20553).

prep(in,[prep,_20585],_20557,_20561) --> 
    virtual(prep(in),_20585,_20557,_20561).

noun_phrase1(_20517,true,_20521,[noun_phrase1,_20609],_20569,_20573) --> 
    virtual(noun_phrase1(_20517,true,_20521),_20609,_20569,_20573).

np1(_20517,_20519,_20521,[np1,_20609],_20569,_20573) --> 
    virtual(np1(_20517,_20519,_20521),_20609,_20569,_20573).

adverbial1(in,_20519,_20521,_20523,[adverbial1,_20621],_20575,_20579) --> 
    virtual(adverbial1(in,_20519,_20521,_20523),_20621,_20575,_20579).

prep1(to,[prep1,_20585],_20557,_20561) --> 
    virtual(prep1(to),_20585,_20557,_20561).

npgap(_20517,[npgap,_20585],_20557,_20561) --> 
    virtual(npgap(_20517),_20585,_20557,_20561).

prep(from,[prep,_20585],_20557,_20561) --> 
    virtual(prep(from),_20585,_20557,_20561).

who([who,_20571],_20549,_20553) --> 
    virtual(who,_20571,_20549,_20553).

has([has,_20571],_20549,_20553) --> 
    virtual(has,_20571,_20549,_20553).

art([art,_20571],_20549,_20553) --> 
    virtual(art,_20571,_20549,_20553).

noun(_20517,_20519,u,n,_20525,_20527,[noun,_20645],_20587,_20591) --> 
    virtual(noun(_20517,_20519,u,n,_20525,_20527),_20645,_20587,_20591).

that([that,_20571],_20549,_20553) --> 
    virtual(that,_20571,_20549,_20553).

prep(with,[prep,_20585],_20557,_20561) --> 
    virtual(prep(with),_20585,_20557,_20561).

adverbial1(with,_20519,_20521,_20523,[adverbial1,_20621],_20575,_20579) --> 
    virtual(adverbial1(with,_20519,_20521,_20523),_20621,_20575,_20579).

which([which,_20571],_20549,_20553) --> 
    virtual(which,_20571,_20549,_20553).

of([of,_20571],_20549,_20553) --> 
    virtual(of,_20571,_20549,_20553).

be1([be1,_20571],_20549,_20553) --> 
    virtual(be1,_20571,_20549,_20553).

rep_vp(_20517,_20519,_20521,_20523,_20525,_20527,_20529,[rep_vp,_20657],_20593,_20597) --> 
    virtual(rep_vp(_20517,_20519,_20521,_20523,_20525,_20527,_20529),_20657,_20593,_20597).

prep(to,[prep,_20585],_20557,_20561) --> 
    virtual(prep(to),_20585,_20557,_20561).

lexv(rv,_20519,past,fin,[lexv,_20621],_20575,_20579) --> 
    virtual(lexv(rv,_20519,past,fin),_20621,_20575,_20579).

lexv(dtv,_20519,past,fin,[lexv,_20621],_20575,_20579) --> 
    virtual(lexv(dtv,_20519,past,fin),_20621,_20575,_20579).

lexv(tv,_20519,pres,fin,[lexv,_20621],_20575,_20579) --> 
    virtual(lexv(tv,_20519,pres,fin),_20621,_20575,_20579).

this([this,_20571],_20549,_20553) --> 
    virtual(this,_20571,_20549,_20553).

verb_phrase(_20517,_20519,_20521,_20523,[verb_phrase,_20621],_20575,_20579) --> 
    virtual(verb_phrase(_20517,_20519,_20521,_20523),_20621,_20575,_20579).

date(_20517,_20519,[date,_20597],_20563,_20567) --> 
    virtual(date(_20517,_20519),_20597,_20563,_20567).

pronoun(_20517,[pronoun,_20585],_20557,_20561) --> 
    virtual(pronoun(_20517),_20585,_20557,_20561).

someone([someone,_20571],_20549,_20553) --> 
    virtual(someone,_20571,_20549,_20553).

noun(_20517,_20519,_20521,n,_20525,_20527,[noun,_20645],_20587,_20591) --> 
    virtual(noun(_20517,_20519,_20521,n,_20525,_20527),_20645,_20587,_20591).

prep1(_20517,[prep1,_20585],_20557,_20561) --> 
    virtual(prep1(_20517),_20585,_20557,_20561).

npgap(_20521:_20523,[npgap,_20591],_20563,_20567) --> 
    virtual(npgap(_20521:_20523),_20591,_20563,_20567).

thispron([thispron,_20571],_20549,_20553) --> 
    virtual(thispron,_20571,_20549,_20553).

np_head(0,_20519,_20521,_20523,_20525,_20527,[np_head,_20645],_20587,_20591) --> 
    virtual(np_head(0,_20519,_20521,_20523,_20525,_20527),_20645,_20587,_20591).

prep1(near,[prep1,_20585],_20557,_20561) --> 
    virtual(prep1(near),_20585,_20557,_20561).

a([a,_20571],_20549,_20553) --> 
    virtual(a,_20571,_20549,_20553).

the([the,_20571],_20549,_20553) --> 
    virtual(the,_20571,_20549,_20553).

ofx([ofx,_20571],_20549,_20553) --> 
    virtual(ofx,_20571,_20549,_20553).

quant0(_20517,[quant0,_20585],_20557,_20561) --> 
    virtual(quant0(_20517),_20585,_20557,_20561).



package regtopToBusTUC;

import java.io.*;
import java.sql.Timestamp;
import java.util.*;

/**
	Class for the prolog predicate departureday.<BR>
		@author Tore Bruland
*/
public class RegdepHolder {

	/**
	 * @param bustucOutputRootFolder Where to write the regxxx.pl files (for bustuc/db/tables)
	 */
	public RegdepHolder(String bustucOutputRootFolder) {
		directory = bustucOutputRootFolder;
		departureday = new ArrayList<DepDayRec>();
		index = new TreeMap<String,String>();
	}	

	/**	instance is used to hold several filesets<br>
		method is called before each new fileset is read 
	*/	
	public void clear() {
		directory = "";
		departureday.clear();
		index.clear();
	}
	
	/**	collects data from the tix file.*/		
	public void setTix(String iLine, String iTour, String iDeptime, String iTdax, String iDayc) {
		DepDayRec temp = new DepDayRec(iLine,iTour,iDeptime,iTdax,iDayc);
		if ( !departureday.contains(temp) ) {
			departureday.add(temp);
		}
	}//setTix

	public void OLDsetTix(String iLine, String iTour, String iDeptime, String iTdax, String iDayc) {
		departureday.add(new DepDayRec(iLine,iTour,iDeptime,iTdax,iDayc));
	}	

	/**	collects data from the dko file. */		
	public void setDko(String iDayc, String iMask1) {
		String dayc = Util.trimZero(iDayc);
		//String mask1 = iMask1;
		index.put(dayc,dayc); //  Tore Amble 081223 /////		index.put(dayc,"d"+mask1); 
	}

	/**		return converted dmask1	*/
	public String getDmask1(String key) {
		if ( index.containsKey(key)) {
			return index.get(key);
		}
		System.out.println("********> RegdepHolder.getDmask1("+key+") did not find any dmask1");
		return "no dmask1 found";
	}
	
	/**	write the records of the departureday predicate to the proper directory and filename regdep.pl<br>
	 * 	Uses tdaxindex to convert old tdax numbers.
	 */
	public void writePredicates(TreeMap<String,String> tdaxIndex) {
	    DepDayRec temp;
	    ArrayList<DepDayRec> dep_unique = new ArrayList<DepDayRec>(); // keep the unique keys
	    // read all departureday and change tdax
	    // store in unique ArrayList
	    for (Iterator<DepDayRec> iter=departureday.iterator(); iter.hasNext(); ) {
	            temp = iter.next();
	            temp.dmask1 = getDmask1(temp.dayc);
	            if ( tdaxIndex.containsKey(temp.tdax)) {
	                    //System.out.println("tdax:"+temp.tdax+" converted til "+tdaxIndex.get(temp.tdax));
	                    temp.tdax = tdaxIndex.get(temp.tdax);
	            }
	            if ( !dep_unique.contains(temp) ) {
	                    dep_unique.add(temp);
	            }
	            
	    }               
	    // open file and write the unique rows
	    try{
	    	BufferedWriter outFile = new BufferedWriter( new FileWriter(directory+File.separator+"regdep.pl") );
			outFile.write("%% Generated by regtopToBusTUC.RegdepHolder.java on "+ new Timestamp(new Date().getTime()) +"\n\n");
	    	outFile.write("%% DEPARTUREDAY  ( RID, TOUR_TYPE, DEPARTURE_TIME, DAY_CODE )\n");
	    	outFile.write("%%   Example: departureday( bus_2_6101, 749, 723, 1).\n");
			outFile.write("%%   Tourtype almost matches the linenumber in regpas.pl and FILE.TDA or FILE.TMS\n\n");
	        for (Iterator<DepDayRec> iter=dep_unique.iterator(); iter.hasNext(); ) {
	                outFile.write(iter.next().toString());
	        }                       
	        outFile.close();
	    } catch (IOException e ) {
	            System.out.println("********** IOException "+e);
	            e.printStackTrace();
	    }               
	}

	public void OLDwritePredicates(TreeMap<String,String> tdaxIndex) {
		DepDayRec temp;
		try {
			BufferedWriter outFile = new BufferedWriter( new FileWriter(directory+File.separator+"regdep.pl"));
			/*for (Iterator iter=departureday.iterator();iter.hasNext(); ) {
				outFile.write(iter.next()+"\n");
			}*/		
			for (Iterator<DepDayRec> iter=departureday.iterator(); iter.hasNext(); ) {
				temp = iter.next();
				temp.dmask1 = getDmask1(temp.dayc);
				if ( tdaxIndex.containsKey(temp.tdax)) {
					//System.out.println("tdax:"+temp.tdax+" konvertert til "+tdaxIndex.get(temp.tdax));
					temp.tdax = tdaxIndex.get(temp.tdax);
				}
				outFile.write(temp.toString());
			}			
			outFile.close();
		} catch (IOException e ) {
			System.out.println("********** IOException "+e);
			e.printStackTrace();
		}		
	}	



	/**
		holds the records of the departureday predicate
	*/	
	public ArrayList<DepDayRec> departureday;
	/**
		name of the directory
	*/		
	public String directory;
	/**
		convering table for dmask1
	*/	
	public TreeMap<String,String> index;
}

class DepDayRec {
	public DepDayRec(String iLine, String iTour, String iDeptime, String iTdax, String iDayc) {
		 line=iLine.trim();  // TA-110209 trimZero
		 tour=iTour.trim();  //
		deptime=Util.trimZero(iDeptime);
		tdax=Util.trimZero(iTdax);		
		dayc=Util.trimZero(iDayc);	
		dmask1="";
	}
	public String toString() {
		 	return "departureday( bus_"+line+"_"+tour+", "+tdax+", "+deptime+", "+dmask1+" ).\n";

	}



	public boolean equals(Object o) {
		//
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		final DepDayRec obj = (DepDayRec) o;
		//System.out.println("object equals."+obj.getN_low() +" vs"+noun.low+" and "+obj.getV_low()+" vs "+verb.low);
		if (	obj.line.equals(line) && 
				obj.tour.equals(tour) &&
				obj.deptime.equals(deptime) &&
				obj.tdax.equals(tdax) &&
				obj.dayc.equals(dayc) &&
				obj.dmask1.equals(dmask1) ){
			return true;
		}
		return false;
	}//equals









	String line, tour, deptime, tdax, dayc, dmask1; 
}
